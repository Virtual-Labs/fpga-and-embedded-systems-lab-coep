<html><head><title>Procedure for executing Experiment No 7: Cross Compilation Techniques for ARM using GNU ARM Toolchain</title><style type="text/css">ol{margin:0;padding:0}p{margin:0}.c10{direction:ltr;margin-left:-58.5pt}.c2{list-style-position:inside;text-indent:9pt;direction:ltr;margin-left:-58.5pt}.c13{list-style-position:inside;text-indent:9pt;direction:ltr;margin-left:-49.5pt}.c9{text-indent:9pt;direction:ltr;margin-left:-54pt}.c1{width:468pt;background-color:#ffffff;padding:72pt 72pt 72pt 72pt}.c12{text-indent:9pt;direction:ltr;margin-left:-58.5pt}.c11{list-style-type:decimal;margin:0;padding:0}.c3{color:inherit;text-decoration:inherit}.c8{color:#3366ff;font-size:14pt}.c15{height:11pt}.c14{text-align:justify}.c6{color:#000099}.c4{font-family:Courier New}.c7{color:#333333}.c0{font-weight:bold}.c5{color:#ff0000}body{color:#000000;font-size:11pt;font-family:Arial}h1{padding-top:24pt;color:#000000;font-size:24pt;font-family:Arial;font-weight:bold;padding-bottom:6pt}h2{padding-top:18pt;color:#000000;font-size:18pt;font-family:Arial;font-weight:bold;padding-bottom:4pt}h3{padding-top:14pt;color:#000000;font-size:14pt;font-family:Arial;font-weight:bold;padding-bottom:4pt}h4{padding-top:12pt;color:#000000;font-size:12pt;font-family:Arial;font-weight:bold;padding-bottom:2pt}h5{padding-top:11pt;color:#000000;font-size:11pt;font-family:Arial;font-weight:bold;padding-bottom:2pt}h6{padding-top:10pt;color:#000000;font-size:10pt;font-family:Arial;font-weight:bold;padding-bottom:2pt}</style></head><body class="c1"><h1 class="c10"><span class="c5">Procedure</span></h1><p class="c12 c14"><span>In this experiment, we will start with cross-compilation of our programs. So, as discussed in theory, we will use the GNU ARM toolchain which has the arm-linux-gcc as the cross compiler, to compile our executable for the ARM architecture. We will then observe the difference between the binaries created using gcc and arm-linux-gcc and then we will have the cross-compiled ARM executable file.</span></p><p class="c12 c14"><span>&nbsp;</span></p><p class="c12"><span>&nbsp;</span></p><p class="c12"><span class="c0 c8">&nbsp;CROSS COMPILATION :</span></p><ol class="c11" start="1"><li class="c2"><span>On the</span><span class="c0">&nbsp;Virtual x86 Shell</span><span>&nbsp;create a new C file and save it with a &ldquo;.c&rdquo; extension.</span></li><li class="c2"><span>For compliation of the code, we require a toolchain for ARM , </span><span class="c0">arm-linux-gcc</span></li><li class="c2"><span>This toolchain is in compressed form, i.e, a &lsquo;tar&rsquo; file. eg. </span><span class="c6"><a class="c3" href="http://arm-linux-gcc-4.3.2.tar.bz">arm-linux-gcc-4.3.2.tar.bz</a></span></li><li class="c2"><span>For uncompressing the tar file, issue a command </span><span class="c0">tar -xvf </span><span class="c6 c0"><a class="c3" href="http://arm-linux-gcc-4.3.2.tar.bz">arm-linux-gcc-4.3.2.tar.bz</a></span><span class="c0">&nbsp;</span></li><li class="c2"><span>Now it can be seen that the toolchain is being extracted.</span></li><li class="c2"><span>Once you are ready with your C program, save it and go to </span><span class="c0">Compile for x86. </span></li><li class="c2"><span>Then click on </span><span class="c0">Execute on x86. </span><span>An x86 executable will be created. </span></li><li class="c2"><span>Compile the code with </span><span class="c4 c0">arm-linux-gcc -o testfile-arm test.c</span></li><li class="c2"><span>In the above example, once the code is compiled, a file </span><span class="c4 c0">testfile-arm</span><span>&nbsp;is created.</span></li><li class="c13"><span>Give the command </span><span class="c0 c4">file testfile-arm</span><span>&nbsp;on the shell and observe the output. Of course, &nbsp;if &nbsp; &nbsp; you try to execute this on the x86 shell, it won&#39;t as expected. </span></li></ol><p class="c12 c15"><span></span></p><p class="c12"><span>&nbsp;</span><span class="c0 c7">SAMPLE PROGRAM</span></p><p class="c12"><span class="c4 c0">#include</span><span class="c0">&lt;stdio.h&gt;</span><span><br></span></p><p class="c9"><span class="c4 c0">unsigned int i;</span><span><br><br></span><span class="c4 c0">int main (void)</span><span><br></span><span class="c4 c0">{</span><span><br></span><span class="c4 c0">printf(&quot;TESTING OF SAM9 BOARD&quot;);</span><span><br></span><span class="c4 c0">for(i=0;i&lt;=9;i++)</span><span><br><br></span><span class="c4 c0">printf(&quot;rn%d&quot;, i);</span><span><br></span><span class="c4 c0">return 0;</span><span><br></span><span class="c4 c0">}</span><span><br><br></span></p><p class="c12 c15"><span></span></p></body></html>