/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package JavaFiles;

import java.io.IOException;
import java.io.PrintStream;
import java.util.Date;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author root
 */
public class GenerateVerilogCode {

    Date date = new Date();

    public void generateSerialSinglePE(PrintStream p, String device, int m, int n, int x, int y, int mat1[][], int mat2[][]) {
        p.println("//Architectural Design Approach : Matrix Multiplication Using Serial (Single PE) Architecture\n\n");
        p.println("// Device : " + device);
        p.println("// Generated on : " + date);
        String genmat = "";
        int cnt = 1;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                genmat += "\nmatrix1[" + cnt++ + "]=" + mat1[i][j] + ";";
            }
            genmat += "\n";
        }
        genmat += "\n//input matrix 2";
        cnt = 1;
        for (int i = 0; i < x; i++) {
            for (int j = 0; j < y; j++) {
                genmat += "\nmatrix2[" + cnt++ + "]=" + mat2[i][j] + ";";

            }
            genmat += "\n";
        }

        p.println("\n`timescale 1ns / 1ps"
                + "\n"
                + "\nmodule first(clk,ce,mout);"
                + "\ninput clk,ce;"
                + "\noutput reg [31:0] mout;"
                + "\n"
                + "\nreg [31:0] matrix1 [16:1];"
                + "\nreg [31:0] matrix2 [16:1];"
                + "\nreg [31:0] matrix3 [16:1];"
                + "\n"
                + "\nreg [63:0] m1,sum,add;"
                + "\n"
                + "\ninteger m,n,i,j,k,p,l,q,rrt;"
                + "\ninitial"
                + "\nbegin"
                + "\nm=4;"
                + "\nl=1;"
                + "\np=1;"
                + "\nn=4;"
                + "\nk=1;"
                + "\ni=1;"
                + "\nj=1;"
                + "\nq=1;"
                + "\nsum=0;"
                + "\nrrt=4;"
                + "\n//input matrix 1"
                + "\n"
                + genmat
                + "\n"
                + "\nend"
                + "\n"
                + "\nalways @(posedge clk)"
                + "\nbegin"
                + "\n"
                + "\nm1=matrix1[k]*matrix2[p];"
                + "\nsum=sum+m1;"
                + "\n"
                + "\n/////////control logic"
                + "\nk=k+1;"
                + "\np=p+4;"
                + "\n"
                + "\nif(p>16)"
                + "\nbegin"
                + "\np=l;"
                + "\nmout=sum;"
                + "\nsum=0;"
                + "\nend"
                + "\n"
                + "\nif(l>m)"
                + "\nbegin"
                + "\nl=1;"
                + "\nq=q+4;"
                + "\nrrt=rrt+4;"
                + "\nend"
                + "\n"
                + "\nif(k>rrt)"
                + "\nbegin"
                + "\nk=q;"
                + "\nl=l+1;"
                + "\nj=j+1;"
                + "\nend"
                + "\n"
                + "\n"
                + "\nif(j>n)"
                + "\nbegin"
                + "\nj=1;"
                + "\ni=i+1;"
                + "\nend"
                + "\n"
                + "\n"
                + "\nif(i>m)"
                + "\nbegin"
                + "\ni=1;"
                + "\nend"
                + "\n"
                + "\nend"
                + "\nendmodule");
    }

    public void generateParallelNPEForRoots(PrintStream p, String device) {
        p.println("//Architectural Design Approach : Roots of Quadratic Equation Using Parallel (N - PE) Architecture\n\n");
        //p.println("// Device : " + device);
        //p.println("// Generated on : " + date);
        p.println("// Working on it.......");
    }

    public void generateIterative4PEForRoots(PrintStream p, String device) {
        p.println("//Architectural Design Approach : Roots of Quadratic Equations Using Iterative (4 - PE) Architecture\n\n");
        //p.println("// Device : " + device);
        // p.println("// Generated on : " + date);
        p.println("// Working on it.......");
    }

    public void generateSerialSinglePEForRoots(PrintStream p, String device) {
        p.println("//Architectural Design Approach : Roots of Quadratic Equations Using Serial (Single PE) Architecture\n\n");
        //p.println("// Device : " + device);
        //p.println("// Generated on : " + date);
        p.println("// Working on it.......");

    }

    public void generateParallelNPE(PrintStream p, String device, int m, int n, int x, int y, int mat1[][], int mat2[][]) {
        p.println("//Architectural Design Approach : Matrix Multiplication Using Parallel (N - PE) Architecture\n\n");
        p.println("// Device : " + device);
        p.println("// Generated on : " + date);
        String genmat = "";
        int cnt = 1;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                genmat += "\nmatrix1[" + cnt++ + "]=" + mat1[i][j] + ";";
            }
            genmat += "\n";
        }
        genmat += "\n//input matrix 2";
        cnt = 1;
        for (int i = 0; i < x; i++) {
            for (int j = 0; j < y; j++) {
                genmat += "\nmatrix2[" + cnt++ + "]=" + mat2[i][j] + ";";
            }
            genmat += "\n";
        }

        p.println("\n"
                + "\n"
                + "\n"
                + "\n`timescale 1ns / 1ps"
                + "\n"
                + "\nmodule second(clk,ce,mout1,mout2,mout3,mout4);"
                + "\n"
                + "\ninput clk,ce;"
                + "\noutput reg [31:0] mout1,mout2,mout3,mout4;"
                + "\n"
                + "\nreg [31:0] matrix1 [16:1];"
                + "\nreg [31:0] matrix2 [16:1];"
                + "\nreg [31:0] matrix3 [16:1];"
                + "\n"
                + "\nreg [31:0] pe1,pe2,pe3,pe4;"
                + "\n"
                + "\ninteger k,l,m,n,q;"
                + "\ninitial"
                + "\nbegin"
                + "\nk=1;"
                + "\nl=5;"
                + "\nm=9;"
                + "\nn=13;"
                + "\nq=1;"
                + "\n//input matrix 1"
                + genmat
                + "\n"
                + "\nend"
                + "\n"
                + "\nalways @(posedge clk)"
                + "\nbegin"
                + "\npe1= (matrix1[k]*matrix2[q])+(matrix1[k+1]*matrix2[q+4])+(matrix1[k+2]*matrix2[q+8])+(matrix1[k+3]*matrix2[q+12]);"
                + "\nmout1=pe1;"
                + "\npe2= (matrix1[l]*matrix2[q])+(matrix1[l+1]*matrix2[q+4])+(matrix1[l+2]*matrix2[q+8])+(matrix1[l+3]*matrix2[q+12]);"
                + "\nmout2=pe2;"
                + "\npe3= (matrix1[m]*matrix2[q])+(matrix1[m+1]*matrix2[q+4])+(matrix1[m+2]*matrix2[q+8])+(matrix1[m+3]*matrix2[q+12]);"
                + "\nmout3=pe3;"
                + "\npe4= (matrix1[n]*matrix2[q])+(matrix1[n+1]*matrix2[q+4])+(matrix1[n+2]*matrix2[q+8])+(matrix1[n+3]*matrix2[q+12]);"
                + "\nmout4=pe4;"
                + "\n q=q+1;"
                + "\n"
                + "\nend"
                + "\n"
                + "\nendmodule");

    }

    public void generateIterative4PE(PrintStream p, String device, int m, int n, int x, int y, int mat1[][], int mat2[][]) {
        p.println("//Architectural Design Approach : Matrix Multiplication Using Iterative (4 - PE) Architecture\n\n");
        p.println("// Device : " + device);
        p.println("// Generated on : " + date);
        String genmat = "";
        int cnt = 1;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                long laxt = new Calculations().convertToFixPoint(mat1[i][j] + ".0", 23, 8);
                genmat += "\nmatrix1[" + cnt++ + "]=" + mat1[i][j] + ";";
            }
            genmat += "\n";
        }
        genmat += "\n//input matrix 2";
        cnt = 1;
        for (int i = 0; i < x; i++) {
            for (int j = 0; j < y; j++) {
                long laxt = new Calculations().convertToFixPoint(mat2[i][j] + ".0", 23, 8);
                genmat += "\nmatrix2[" + cnt++ + "]=" + mat2[i][j] + ";";
            }
            genmat += "\n";
        }
        p.println("\n`timescale 1ns / 1ps"
                + "\n"
                + "\nmodule mm(clk,ce,ot1,ot2,ot3,ot4);"
                + "\ninput clk,ce;"
                + "\noutput reg [31:0] ot1,ot2,ot3,ot4;"
                + "\ninteger m,n;//matrix size"
                + "\ninteger kindex1,kindex2,kindex3,kindex4,r1,r2,r3,r4;"
                + "\nreg [31:0] matrix1 [16:1];//input matrix1"
                + "\nreg [31:0] matrix2 [16:1];//input matrix2"
                + "\nreg [63:0] mpe1,mpe2,mpe3,mpe4;"
                + "\nreg [31:0] matrix3 [16:1];//output matrix"
                + "\ninitial"
                + "\nbegin"
                + "\n"
                + "\nr1=1;"
                + "\nr2=5;"
                + "\nr3=9;"
                + "\nr4=13;"
                + "\n/////input matrix 1//////////"
                + "\n"
                + genmat
                + "\n"
                + "\nend"
                + "\n"
                + "\n"
                + "\nalways @(posedge clk)"
                + "\nbegin"
                + "\n//first PE//////////"
                + "\nmpe1=matrix1[r1]*matrix2[1]+matrix1[r1+1]*matrix2[1+4]+matrix1[r1+2]*matrix2[1+8]+matrix1[r1+3]*matrix2[1+12];"
                + "\nkindex1=r1;"
                + "\nif(kindex1>16)"
                + "\nkindex1=1;"
                + "\nmatrix3[kindex1]=mpe1" + ";//>>24;"
                + "\not1=matrix3[kindex1];"
                + "\n"
                + "\n//////Second PE///////"
                + "\nmpe2=matrix1[r2]*matrix2[2]+matrix1[r2+1]*matrix2[2+4]+matrix1[r2+2]*matrix2[2+8]+matrix1[r2+3]*matrix2[2+12];"
                + "\nkindex2=r2+1;"
                + "\nif(kindex2>16)"
                + "\nkindex2=2;"
                + "\nmatrix3[kindex2]=mpe2" + ";//>>24;"
                + "\not2=matrix3[kindex2];"
                + "\n"
                + "\n//////////third PE////////////"
                + "\nmpe3=matrix1[r3]*matrix2[3]+matrix1[r3+1]*matrix2[3+4]+matrix1[r3+2]*matrix2[3+8]+matrix1[r3+3]*matrix2[3+12];"
                + "\nkindex3=r3+2;"
                + "\nif(kindex3>16)"
                + "\nkindex3=3;"
                + "\nmatrix3[kindex3]=mpe3" + ";//>>24;"
                + "\not3=matrix3[kindex3];"
                + "\n"
                + "\n//////////4th PE////////"
                + "\nmpe4=matrix1[r4]*matrix2[4]+matrix1[r4+1]*matrix2[4+4]+matrix1[r4+2]*matrix2[4+8]+matrix1[r4+3]*matrix2[4+12];"
                + "\nkindex4=r4+3;"
                + "\nif(kindex4>16)"
                + "\nkindex4=4;"
                + "\nmatrix3[kindex4]=mpe4" + ";//>>24;"
                + "\not4=matrix3[kindex4];"
                + "\n"
                + "\nr1=r1+4;"
                + "\nr2=r2+4;"
                + "\nr3=r3+4;"
                + "\nr4=r4+4;"
                + "\n"
                + "\nif(r1>16)"
                + "\nr1=1;"
                + "\n"
                + "\nif(r2>16)"
                + "\nr2=1;"
                + "\n"
                + "\nif(r3>16)"
                + "\nr3=1;"
                + "\n"
                + "\nif(r4>16)"
                + "\nr4=1;"
                + "\n"
                + "\nend"
                + "\n"
                + "\n"
                + "\nendmodule");

    }

    public void generateFloatingSubtraction(PrintStream p, String device, String givenDecimal1, String givenDecimal2, String s1, String s2) {
        p.println("//Floating Point Arithmetics : Multiplication....\n\n");
        p.println("// Device : " + device);
        p.println("// Generated on : " + date);

        p.println("\n`timescale 1ns / 1ps"
                + "\n//////////////////////////////////////////////////////////////////////////////////"
                + "\n// Company: "
                + "\n// Engineer: "
                + "\n// "
                + "\n// Create Date:    15:01:40 04/04/2012 "
                + "\n// Design Name: "
                + "\n// Module Name:    substraction "
                + "\n// Project Name: "
                + "\n// Target Devices: "
                + "\n// Tool versions: "
                + "\n// Description: "
                + "\n//"
                + "\n// Dependencies: "
                + "\n//"
                + "\n// Revision: "
                + "\n// Revision 0.01 - File Created"
                + "\n// Additional Comments: "
                + "\n//"
                + "\n//////////////////////////////////////////////////////////////////////////////////"
                + "\nmodule substraction(clk,ce,out1);"
                + "\ninput clk,ce;"
                + "\nreg [31:0] num1,num2;"
                + "\noutput reg [31:0] out1;"
                + "\nreg [31:0] no1,temp,ans,num11,num22;"
                + "\nreg [23:0] num10,num20,out10,temp1;"
                + "\nreg [24:0] out3;"
                + "\nreg [7:0] exp1,num12;"
                + "\ninteger k;"
                + "\n"
                + "\ninitial"
                + "\nbegin"
                + "\nnum11=0;num22=0;out1=0;"
                + "\nend"
                + "\n"
                + "\nfunction [31:0] convert;"
                + "\ninput [31:0] num;"
                + "\nbegin"
                + "\nno1=num;"
                + "\n	if (no1[31]==1)"
                + "\n		begin "
                + "\n     	no1[30:0]=~no1[30:0]+1;"
                + "\n		end"
                + "\nif (no1==0)"
                + "\nbegin"
                + "\nans=0;"
                + "\nend"
                + "\nelse"
                + "\nbegin "
                + "\nif(no1[30:0]<=32'h00800000)     // only for fraction part i.e ,<1"
                + "\n	begin"
                + "\n		if (no1[23]==1)"
                + "\n		begin"
                + "\n		no1=no1;"
                + "\n		exp1=0;"
                + "\n		end"
                + "\n		else if(no1[22]==1)"
                + "\n		begin"
                + "\n		exp1=-1;"
                + "\n		no1=no1<<1;"
                + "\n		end"
                + "\n		else if(no1[21]==1)"
                + "\n		begin"
                + "\n		exp1=-2;"
                + "\n		no1=no1<<2;"
                + "\n		end"
                + "\n		else if(no1[20]==1)"
                + "\n		begin"
                + "\n		exp1=-3;"
                + "\n		no1=no1<<3;"
                + "\n		end"
                + "\n		else if(no1[19]==1)"
                + "\n		begin"
                + "\n		exp1=-4;"
                + "\n		no1=no1<<4;"
                + "\n		end"
                + "\n		else if(no1[18]==1)"
                + "\n		begin"
                + "\n		exp1=-5;"
                + "\n		no1=no1<<5;"
                + "\n		end"
                + "\n		else if(no1[17]==1)"
                + "\n		begin"
                + "\n		exp1=-6;"
                + "\n		no1=no1<<6;"
                + "\n		end"
                + "\n		else if(no1[16]==1)"
                + "\n		begin"
                + "\n		exp1=-7;"
                + "\n		no1=no1<<7;"
                + "\n		end"
                + "\n		else if(no1[15]==1)"
                + "\n		begin"
                + "\n		exp1=-8;"
                + "\n		no1=no1<<8;"
                + "\n		end"
                + "\n		else if(no1[14]==1)"
                + "\n		begin"
                + "\n		exp1=-9;"
                + "\n		no1=no1<<9;"
                + "\n		end"
                + "\n		else if(no1[13]==1)"
                + "\n		begin"
                + "\n		exp1=-10;"
                + "\n		no1=no1<<10;"
                + "\n		end"
                + "\n		else if(no1[12]==1)"
                + "\n		begin"
                + "\n		exp1=-11;"
                + "\n		no1=no1<<11;"
                + "\n		end"
                + "\n		else if(no1[11]==1)"
                + "\n		begin"
                + "\n		exp1=-12;"
                + "\n		no1=no1<<12;"
                + "\n		end"
                + "\n"
                + "\nend"
                + "\nelse if (no1>32'h007FFFFF)   // for no >1   try with reverse sequence"
                + "\n	begin"
                + "\n		if (no1[30]==1) "
                + "\n		begin"
                + "\n		no1[30:0]=no1[30:0] >> 7;"
                + "\n		exp1=7;"
                + "\n		end"
                + "\n		else if (no1[29]==1)"
                + "\n		begin"
                + "\n		no1[30:0]=no1[30:0] >> 6;"
                + "\n		exp1=6;"
                + "\n		end"
                + "\n		else if (no1[28]==1)"
                + "\n		begin"
                + "\n		no1[30:0]=no1[30:0] >> 5;"
                + "\n		exp1=5;"
                + "\n		end"
                + "\n		else if (no1[27]==1)"
                + "\n		begin"
                + "\n		no1[30:0]=no1[30:0] >> 4;"
                + "\n		exp1=4;"
                + "\n		end"
                + "\n		else if (no1[26]==1)"
                + "\n		begin"
                + "\n		no1[30:0]=no1[30:0] >> 3;"
                + "\n		exp1=3;"
                + "\n		end"
                + "\n		else if (no1[25]==1)"
                + "\n		begin"
                + "\n		no1[30:0]=no1[30:0] >> 2;"
                + "\n		exp1=2;"
                + "\n		end"
                + "\n		else if (no1[24]==1)"
                + "\n		begin"
                + "\n		no1[30:0]=no1[30:0] >> 1;"
                + "\n		exp1=1;"
                + "\n		end"
                + "\n		"
                + "\nend"
                + "\nans[31]=no1[31];"
                + "\nans[30:23]=exp1+8'd127;"
                + "\nans[22:0]=no1[22:0];"
                + "\nend"
                + "\nconvert=ans;"
                + "\nend"
                + "\nendfunction"
                + "\nalways @(posedge clk)"
                + "\nbegin"
                + "\nnum11=32'd" + givenDecimal1 + ";"
                + "\nnum22=32'd" + givenDecimal2 + ";"
                + "\nif (num11[31]!==num22[31])"
                + "\nk=1;"
                + "\nif (num11[31]==num22[31])"
                + "\nk=2;"
                + "\n"
                + "\ncase(k)"
                + "\n1:begin"
                + "\n"
                + "\nif(num11[30:0]<num22[30:0])"
                + "\n		begin"
                + "\n		temp=num22;"
                + "\n		num22=num11;"
                + "\n		num11=temp;"
                + "\n		out1[31]=~num11[31];"
                + "\n		end"
                + "\nelse"
                + "\n		out1[31]=num11[31];"
                + "\n			"
                + "\n			begin"
                + "\n			num12=num11[30:23]-num22[30:23];"
                + "\n			num10[23]=1;"
                + "\n			num10[22:0]=num11[22:0];"
                + "\n			num20[23]=1;"
                + "\n			num20[22:0]=num22[22:0];"
                + "\n			num20=num20>>num12;"
                + "\n			out3[24:0]=num10+num20;"
                + "\n			if(out3[24]==1)"
                + "\n			begin"
                + "\n			out1[30:23]=num11[30:23]+1;"
                + "\n			out1[22:0]=out3[23:1];"
                + "\n			end"
                + "\n			else"
                + "\n			begin"
                + "\n			out1[30:23]=num11[30:23];"
                + "\n			out1[22:0]=out3[22:0];"
                + "\n			end"
                + "\n		end"
                + "\nend"
                + "\n2:begin"
                + "\nif (num11[30:0]==num22[30:0])"
                + "\nout1=0;"
                + "\nelse"
                + "\nbegin"
                + "\nif(num11[30:0]<num22[30:0])"
                + "\n		begin"
                + "\n		temp=num22;"
                + "\n		num22=num11;"
                + "\n		num11=temp;"
                + "\n		out1[31]=~num11[31];"
                + "\n		end"
                + "\nelse"
                + "\n		out1[31]=num11[31];"
                + "\n		begin"
                + "\n		   num12=num11[30:23]-num22[30:23];"
                + "\n			num10[23]=1;"
                + "\n			num10[22:0]=num11[22:0];"
                + "\n			num20[23]=1;"
                + "\n			num20[22:0]=num22[22:0];"
                + "\n			num20=num20>>num12;"
                + "\n			out3[24:0]=num10-num20;"
                + "\n			if(out3[23]==1)"
                + "\n			begin"
                + "\n			out1[30:23]=num11[30:23];"
                + "\n			out1[22:0]=out3[22:0];"
                + "\n			end"
                + "\n			else if(out3[22]==1)"
                + "\n			begin"
                + "\n			out1[30:23]=num11[30:23]-1;"
                + "\n			out1[22:1]=out3[21:0];"
                + "\n			out1[0]=0;"
                + "\n			end"
                + "\n			else if(out3[21]==1)"
                + "\n			begin"
                + "\n			out1[30:23]=num11[30:23]-2;"
                + "\n			out1[22:2]=out3[20:0];"
                + "\n			out1[1:0]=0;"
                + "\n			end"
                + "\n			else if(out3[20]==1)"
                + "\n			begin"
                + "\n			out1[30:23]=num11[30:23]-3;"
                + "\n			out1[22:3]=out3[19:0];"
                + "\n			out1[2:0]=0;"
                + "\n			end"
                + "\n			else if(out3[19]==1)"
                + "\n			begin"
                + "\n			out1[30:23]=num11[30:23]-4;"
                + "\n			out1[22:4]=out3[18:0];"
                + "\n			out1[3:0]=0;"
                + "\n			end"
                + "\n			else if(out3[18]==1)"
                + "\n			begin"
                + "\n			out1[30:23]=num11[30:23]-5;"
                + "\n			out1[22:5]=out3[17:0];"
                + "\n			out1[4:0]=0;"
                + "\n			end"
                + "\n			else if(out3[17]==1)"
                + "\n			begin"
                + "\n			out1[30:23]=num11[30:23]-6;"
                + "\n			out1[22:6]=out3[16:0];"
                + "\n			out1[5:0]=0;"
                + "\n			end"
                + "\n			else if(out3[16]==1)"
                + "\n			begin"
                + "\n			out1[30:23]=num11[30:23]-7;"
                + "\n			out1[22:7]=out3[15:0];"
                + "\n			out1[6:0]=0;"
                + "\n			end"
                + "\nend"
                + "\nend"
                + "\nend"
                + "\ndefault: begin"
                + "\nout1=0;"
                + "\nend"
                + "\nendcase"
                + "\nend"
                + "\nendmodule");




    }

    public void generateFloatingMultiplcation(PrintStream p, String device, String givenDecimal1, String givenDecimal2, String s1, String s2) {
        p.println("//Floating Point Arithmetics : Multiplication....\n\n");
        p.println("// Device : " + device);
        p.println("// Generated on : " + date);

        p.println("\n`timescale 1ns / 1ps"
                + "\n"
                + "\nmodule twoipmult(clk,ce,mulout);   "
                + "\ninput clk,ce;"
                + "\nreg [31:0] numin1,numin2; "
                + "\noutput reg [31:0] mulout;"
                + "\nreg [31:0] no,no11,no22,numout3,number,numout1,numout2;"
                + "\nreg [48:0] out;"
                + "\ninteger exp;"
                + "\nfunction [31:0] conv;"
                + "\n// shift to std IEEE 754 format for number"
                + "\ninput [31:0] num;"
                + "\nbegin"
                + "\nno=num;"
                + "\nif (no[31]==1)                          // reverse 2's complemnt"
                + "\nbegin"
                + "\n       no[30:0]=31'h7FFFFFFF-no[30:0];"
                + "\n       no[30:0]=no[30:0]+1;"
                + "\nend"
                + "\nif (no[30:0]<16777215)     // only for fraction part i.e ,<1"
                + "\n       begin"
                + "\n       if(no[23]==1)"
                + "\n       begin"
                + "\n       exp=0;"
                + "\n       no=no<<0;"
                + "\n       end"
                + "\n       else if(no[22]==1)"
                + "\n       begin"
                + "\n       exp=-1;"
                + "\n       no=no<<1;"
                + "\n       end"
                + "\n       else if(no[21]==1)"
                + "\n       begin"
                + "\n       exp=-2;"
                + "\n       no=no<<2;"
                + "\n       end"
                + "\n       else if(no[20]==1)"
                + "\n       begin"
                + "\n       exp=-3;"
                + "\n       no=no<<3;"
                + "\n       end"
                + "\n       else if(no[19]==1)"
                + "\n       begin"
                + "\n       exp=-4;"
                + "\n       no=no<<4;"
                + "\n       end"
                + "\n       else if(no[18]==1)"
                + "\n       begin"
                + "\n       exp=-5;"
                + "\n       no=no<<5;"
                + "\n       end"
                + "\n       else if(no[17]==1)"
                + "\n       begin"
                + "\n       exp=-6;"
                + "\n       no=no<<6;"
                + "\n       end"
                + "\n       else if(no[16]==1)"
                + "\n       begin"
                + "\n       exp=-7;"
                + "\n       no=no<<7;"
                + "\n       end"
                + "\n       else if(no[15]==1)"
                + "\n       begin"
                + "\n       exp=-8;"
                + "\n       no=no<<8;"
                + "\n       end"
                + "\n       else if(no[14]==1)"
                + "\n       begin"
                + "\n       exp=-9;"
                + "\n       no=no<<9;"
                + "\n       end"
                + "\n       else if(no[13]==1)"
                + "\n       begin"
                + "\n       exp=-10;"
                + "\n       no=no<<10;"
                + "\n       end"
                + "\n       else if(no[12]==1)"
                + "\n       begin"
                + "\n       exp=-11;"
                + "\n       no=no<<11;"
                + "\n       end"
                + "\n       else if(no[11]==1)"
                + "\n       begin"
                + "\n       exp=-12;"
                + "\n       no=no<<12;"
                + "\n       end"
                + "\nend"
                + "\nelse if (no>16777214)   // for no >1"
                + "\n       begin"
                + "\n       if (no[30]==1)"
                + "\n       begin"
                + "\n       no[30:0]=no[30:0] >> 7;"
                + "\n       exp=7;"
                + "\n       end"
                + "\n       else if (no[29]==1)"
                + "\n       begin"
                + "\n       no[30:0]=no[30:0] >> 6;"
                + "\n       exp=6;"
                + "\n       end"
                + "\n       else if (no[28]==1)"
                + "\n       begin"
                + "\n       no[30:0]=no[30:0] >> 5;"
                + "\n       exp=5;"
                + "\n       end"
                + "\n       else if (no[27]==1)"
                + "\n       begin"
                + "\n       no[30:0]=no[30:0] >> 4;"
                + "\n       exp=4;"
                + "\n       end"
                + "\n       else if (no[26]==1)"
                + "\n       begin"
                + "\n       no[30:0]=no[30:0] >> 3;"
                + "\n       exp=3;"
                + "\n       end"
                + "\n       else if (no[25]==1)"
                + "\n       begin"
                + "\n       no[30:0]=no[30:0] >> 2;"
                + "\n       exp=2;"
                + "\n       end"
                + "\n       else if (no[24]==1)"
                + "\n       begin"
                + "\n       no[30:0]=no[30:0] >> 1;"
                + "\n       exp=1;"
                + "\n       end"
                + "\n       else if (no[23]==1)"
                + "\n       begin"
                + "\n       no[30:0]=no[30:0] ;"
                + "\n       exp=0;"
                + "\n       end"
                + "\nend"
                + "\n       number[31]=num[31];"
                + "\n       number[30:23]=exp+8'd127;"
                + "\n       number[22:0]=no[22:0];"
                + "\nconv=number;"
                + "\nend"
                + "\nendfunction"
                + "\nfunction [31:0] mul;"
                + "\ninput [31:0] no1,no2;"
                + "\n       begin"
                + "\n       numout1=conv(no1);"
                + "\n       numout2=conv(no2);"
                + "\n       numout3[31]=no1[31]^no2[31];  // signbit for out"
                + "\n       no11[22:0]=numout1[22:0];"
                + "\n       no22[22:0]=numout2[22:0];"
                + "\n       no11[23]=1;        // mantissa multiplication"
                + "\n       no22[23]=1;"
                + "\n       out=no11[23:0]*no22[23:0];"
                + "\n       if (out[47]==1)                // extraction of output mantissa part"
                + "\n       begin"
                + "\n       numout3[22:0]=out[46:24];"
                + "\n       numout3[30:23]=numout1[30:23]+numout2[30:23]-8'd127+1;"
                + "\n       end"
                + "\n       else"
                + "\n       begin"
                + "\n       numout3[22:0]=out[45:23];"
                + "\n       numout3[30:23]=numout1[30:23]+numout2[30:23]-8'd127;"
                + "\n       end"
                + "\n       mul=numout3;"
                + "\nend"
                + "\nendfunction"
                + "\nalways @(posedge clk)"
                + "\nbegin"
                + "\nmulout=mul(32'd" + givenDecimal1 + ",32'd" + givenDecimal2 + "); "
                + "\n//32 bit decimal equivalent of input floating point number " + s1 + " is " + givenDecimal1 + " , " + s2 + " is " + givenDecimal2 + "(1-8-23 FORMAT) \n"
                + "\nend"
                + "\nendmodule");

    }

    public void generateFloatingAddition(PrintStream p, String device, String givenDecimal1, String givenDecimal2, String s1, String s2) {
        p.println("//Floating Point Arithmetics : Addition....\n\n");
        p.println("// Device : " + device);
        p.println("// Generated on : " + date);

        p.println("\n`timescale 1ns / 1ps"
                + "\nmodule prashant(clk,ce,out1);"
                + "\ninput clk,ce;"
                + "\nreg [31:0] num1,num2;"
                + "\noutput reg [31:0] out1;"
                + "\nreg [31:0] no1,temp,ans,num11,num22;"
                + "\nreg [23:0] num10,num20,out10,temp1;"
                + "\nreg [24:0] out3;"
                + "\nreg [7:0] exp1,num12;"
                + "\ninteger k;"
                + "\nfunction [31:0] convert;"
                + "\ninput [31:0] num;"
                + "\nbegin"
                + "\nno1=num;"
                + "\n       if (no1[31]==1)"
                + "\n               begin"
                + "\n               no1[30:0]=32'h7FFFFFFF-no1[30:0];"
                + "\n               no1[30:0]=no1[30:0]+1;"
                + "\n               end"
                + "\nif(no1[30:0]<16777215)     // only for fraction part i.e ,<1"
                + "\n       begin"
                + "\n               if(no1[23]==1)"
                + "\n               begin"
                + "\n               exp1=0;"
                + "\n               no1=no1<<0;"
                + "\n               end"
                + "\n               else if(no1[22]==1)"
                + "\n               begin"
                + "\n               exp1=-1;"
                + "\n               no1=no1<<1;"
                + "\n               end"
                + "\n               else if(no1[21]==1)"
                + "\n               begin"
                + "\n               exp1=-2;"
                + "\n               no1=no1<<2;"
                + "\n               end"
                + "\n               else if(no1[20]==1)"
                + "\n               begin"
                + "\n               exp1=-3;"
                + "\n               no1=no1<<3;"
                + "\n               end"
                + "\n               else if(no1[19]==1)"
                + "\n               begin"
                + "\n               exp1=-4;"
                + "\n               no1=no1<<4;"
                + "\n               end"
                + "\n               else if(no1[18]==1)"
                + "\n               begin"
                + "\n               exp1=-5;"
                + "\n               no1=no1<<5;"
                + "\n               end"
                + "\n               else if(no1[17]==1)"
                + "\n               begin"
                + "\n               exp1=-6;"
                + "\n               no1=no1<<6;"
                + "\n               end"
                + "\n               else if(no1[16]==1)"
                + "\n               begin"
                + "\n               exp1=-7;"
                + "\n               no1=no1<<7;"
                + "\n               end"
                + "\n               else if(no1[15]==1)"
                + "\n               begin"
                + "\n               exp1=-8;"
                + "\n               no1=no1<<8;"
                + "\n               end"
                + "\n               else if(no1[14]==1)"
                + "\n               begin"
                + "\n               exp1=-9;"
                + "\n               no1=no1<<9;"
                + "\n               end"
                + "\n               else if(no1[13]==1)"
                + "\n               begin"
                + "\n               exp1=-10;"
                + "\n               no1=no1<<10;"
                + "\n               end"
                + "\n               else if(no1[12]==1)"
                + "\n               begin"
                + "\n               exp1=-11;"
                + "\n               no1=no1<<11;"
                + "\n               end"
                + "\n               else if(no1[11]==1)"
                + "\n               begin"
                + "\n               exp1=-12;"
                + "\n               no1=no1<<12;"
                + "\n               end"
                + "\n"
                + "\nend"
                + "\nelse if (no1>16777214)   // for no >1"
                + "\n       begin"
                + "\n               if (no1[30]==1)"
                + "\n               begin"
                + "\n               no1[30:0]=no1[30:0] >> 7;"
                + "\n               exp1=7;"
                + "\n               end"
                + "\n               else if (no1[29]==1)"
                + "\n               begin"
                + "\n               no1[30:0]=no1[30:0] >> 6;"
                + "\n               exp1=6;"
                + "\n               end"
                + "\n               else if (no1[28]==1)"
                + "\n               begin"
                + "\n               no1[30:0]=no1[30:0] >> 5;"
                + "\n               exp1=5;"
                + "\n               end"
                + "\n               else if (no1[27]==1)"
                + "\n               begin"
                + "\n               no1[30:0]=no1[30:0] >> 4;"
                + "\n               exp1=4;"
                + "\n               end"
                + "\n               else if (no1[26]==1)"
                + "\n               begin"
                + "\n               no1[30:0]=no1[30:0] >> 3;"
                + "\n               exp1=3;"
                + "\n               end"
                + "\n               else if (no1[25]==1)"
                + "\n               begin"
                + "\n               no1[30:0]=no1[30:0] >> 2;"
                + "\n               exp1=2;"
                + "\n               end"
                + "\n               else if (no1[24]==1)"
                + "\n               begin"
                + "\n               no1[30:0]=no1[30:0] >> 1;"
                + "\n               exp1=1;"
                + "\n               end"
                + "\n               else if (no1[23]==1)"
                + "\n               begin"
                + "\n               no1[30:0]=no1[30:0] ;"
                + "\n               exp1=0;"
                + "\n               end"
                + "\nend"
                + "\nans[31]=no1[31];"
                + "\nans[30:23]=exp1+8'd127;"
                + "\nans[22:0]=no1[22:0];"
                + "\nconvert=ans;"
                + "\nend"
                + "\nendfunction"
                + "\nalways @(posedge clk)"
                + "\nbegin"
                + "\nnum1=32'd" + givenDecimal1 + ";"
                + "\nnum2=32'd" + givenDecimal2 + ";"
                + "\n//32 bit decimal equivalent of input floating point number " + s1 + " is " + givenDecimal1 + " , " + s2 + " is " + givenDecimal2 + "(1-8-23 FORMAT) \n"
                + "\nnum11=convert(num1);"
                + "\nnum22=convert(num2);"
                + "\nif (num11[31]==num22[31])"
                + "\nk=1;"
                + "\nif (num11[31]!==num22[31])"
                + "\nk=2;"
                + "\n"
                + "\ncase(k)"
                + "\n1:begin"
                + "\n"
                + "\nif(num11[30:0]<num22[30:0])"
                + "\n               begin"
                + "\n               temp=num22;"
                + "\n               num22=num11;"
                + "\n               num11=temp;"
                + "\n               end"
                + "\n"
                + "\nif (num11[31]==0 && num22[31]==0)                 //part 1"
                + "\n                       out1[31]=0;"
                + "\nif (num11[31]==1 && num22[31]==1)"
                + "\n                       out1[31]=1;"
                + "\n                       begin"
                + "\n                       num12=num11[30:23]-num22[30:23];"
                + "\n                       num10[23]=1;"
                + "\n                       num10[22:0]=num11[22:0];"
                + "\n                       num20[23]=1;"
                + "\n                       num20[22:0]=num22[22:0];"
                + "\n                       num20=num20>>num12;"
                + "\n                       out3[24:0]=num10+num20;"
                + "\n                       if(out3[24]==1)"
                + "\n                       begin"
                + "\n                       out1[30:23]=num11[30:23]+1;"
                + "\n                       out1[22:0]=out3[23:1];"
                + "\n                       end"
                + "\n                       else"
                + "\n                       begin"
                + "\n                       out1[30:23]=num11[30:23];"
                + "\n                       out1[22:0]=out3[22:0];"
                + "\n                       end"
                + "\n               end"
                + "\nend"
                + "\n"
                + "\n2:begin"
                + "\n"
                + "\nif(num11[30:0]<num22[30:0])"
                + "\n               begin"
                + "\n               temp=num22;"
                + "\n               num22=num11;"
                + "\n               num11=temp;"
                + "\n               end"
                + "\n               begin"
                + "\n                       num12=num11[30:23]-num22[30:23];"
                + "\n                       num10[23]=1;"
                + "\n                       num10[22:0]=num11[22:0];"
                + "\n                       num20[23]=1;"
                + "\n                       num20[22:0]=num22[22:0];"
                + "\n                       num20=num20>>num12;"
                + "\n                       out3[24:0]=num10-num20;"
                + "\n                       out1[31]=num11[31];"
                + "\n                       if(out3[23]==1)"
                + "\n                       begin"
                + "\n                       out1[30:23]=num11[30:23];"
                + "\n                       out1[22:0]=out3[22:0];"
                + "\n                       end"
                + "\n                       else if(out3[22]==1)"
                + "\n                       begin"
                + "\n                       out1[30:23]=num11[30:23]-1;"
                + "\n                       out1[22:1]=out3[21:0];"
                + "\n                       out1[0]=0;"
                + "\n                       end"
                + "\n                       else if(out3[21]==1)"
                + "\n                       begin"
                + "\n                       out1[30:23]=num11[30:23]-2;"
                + "\n                       out1[22:2]=out3[20:0];"
                + "\n                       out1[1:0]=0;"
                + "\n                       end"
                + "\n                       else if(out3[20]==1)"
                + "\n                       begin"
                + "\n                       out1[30:23]=num11[30:23]-3;"
                + "\n                       out1[22:3]=out3[19:0];"
                + "\n                       out1[2:0]=0;"
                + "\n                       end"
                + "\n                       else if(out3[19]==1)"
                + "\n                       begin"
                + "\n                       out1[30:23]=num11[30:23]-4;"
                + "\n                       out1[22:4]=out3[18:0];"
                + "\n                       out1[3:0]=0;"
                + "\n                       end"
                + "\n                       else if(out3[18]==1)"
                + "\n                       begin"
                + "\n                       out1[30:23]=num11[30:23]-5;"
                + "\n                       out1[22:5]=out3[17:0];"
                + "\n                       out1[4:0]=0;"
                + "\n                       end"
                + "\n                       else if(out3[17]==1)"
                + "\n                       begin"
                + "\n                       out1[30:23]=num11[30:23]-6;"
                + "\n                       out1[22:6]=out3[16:0];"
                + "\n                       out1[5:0]=0;"
                + "\n                       end"
                + "\n                       else if(out3[16]==1)"
                + "\n                       begin"
                + "\n                       out1[30:23]=num11[30:23]-7;"
                + "\n                       out1[22:7]=out3[15:0];"
                + "\n                       out1[6:0]=0;"
                + "\n                       end"
                + "\nend"
                + "\nend"
                + "\ndefault: begin"
                + "\nout1=0;"
                + "\nend"
                + "\nendcase"
                + "\nend"
                + "\nendmodule");
    }

    public void generateHalfPrecisionFloatConversion(PrintStream p, String device, long laxt, String givenDecimal) {
        p.println("//Floating Point Conversion : IEEE 754 Half Precision....\n\n");
        p.println("// Device : " + device);
        p.println("// Generated on : " + date);

        p.println(
                "\n`timescale 1ns / 1ps"
                + "\nmodule pra_convert(clk,ce,ans);"
                + "\ninput clk,ce;"
                + "\nreg [15:0] num;"
                + "\noutput reg [15:0] ans;"
                + "\nreg [15:0] inp_p;"
                + "\nreg [9:0] outp;"
                + "\ninteger exponent;"
                + "\n"
                + "\nalways @(posedge clk)"
                + "\nbegin"
                + "\n       num=16'd" + laxt + ";//inp is 16 bit decimal equivalent of input floating point number " + givenDecimal + "(1-5-10 FORMAT)"
                + "\n       inp_p=num;"
                + "\n       if (inp_p[15]==1)"
                + "\n               begin"
                + "\n               inp_p[14:0]=16'h7FFF-inp_p[14:0];"
                + "\n               inp_p[14:0]=inp_p[14:0]+1;"
                + "\n               end"
                + "\n"
                + "\n       if (inp_p>1023)"
                + "\n               begin"
                + "\n       if (inp_p[14]==1)"
                + "\n               begin"
                + "\n               outp=inp_p >> 4;"
                + "\n               exponent=4;"
                + "\n               end"
                + "\n       else if (inp_p[13]==1)"
                + "\n               begin"
                + "\n               outp=inp_p >> 3;"
                + "\n               exponent=3;"
                + "\n               end"
                + "\n       else if (inp_p[12]==1)"
                + "\n               begin"
                + "\n               outp=inp_p >> 2;"
                + "\n               exponent=2;"
                + "\n               end"
                + "\n       else if (inp_p[11]==1)"
                + "\n               begin"
                + "\n               outp=inp_p >> 1;"
                + "\n               exponent=1;"
                + "\n               end"
                + "\n"
                + "\n       else if (inp_p[10]==1)"
                + "\n               begin"
                + "\n               outp=inp_p;"
                + "\n               exponent=0;"
                + "\n               end"
                + "\n       ans[15]=inp_p[15];"
                + "\n       ans[14:10]=exponent+5'd15;"
                + "\n       ans[9:0]=outp;"
                + "\nend"
                + "\n       if (inp_p[14:0]<1024)"
                + "\n               begin"
                + "\n               if (inp_p[9]==1)"
                + "\n               begin"
                + "\n               outp=inp_p << 1;"
                + "\n               exponent=1;"
                + "\n               end"
                + "\n               else if (inp_p[8]==1)"
                + "\n               begin"
                + "\n               outp=inp_p << 2;"
                + "\n               exponent=2;"
                + "\n               end"
                + "\n               else if (inp_p[7]==1)"
                + "\n               begin"
                + "\n               outp=inp_p << 3;"
                + "\n               exponent=3;"
                + "\n               end"
                + "\n               else if (inp_p[6]==1)"
                + "\n               begin"
                + "\n               outp=inp_p << 4;"
                + "\n               exponent=4;"
                + "\n               end"
                + "\n               else if (inp_p[5]==1)"
                + "\n               begin"
                + "\n               outp=inp_p << 5;"
                + "\n               exponent=5;"
                + "\n               end"
                + "\n       ans[15]=inp_p[15];"
                + "\n       ans[14:10]=5'd15-exponent;"
                + "\n       ans[9:0]=outp;"
                + "\nend"
                + "\nend"
                + "\nendmodule");
    }

    public void generateDoublePrecisionFloatConversion(PrintStream p, String device, long laxt, String givenDecimal) {
        p.println("//Floating Point Conversion : IEEE 754 Double Precision....\n\n");
        p.println("// Device : " + device);
        p.println("// Generated on : " + date);

        p.println("\n`timescale 1ns / 1ps"
                + "\nmodule doubleprecision(clk,ce,ans);"
                + "\ninput clk,ce;"
                + "\nreg [63:0] num;"
                + "\noutput reg [63:0] ans;"
                + "\nreg [63:0] inp_p;"
                + "\nreg [52:0] outp;"
                + "\nreg [11:0] exponent;"
                + "\n"
                + "\nalways @(posedge clk)"
                + "\nbegin"
                + "\n       num=64'd" + laxt + ";//inp is 64 bit decimal equivalent of input floating point number " + givenDecimal + "(1-11-52 FORMAT)"
                + "\n       inp_p=num;"
                + "\n       if (inp_p[63]==1)"
                + "\n               begin"
                + "\n               inp_p[62:0]=64'h7FFFFFFFFFFFFFFF-inp_p[62:0];"
                + "\n               inp_p[62:0]=inp_p[62:0]+1;"
                + "\n               end"
                + "\n"
                + "\n       if (inp_p>52'hFFFFFFFFFFFFF)"
                + "\n               begin"
                + "\n       if (inp_p[62]==1)"
                + "\n               begin"
                + "\n               outp=inp_p >> 10;"
                + "\n               exponent=10;"
                + "\n               end"
                + "\n       else if (inp_p[61]==1)"
                + "\n               begin"
                + "\n               outp=inp_p >> 9;"
                + "\n               exponent=9;"
                + "\n               end"
                + "\n       else if (inp_p[60]==1)"
                + "\n               begin"
                + "\n               outp=inp_p >> 8;"
                + "\n               exponent=8;"
                + "\n               end"
                + "\n       else if (inp_p[59]==1)"
                + "\n               begin"
                + "\n               outp=inp_p >> 7;"
                + "\n               exponent=7;"
                + "\n               end"
                + "\n"
                + "\n       else if (inp_p[58]==1)"
                + "\n               begin"
                + "\n               outp=inp_p >> 6;"
                + "\n               exponent=6;"
                + "\n               end"
                + "\n       else if (inp_p[57]==1)"
                + "\n               begin"
                + "\n               outp=inp_p >> 5;"
                + "\n               exponent=5;"
                + "\n               end"
                + "\n       else if (inp_p[56]==1)"
                + "\n               begin"
                + "\n               outp=inp_p >> 4;"
                + "\n               exponent=4;"
                + "\n               end"
                + "\n       else if (inp_p[55]==1)"
                + "\n               begin"
                + "\n               outp=inp_p >> 3;"
                + "\n               exponent=3;"
                + "\n               end"
                + "\n"
                + "\n       else if (inp_p[54]==1)"
                + "\n               begin"
                + "\n               outp=inp_p >> 2;"
                + "\n               exponent=2;"
                + "\n               end"
                + "\n       else if (inp_p[53]==1)"
                + "\n               begin"
                + "\n               outp=inp_p >> 1;"
                + "\n               exponent=1;"
                + "\n               end"
                + "\n"
                + "\n       else if (inp_p[52]==1)"
                + "\n               begin"
                + "\n               outp=inp_p >> 0;"
                + "\n               exponent=0;"
                + "\n               end"
                + "\n       ans[63]=inp_p[63];"
                + "\n       ans[62:52]=exponent+11'd1023;"
                + "\n       ans[51:0]=outp;"
                + "\nend"
                + "\n       if (inp_p[62:0]<53'h10000000000000)"
                + "\n               begin"
                + "\n               if (inp_p[51]==1)"
                + "\n               begin"
                + "\n               outp=inp_p << 1;"
                + "\n               exponent=1;"
                + "\n               end"
                + "\n               else if (inp_p[50]==1)"
                + "\n               begin"
                + "\n               outp=inp_p << 2;"
                + "\n               exponent=2;"
                + "\n               end"
                + "\n               else if (inp_p[49]==1)"
                + "\n               begin"
                + "\n               outp=inp_p << 3;"
                + "\n               exponent=3;"
                + "\n               end"
                + "\n               else if (inp_p[48]==1)"
                + "\n               begin"
                + "\n               outp=inp_p << 4;"
                + "\n               exponent=4;"
                + "\n               end"
                + "\n               else if (inp_p[47]==1)"
                + "\n               begin"
                + "\n               outp=inp_p << 5;"
                + "\n               exponent=5;"
                + "\n               end"
                + "\n               else if (inp_p[46]==1)"
                + "\n               begin"
                + "\n               outp=inp_p << 6;"
                + "\n               exponent=6;"
                + "\n               end"
                + "\n               else if (inp_p[45]==1)"
                + "\n               begin"
                + "\n               outp=inp_p << 7;"
                + "\n               exponent=7;"
                + "\n               end"
                + "\n               else if (inp_p[44]==1)"
                + "\n               begin"
                + "\n               outp=inp_p << 8;"
                + "\n               exponent=8;"
                + "\n               end"
                + "\n               else if (inp_p[43]==1)"
                + "\n               begin"
                + "\n               outp=inp_p << 9;"
                + "\n               exponent=9;"
                + "\n               end"
                + "\n               else if (inp_p[42]==1)"
                + "\n               begin"
                + "\n               outp=inp_p << 10;"
                + "\n               exponent=10;"
                + "\n               end"
                + "\n       ans[63]=inp_p[63];"
                + "\n       ans[62:52]=11'd1023-exponent;"
                + "\n       ans[51:0]=outp;"
                + "\nend"
                + "\nend"
                + "\nendmodule");
    }

    public void generateSinglePrecisionFloatCoversion(PrintStream p, String device, long laxt, String givenDecimal) {
        p.println("//Floating Point Conversion : IEEE 754 Single Precision....\n\n");
        p.println("// Device : " + device);
        p.println("// Generated on : " + date);

        p.println("\nmodule singleprecision(clk,ce,ans);"
                + "\ninput clk,ce;"
                + "\nreg [31:0] num;"
                + "\noutput reg [31:0] ans;"
                + "\nreg [31:0] no1;"
                + "\ninteger signbit1,exp1;"
                + "\nalways @(posedge clk)"
                + "\nbegin"
                + "\nnum=32'd" + laxt + ";//inp is 32 bit decimal equivalent of input floating point number " + givenDecimal + "(1-8-23 FORMAT)"
                + "\nno1=num;"
                + "\n       if (no1[31]==1)"
                + "\n               begin"
                + "\n               no1[30:0]=32'h7FFFFFFF-no1[30:0];"
                + "\n               no1[30:0]=no1[30:0]+1;"
                + "\n               signbit1=1;"
                + "\n               end"
                + "\n       else if (no1[31]==0)"
                + "\n               signbit1=0;"
                + "\nif(no1[30:0]<16777215)     // only for fraction part i.e ,<1"
                + "\n       begin"
                + "\n               if(no1[23]==1)"
                + "\n               begin"
                + "\n               exp1=0;"
                + "\n               no1=no1<<0;"
                + "\n               end"
                + "\n               else if(no1[22]==1)"
                + "\n               begin"
                + "\n               exp1=-1;"
                + "\n               no1=no1<<1;"
                + "\n               end"
                + "\n               else if(no1[21]==1)"
                + "\n               begin"
                + "\n               exp1=-2;"
                + "\n               no1=no1<<2;"
                + "\n               end"
                + "\n               else if(no1[20]==1)"
                + "\n               begin"
                + "\n               exp1=-3;"
                + "\n               no1=no1<<3;"
                + "\n               end"
                + "\n               else if(no1[19]==1)"
                + "\n               begin"
                + "\n               exp1=-4;"
                + "\n               no1=no1<<4;"
                + "\n               end"
                + "\n               else if(no1[18]==1)"
                + "\n               begin"
                + "\n               exp1=-5;"
                + "\n               no1=no1<<5;"
                + "\n               end"
                + "\n               else if(no1[17]==1)"
                + "\n               begin"
                + "\n               exp1=-6;"
                + "\n               no1=no1<<6;"
                + "\n               end"
                + "\n               else if(no1[16]==1)"
                + "\n               begin"
                + "\n               exp1=-7;"
                + "\n               no1=no1<<7;"
                + "\n               end"
                + "\n               else if(no1[15]==1)"
                + "\n               begin"
                + "\n               exp1=-8;"
                + "\n               no1=no1<<8;"
                + "\n               end"
                + "\nend"
                + "\nelse if (no1>16777214)   // for no >1"
                + "\n       begin"
                + "\n               if (no1[30]==1)"
                + "\n               begin"
                + "\n               no1[30:0]=no1[30:0] >> 7;"
                + "\n               exp1=7;"
                + "\n               end"
                + "\n               else if (no1[29]==1)"
                + "\n               begin"
                + "\n               no1[30:0]=no1[30:0] >> 6;"
                + "\n               exp1=6;"
                + "\n               end"
                + "\n               else if (no1[28]==1)"
                + "\n               begin"
                + "\n               no1[30:0]=no1[30:0] >> 5;"
                + "\n               exp1=5;"
                + "\n               end"
                + "\n               else if (no1[27]==1)"
                + "\n               begin"
                + "\n               no1[30:0]=no1[30:0] >> 4;"
                + "\n               exp1=4;"
                + "\n               end"
                + "\n               else if (no1[26]==1)"
                + "\n               begin"
                + "\n               no1[30:0]=no1[30:0] >> 3;"
                + "\n               exp1=3;"
                + "\n               end"
                + "\n               else if (no1[25]==1)"
                + "\n               begin"
                + "\n               no1[30:0]=no1[30:0] >> 2;"
                + "\n               exp1=2;"
                + "\n               end"
                + "\n               else if (no1[24]==1)"
                + "\n               begin"
                + "\n               no1[30:0]=no1[30:0] >> 1;"
                + "\n               exp1=1;"
                + "\n               end"
                + "\n               else if (no1[23]==1)"
                + "\n               begin"
                + "\n               no1[30:0]=no1[30:0] ;"
                + "\n               exp1=0;"
                + "\n               end"
                + "\nend"
                + "\nans[31]=signbit1;"
                + "\nans[30:23]=exp1+8'd127;"
                + "\nans[22:0]=no1[22:0];"
                + "\nend"
                + "\nendmodule");

    }

    public void generateLinearSolverGaussFixPoint(PrintStream p, String device, int[][] equ1, int answer1[], int rank) {
        p.println("//Linear Equation Solver using Gauss-Jordan Elimination Method....\n\n");
        p.println("// Device : " + device);
        p.println("// Generated on : " + date);

        String tmp[][] = new String[equ1[0].length][equ1[0].length];
        String tmp1[] = new String[answer1.length];

        for (int i = 0; i < tmp1.length; i++) {
            for (int j = 0; j < tmp1.length; j++) {
                String temp = Integer.toHexString(equ1[i][j]);
                System.out.println("========******" + temp.length());
                int it = temp.length();
                for (int k = 0; k < 8 - it; k++) {
                    temp = "0" + temp;
                }
                System.out.println("****===**" + temp);
                tmp[i][j] = temp.substring(temp.length() - 2);
            }
            String temp = Integer.toHexString(answer1[i]);
            int it = temp.length();
            for (int k = 0; k < 8 - it; k++) {
                temp = "0" + temp;
            }
            tmp1[i] = temp.substring(temp.length() - 2);
        }
        String rep1 = "";
        int cnt = 1;

        for (int i = 0; i < tmp1.length; i++) {
            for (int j = 0; j < tmp1.length; j++) {
                rep1 += "\nmatrix[" + cnt++ + "]=32'h" + tmp[i][j] + "000000; //" + equ1[i][j];
            }
        }
        rep1 += "\n"
                + "\n///////////unity matrix I ///////////"
                + "\n";
        cnt = 1;
        for (int i = 0; i < tmp1.length; i++) {
            rep1 += "\nmatrix[" + cnt++ + "]=32'h" + tmp1[i] + "000000; //" + answer1[i];
        }


        /*
         *
         * String genmat = ""; //int cnt = 1; cnt = 1; for (int i = 0; i <
         * answer1.length; i++) { for (int j = 0; j < answer1.length; j++) {
         * long laxt = new Calculations().convertToFixPoint(equ1[i][j] + ".0",
         * 23, 8); genmat += "\nmatrix[" + cnt++ + "]=" + equ1[i][j] + ";"; }
         * genmat += "\n"; } genmat += "\n//Unity matrix"; cnt = 1; for (int i =
         * 0; i < answer1.length; i++) { long laxt = new
         * Calculations().convertToFixPoint(answer1[i] + ".0", 23, 8); genmat +=
         * "\nmatrixb[" + cnt++ + "]=" + answer1[i] + ";";
         *
         * genmat += ""; }
         *
         */


        p.println("\n`timescale 1ns / 1ps"
                + "\n"
                + "\nmodule news(clk,ce,matout1,matout2,matout3,matout4);"
                + "\ninput clk,ce;"
                + "\noutput reg [31:0] matout1,matout2,matout3,matout4;"
                + "\nreg [31:0] matrix [9:1];"
                + "\nreg [31:0] matrixb [3:1];"
                + "\nreg [31:0] matrixy [3:1];"
                + "\nreg [23:0] write [400:0];"
                + "\ninteger count,count1,str,ocount,ocount1;"
                + "\nreg [31:0] num2,multa1,multb1,exp1,num4,log1,log2,log3;"
                + "\nreg [31:0] const,rety;"
                + "\ninteger i,j,k,n,rank,lowtrian;"
                + "\nreg [95:0] p1,p2,p3,p4,p5,p6;"
                + "\nreg [31:0] go1,go2,kd,go3;"
                + "\nreg [63:0] pe,pe1,pe2,pe3,pe4;"
                + "\nreg [63:0] ipe1,ipe2,ipe3,ipe4,ipe5;"
                + "\nreg [95:0] element1,element2,element3,element4;"
                + "\nreg [3:0] uut;"
                + "\nreg signbit1,invbit,setb,forbit,signbit2,signbit3;"
                + "\nreg [63:0] ak,aa,al,ay,ab,ah;"
                + "\nreg [31:0] pef1;"
                + "\nreg [95:0] ad,an,as,ao,aw,aj;"
                + "\ninitial"
                + "\nbegin"
                + "\ni=1;"
                + "\ninvbit=0;"
                + "\nj=1;"
                + "\nlowtrian=4;"
                + "\nk=2;"
                + "\nn=3;"
                + "\nuut=0;"
                + "\nrank=1;"
                + "\ncount1=0;"
                + "\nforbit=0;"
                + "\ncount=0;"
                + "\nnum4=1;"
                + "\nsetb=0;"
                + "\nsignbit1=0;"
                + "\n"
                + "\n"
                + "\n"
                + "\n/////////input matrix here//////////"
                + "\n"
                + rep1
                + "\n"
                + "\n//////////Lookup table for log:- resolution of 0.5"
                + "\nwrite[0]=0;"
                + "\nwrite[1]=24'h01D790;"
                + "\nwrite[2]=24'h03ACC9;"
                + "\nwrite[3]=24'h057FB2;"
                + "\nwrite[4]=24'h07504E;"
                + "\nwrite[5]=24'h091EA6;"
                + "\nwrite[6]=24'h0AEABD;"
                + "\nwrite[7]=24'h0CB49A;"
                + "\nwrite[8]=24'h0E7C42;"
                + "\nwrite[9]=24'h1041BA;"
                + "\nwrite[10]=24'h120508;"
                + "\n"
                + "\nwrite[10]=24'h13C632;"
                + "\nwrite[11]=24'h15853C;"
                + "\nwrite[12]=24'h17422B;"
                + "\nwrite[13]=24'h18FD05;"
                + "\nwrite[14]=24'h1AB5CE;"
                + "\nwrite[15]=24'h1C6C8C;"
                + "\nwrite[16]=24'h1E2143;"
                + "\nwrite[17]=24'h1FD3F7;"
                + "\nwrite[18]=24'h2184AF;"
                + "\nwrite[19]=24'h23336E;"
                + "\nwrite[20]=24'h24E039;"
                + "\n"
                + "\nwrite[21]=24'h268B14;"
                + "\nwrite[22]=24'h283404;"
                + "\nwrite[23]=24'h29DB0D;"
                + "\nwrite[24]=24'h2B8034;"
                + "\nwrite[25]=24'h2D237D;"
                + "\nwrite[26]=24'h2EC4EC;"
                + "\nwrite[27]=24'h306485;"
                + "\nwrite[28]=24'h32024C;"
                + "\nwrite[29]=24'h339E46;"
                + "\nwrite[30]=24'h353877;"
                + "\n"
                + "\nwrite[31]=24'h36D0E2;"
                + "\nwrite[32]=24'h38678B;"
                + "\nwrite[33]=24'h39FC76;"
                + "\nwrite[34]=24'h3B8FA7;"
                + "\nwrite[35]=24'h3D2122;"
                + "\nwrite[36]=24'h3EB0EB;"
                + "\nwrite[37]=24'h403F04;"
                + "\nwrite[38]=24'h41CB72;"
                + "\nwrite[39]=24'h43F539;"
                + "\nwrite[40]=24'h44DF5B;"
                + "\n"
                + "\nwrite[41]=24'h4666BC;"
                + "\nwrite[42]=24'h47ECC0;"
                + "\nwrite[43]=24'h49710A;"
                + "\nwrite[44]=24'h4AF3BE;"
                + "\nwrite[45]=24'h4C74BF;"
                + "\nwrite[46]=24'h4D4F6F;"
                + "\nwrite[47]=24'h4F7273;"
                + "\nwrite[48]=24'h50EEED;"
                + "\nwrite[49]=24'h5269E1;"
                + "\nwrite[50]=24'h53E351;"
                + "\n"
                + "\nwrite[51]=24'h555B42;"
                + "\nwrite[52]=24'h56D1B5;"
                + "\nwrite[53]=24'h5846AE;"
                + "\nwrite[54]=24'h59BA30;"
                + "\nwrite[55]=24'h5B2C3D;"
                + "\nwrite[56]=24'h5C9CD9;"
                + "\nwrite[57]=24'h5E0C07;"
                + "\nwrite[58]=24'h5F79C9;"
                + "\nwrite[59]=24'h60E623;"
                + "\nwrite[60]=24'h625116;"
                + "\n"
                + "\nwrite[61]=24'h63BAA6;"
                + "\nwrite[62]=24'h6522D5;"
                + "\nwrite[63]=24'h6689A7;"
                + "\nwrite[64]=24'h67EF1D;"
                + "\nwrite[65]=24'h69533A;"
                + "\nwrite[66]=24'h6AB602;"
                + "\nwrite[67]=24'h6C1776;"
                + "\nwrite[68]=24'h6D7799;"
                + "\nwrite[69]=24'h6ED66D;"
                + "\nwrite[70]=24'h7033F5;"
                + "\n"
                + "\nwrite[71]=24'h719034;"
                + "\nwrite[72]=24'h72EB2C;"
                + "\nwrite[73]=24'h7444DF;"
                + "\nwrite[74]=24'h759D4F;"
                + "\nwrite[75]=24'h76F47F;"
                + "\nwrite[76]=24'h784A72;"
                + "\nwrite[77]=24'h799F29;"
                + "\nwrite[78]=24'h7AF2A7;"
                + "\nwrite[79]=24'h7C44EE;"
                + "\nwrite[80]=24'h7D9601;"
                + "\n"
                + "\nwrite[81]=24'h7EE5E0;"
                + "\nwrite[82]=24'h803490;"
                + "\nwrite[83]=24'h818211;"
                + "\nwrite[84]=24'h82CE66;"
                + "\nwrite[85]=24'h841991;"
                + "\nwrite[86]=24'h856394;"
                + "\nwrite[87]=24'h86AC72;"
                + "\nwrite[88]=24'h87F42B;"
                + "\nwrite[89]=24'h893AC3;"
                + "\nwrite[90]=24'h8A803B;"
                + "\n"
                + "\nwrite[91]=24'h8BC495;"
                + "\nwrite[92]=24'h8D07D3;"
                + "\nwrite[93]=24'h8E49F7;"
                + "\nwrite[94]=24'h8F8B03;"
                + "\nwrite[95]=24'h90CAF9;"
                + "\nwrite[96]=24'h9209DB;"
                + "\nwrite[97]=24'h9347AB;"
                + "\nwrite[98]=24'h94846A;"
                + "\nwrite[99]=24'h95C01A;"
                + "\nwrite[100]=24'h96FABD;"
                + "\n"
                + "\nwrite[101]=24'h983455;"
                + "\nwrite[102]=24'h996CE4;"
                + "\nwrite[103]=24'h9AA46B;"
                + "\nwrite[104]=24'h9BDAEC;"
                + "\nwrite[105]=24'h9D1069;"
                + "\nwrite[106]=24'h9E44E3;"
                + "\nwrite[107]=24'h9F78FD;"
                + "\nwrite[108]=24'hA0AAD7;"
                + "\nwrite[109]=24'hA1DC54;"
                + "\nwrite[110]=24'hA30CD5;"
                + "\n"
                + "\nwrite[111]=24'hA43C5C;"
                + "\nwrite[112]=24'hA56AEA;"
                + "\nwrite[113]=24'hA69881;"
                + "\nwrite[114]=24'hA7C523;"
                + "\nwrite[115]=24'hA8F0D0;"
                + "\nwrite[116]=24'hAA1B8C;"
                + "\nwrite[117]=24'hAB4556;"
                + "\nwrite[118]=24'hAC6E31;"
                + "\nwrite[119]=24'hAD961E;"
                + "\nwrite[120]=24'hAEBD1F;"
                + "\n"
                + "\n"
                + "\nwrite[121]=24'hAFE335;"
                + "\nwrite[122]=24'hB10862;"
                + "\nwrite[123]=24'hB22CA6;"
                + "\nwrite[124]=24'hB35004;"
                + "\nwrite[125]=24'hB4727D;"
                + "\nwrite[126]=24'hB59412;"
                + "\nwrite[127]=24'hB6D4C4;"
                + "\nwrite[128]=24'hB7D496;"
                + "\nwrite[129]=24'hB8F388;"
                + "\nwrite[130]=24'hBA119C;"
                + "\n"
                + "\nwrite[131]=24'hBB2ED3;"
                + "\nwrite[132]=24'hBC4B2E;"
                + "\nwrite[133]=24'hBD66AF;"
                + "\nwrite[134]=24'hBE8157;"
                + "\nwrite[135]=24'hBF9B27;"
                + "\nwrite[136]=24'hC0B421;"
                + "\nwrite[137]=24'hC1CC46;"
                + "\nwrite[138]=24'hC2E397;"
                + "\nwrite[139]=24'hC3FA15;"
                + "\nwrite[140]=24'hC50FC2;"
                + "\n"
                + "\n"
                + "\nwrite[141]=24'hC6249F;"
                + "\nwrite[142]=24'hC738AD;"
                + "\nwrite[143]=24'hC84BED;"
                + "\nwrite[144]=24'hC95E61;"
                + "\nwrite[145]=24'hCA7009;"
                + "\nwrite[146]=24'hCB80E7;"
                + "\nwrite[147]=24'hCC90FC;"
                + "\nwrite[148]=24'hCDA049;"
                + "\nwrite[149]=24'hCEAECF;"
                + "\nwrite[150]=24'hCFBC90;"
                + "\n"
                + "\nwrite[151]=24'hD0C98D;"
                + "\nwrite[152]=24'hD1D5C6;"
                + "\nwrite[153]=24'hD2E13C;"
                + "\nwrite[154]=24'hD3EBF2;"
                + "\nwrite[155]=24'hD4F5E8;"
                + "\nwrite[156]=24'hD5FF1E;"
                + "\nwrite[157]=24'hD70797;"
                + "\nwrite[158]=24'hD80F53;"
                + "\nwrite[159]=24'hD91653;"
                + "\nwrite[160]=24'hDA1C98;"
                + "\n"
                + "\nwrite[161]=24'hDB2224;"
                + "\nwrite[162]=24'hDC6F6D;"
                + "\nwrite[163]=24'hDD2B11;"
                + "\nwrite[164]=24'hDE2E76;"
                + "\nwrite[165]=24'hDF3125;"
                + "\nwrite[166]=24'hE0331F;"
                + "\nwrite[167]=24'hE13465;"
                + "\nwrite[168]=24'hE24F94;"
                + "\nwrite[169]=24'hE334DB;"
                + "\nwrite[170]=24'hE4340C;"
                + "\n"
                + "\nwrite[171]=24'hE5328D;"
                + "\nwrite[172]=24'hE6305F;"
                + "\nwrite[173]=24'hE72D84;"
                + "\nwrite[174]=24'hE829FB;"
                + "\nwrite[175]=24'hE925C6;"
                + "\nwrite[176]=24'hEA20E6;"
                + "\nwrite[177]=24'hEB1B5C;"
                + "\nwrite[178]=24'hEC1528;"
                + "\nwrite[179]=24'hED0E4C;"
                + "\nwrite[180]=24'hEE06C8;"
                + "\n"
                + "\n"
                + "\nwrite[181]=24'hEEFE9D;"
                + "\nwrite[182]=24'hEFF5CD;"
                + "\nwrite[183]=24'hF0EC57;"
                + "\nwrite[184]=24'hF1E23E;"
                + "\nwrite[185]=24'hF2D781;"
                + "\nwrite[186]=24'hF3CC21;"
                + "\nwrite[187]=24'hF4C020;"
                + "\nwrite[188]=24'hF5B37F;"
                + "\nwrite[189]=24'hF6A63D;"
                + "\nwrite[190]=24'hF7985C;"
                + "\n"
                + "\nwrite[191]=24'hF889DD;"
                + "\nwrite[192]=24'hF97AC0;"
                + "\nwrite[193]=24'hFA6B07;"
                + "\nwrite[194]=24'hFB5AB2;"
                + "\nwrite[195]=24'hFC49C1;"
                + "\nwrite[196]=24'hFD3836;"
                + "\nwrite[197]=24'hFE2612;"
                + "\nwrite[198]=24'hFF1355;"
                + "\n /////////Lookup table for antilog : resolution of 0.5////////"
                + "\nwrite[199]=24'h00E386;"
                + "\nwrite[200]=24'h01C7DE;"
                + "\nwrite[201]=24'h02ACF2;"
                + "\nwrite[202]=24'h038EF3;"
                + "\nwrite[203]=24'h04798c;"
                + "\nwrite[204]=24'h05610C;"
                + "\nwrite[205]=24'h06495B;"
                + "\nwrite[206]=24'h073277;"
                + "\nwrite[207]=24'h081c63;"
                + "\nwrite[208]=24'h09071F;"
                + "\nwrite[209]=24'h0ADF09;"
                + "\nwrite[210]=24'h0BCC38;"
                + "\n"
                + "\nwrite[211]=24'h0CBA3B;"
                + "\nwrite[212]=24'h0DA911;"
                + "\nwrite[213]=24'h0E98BB;"
                + "\nwrite[214]=24'h0F893B;"
                + "\nwrite[215]=24'h107A90;"
                + "\nwrite[216]=24'h11B613;"
                + "\nwrite[217]=24'h125FBE;"
                + "\nwrite[218]=24'h135399;"
                + "\nwrite[219]=24'h14484D;"
                + "\nwrite[220]=24'h153DDA;"
                + "\n"
                + "\nwrite[221]=24'h163441;"
                + "\nwrite[222]=24'h172B83;"
                + "\nwrite[223]=24'h1823A1;"
                + "\nwrite[224]=24'h191C95;"
                + "\nwrite[225]=24'h1A1674;"
                + "\nwrite[226]=24'h1B112A;"
                + "\nwrite[227]=24'h1C0CBE;"
                + "\nwrite[228]=24'h1D0932;"
                + "\nwrite[229]=24'h1E0687;"
                + "\nwrite[230]=24'h1F04BD;"
                + "\n"
                + "\nwrite[231]=24'h2003D5;"
                + "\nwrite[232]=24'h2103CF;"
                + "\nwrite[233]=24'h2204AD;"
                + "\nwrite[234]=24'h23066F;"
                + "\nwrite[235]=24'h240917;"
                + "\nwrite[236]=24'h250CA4;"
                + "\nwrite[237]=24'h261118;"
                + "\nwrite[238]=24'h271673;"
                + "\nwrite[239]=24'h281CD7;"
                + "\nwrite[240]=24'h2923E4;"
                + "\n"
                + "\nwrite[241]=24'h2A2BFA;"
                + "\nwrite[242]=24'h2B34FC;"
                + "\nwrite[243]=24'h2C3EE9;"
                + "\nwrite[244]=24'h2D49C2;"
                + "\nwrite[245]=24'h2E5588;"
                + "\nwrite[246]=24'h2F623D;"
                + "\nwrite[247]=24'h306FE0;"
                + "\nwrite[248]=24'h317E73;"
                + "\nwrite[249]=24'h328DF6;"
                + "\nwrite[250]=24'h339E6B;"
                + "\n"
                + "\nwrite[251]=24'h34AFD2;"
                + "\nwrite[252]=24'h35C2C3;"
                + "\nwrite[253]=24'h36D579;"
                + "\nwrite[254]=24'h37E9BC;"
                + "\nwrite[255]=24'h38FEF4;"
                + "\nwrite[256]=24'h3A1522;"
                + "\nwrite[257]=24'h3B2C47;"
                + "\nwrite[258]=24'h3C4465;"
                + "\nwrite[259]=24'h3D5D7D;"
                + "\nwrite[260]=24'h3E778C;"
                + "\n"
                + "\nwrite[261]=24'h3F9297;"
                + "\nwrite[262]=24'h40AE9D;"
                + "\nwrite[263]=24'h41CBA0;"
                + "\nwrite[264]=24'h42E9A1;"
                + "\nwrite[265]=24'h44089F;"
                + "\nwrite[266]=24'h45289D;"
                + "\nwrite[267]=24'h46499A;"
                + "\nwrite[268]=24'h476B99;"
                + "\nwrite[269]=24'h488E99;"
                + "\nwrite[270]=24'h49B29C;"
                + "\n"
                + "\nwrite[271]=24'h4AD7A2;"
                + "\nwrite[272]=24'h4BFDAD;"
                + "\nwrite[273]=24'h4D24D8;"
                + "\nwrite[274]=24'h4E4CD3;"
                + "\nwrite[275]=24'h4F75F1;"
                + "\nwrite[276]=24'h50A016;"
                + "\nwrite[277]=24'h51CE45;"
                + "\nwrite[278]=24'h52F77D;"
                + "\nwrite[279]=24'h5424C0;"
                + "\nwrite[280]=24'h55530F;"
                + "\n"
                + "\nwrite[281]=24'h56826B;"
                + "\nwrite[282]=24'h57B2D4;"
                + "\nwrite[283]=24'h58E44C;"
                + "\nwrite[284]=24'h5A16D4;"
                + "\nwrite[285]=24'h5B4A6B;"
                + "\nwrite[286]=24'h5C7F14;"
                + "\nwrite[287]=24'h5DB4D0;"
                + "\nwrite[288]=24'h5EEB9F;"
                + "\nwrite[289]=24'h602382;"
                + "\nwrite[290]=24'h615C7A;"
                + "\n"
                + "\nwrite[291]=24'h629688;"
                + "\nwrite[292]=24'h63D1AE;"
                + "\nwrite[293]=24'h650DEB;"
                + "\nwrite[294]=24'h664B42;"
                + "\nwrite[295]=24'h6789B3;"
                + "\nwrite[296]=24'h68C93E;"
                + "\nwrite[297]=24'h6A09E6;"
                + "\nwrite[298]=24'h6BC93E;"
                + "\nwrite[299]=24'h6C8E8D;"
                + "\nwrite[300]=24'h6DD228;"
                + "\n"
                + "\nwrite[301]=24'h6F17B0;"
                + "\nwrite[302]=24'h705DF3;"
                + "\nwrite[303]=24'h71A558;"
                + "\nwrite[304]=24'h72EDDF;"
                + "\nwrite[305]=24'h74378A;"
                + "\nwrite[306]=24'h75825B;"
                + "\nwrite[307]=24'h76CE51;"
                + "\nwrite[308]=24'h781B6F;"
                + "\nwrite[309]=24'h7969B5;"
                + "\nwrite[310]=24'h7AB923;"
                + "\n"
                + "\nwrite[311]=24'h7C09BC;"
                + "\nwrite[312]=24'h7D5B80;"
                + "\nwrite[313]=24'h7EAE70;"
                + "\nwrite[314]=24'h80028E;"
                + "\nwrite[315]=24'h8157D9;"
                + "\nwrite[316]=24'h82AE54;"
                + "\nwrite[317]=24'h840600;"
                + "\nwrite[318]=24'h855EDD;"
                + "\nwrite[319]=24'h86B8EC;"
                + "\nwrite[320]=24'h88142F;"
                + "\n"
                + "\nwrite[321]=24'h8970A6;"
                + "\nwrite[322]=24'h8ACE54;"
                + "\nwrite[323]=24'h8C2D38;"
                + "\nwrite[324]=24'h8D8D54;"
                + "\nwrite[325]=24'h8EEEA8;"
                + "\nwrite[326]=24'h905137;"
                + "\nwrite[327]=24'h91B501;"
                + "\nwrite[328]=24'h931A07;"
                + "\nwrite[329]=24'h94804B;"
                + "\n"
                + "\nwrite[330]=24'h95E7CD;"
                + "\nwrite[331]=24'h97508E;"
                + "\nwrite[332]=24'h98BA90;"
                + "\nwrite[333]=24'h9A25D4;"
                + "\nwrite[334]=24'h9B925B;"
                + "\nwrite[335]=24'h9D0026;"
                + "\nwrite[336]=24'h9E6F35;"
                + "\nwrite[337]=24'h9FDF8B;"
                + "\nwrite[338]=24'hA15129;"
                + "\nwrite[339]=24'hA2C40F;"
                + "\nwrite[340]=24'hA4383E;"
                + "\n"
                + "\nwrite[341]=24'hA5ADB8;"
                + "\nwrite[342]=24'hA7247E;"
                + "\nwrite[343]=24'hA89C92;"
                + "\nwrite[344]=24'hAA15F3;"
                + "\nwrite[345]=24'hAB90A4;"
                + "\nwrite[346]=24'hAD0CA6;"
                + "\nwrite[347]=24'hAE89F9;"
                + "\nwrite[348]=24'hB0089F;"
                + "\nwrite[349]=24'hB18898;"
                + "\nwrite[350]=24'hB309E9;"
                + "\n"
                + "\nwrite[351]=24'hB48C8F;"
                + "\nwrite[352]=24'hB6108D;"
                + "\nwrite[353]=24'hB795A3;"
                + "\nwrite[354]=24'hB91C94;"
                + "\nwrite[355]=24'hBAA49F;"
                + "\nwrite[356]=24'hBC2E07;"
                + "\nwrite[357]=24'hBDB8CD;"
                + "\nwrite[358]=24'hBF44F2;"
                + "\nwrite[359]=24'hC0D277;"
                + "\nwrite[360]=24'hC2615D;"
                + "\n"
                + "\nwrite[361]=24'hC3F1A5;"
                + "\nwrite[362]=24'hC58351;"
                + "\nwrite[363]=24'hC71663;"
                + "\nwrite[364]=24'hC8AADA;"
                + "\nwrite[365]=24'hCA40B9;"
                + "\nwrite[366]=24'hCBD801;"
                + "\nwrite[367]=24'hCD70B3;"
                + "\nwrite[368]=24'hCF0AD0;"
                + "\nwrite[369]=24'hD0A659;"
                + "\nwrite[370]=24'hD24351;"
                + "\n"
                + "\nwrite[371]=24'hD3E1B7;"
                + "\nwrite[372]=24'hD5818D;"
                + "\nwrite[373]=24'hD722D5;"
                + "\nwrite[374]=24'hD8C590;"
                + "\nwrite[375]=24'hDA69C0;"
                + "\nwrite[376]=24'hDC0F64;"
                + "\nwrite[377]=24'hDDB680;"
                + "\nwrite[378]=24'hDF5F13;"
                + "\nwrite[379]=24'hE10920;"
                + "\nwrite[380]=24'hE2B4A7;"
                + "\n"
                + "\nwrite[381]=24'hE461AA;"
                + "\nwrite[382]=24'hE6102B;"
                + "\nwrite[383]=24'hE7C02A;"
                + "\nwrite[384]=24'hE971AA;"
                + "\nwrite[385]=24'hEB24AA;"
                + "\nwrite[386]=24'hECD92D;"
                + "\nwrite[387]=24'hEE8F34;"
                + "\nwrite[388]=24'hF046C1;"
                + "\nwrite[389]=24'hF1FFD4;"
                + "\nwrite[390]=24'hF3BA6F;"
                + "\n"
                + "\nwrite[391]=24'hF57693;"
                + "\nwrite[392]=24'hF73442;"
                + "\nwrite[393]=24'hF8F37E;"
                + "\nwrite[394]=24'hFAB446;"
                + "\nwrite[395]=24'hFC769E;"
                + "\nwrite[396]=24'hFE3A86;"
                + "\n////////////end of Look-up Table/////////"
                + "\n"
                + "\nend"
                + "\n"
                + "\n"
                + "\n/////////////function to calculate 1/number///////////"
                + "\nfunction [31:0] oneby;"
                + "\ninput [31:0] numberin;//input number"
                + "\nbegin"
                + "\nsignbit1=0;//flag to check sign of log"
                + "\nnum2=numberin;"
                + "\nif(num2<16777215)"
                + "\nbegin"
                + "\n//////////////////////calculate integer part of log////////////"
                + "\n		signbit1=1;"
                + "\n		if(num2[23]==1)"
                + "\n		begin"
                + "\n		ocount=0;"
                + "\n		num2=num2<<1;"
                + "\n		end"
                + "\n		"
                + "\n		else if(num2[22]==1)"
                + "\n		begin"
                + "\n		ocount=1;"
                + "\n		num2=num2<<2;"
                + "\n		end"
                + "\n		"
                + "\n		else if(num2[21]==1)"
                + "\n		begin"
                + "\n		ocount=2;"
                + "\n		num2=num2<<3;"
                + "\n		end"
                + "\n		"
                + "\n		else if(num2[20]==1)"
                + "\n		begin"
                + "\n		ocount=3;"
                + "\n		num2=num2<<4;"
                + "\n		end"
                + "\n		"
                + "\n		else if(num2[19]==1)"
                + "\n		begin"
                + "\n		ocount=4;"
                + "\n		num2=num2<<5;"
                + "\n		end"
                + "\n		"
                + "\n		else if(num2[18]==1)"
                + "\n		begin"
                + "\n		ocount=5;"
                + "\n		num2=num2<<6;"
                + "\n		end"
                + "\n		"
                + "\n		else if(num2[17]==1)"
                + "\n		begin"
                + "\n		ocount=6;"
                + "\n		num2=num2<<7;"
                + "\n		end"
                + "\n"
                + "\nend"
                + "\nif(num2>33554432)"
                + "\n	begin"
                + "\n			if(num2[30]==1)"
                + "\n			begin"
                + "\n			num2=num2>>6;"
                + "\n			ocount=6;"
                + "\n			end"
                + "\n"
                + "\n			else if(num2[29]==1)"
                + "\n			begin"
                + "\n			num2=num2>>5;"
                + "\n			ocount=5;"
                + "\n			end"
                + "\n"
                + "\n			else if(num2[28]==1)"
                + "\n			begin"
                + "\n			num2=num2>>4;"
                + "\n			ocount=4;"
                + "\n			end"
                + "\n"
                + "\n			else if(num2[27]==1)"
                + "\n			begin"
                + "\n			num2=num2>>3;"
                + "\n			ocount=3;"
                + "\n			end"
                + "\n"
                + "\n			else if(num2[26]==1)"
                + "\n			begin"
                + "\n			num2=num2>>2;"
                + "\n			ocount=2;"
                + "\n			end"
                + "\n"
                + "\n			else if(num2[25]==1)"
                + "\n			begin"
                + "\n			num2=num2>>1;"
                + "\n			ocount=1;"
                + "\n			end"
                + "\n		"
                + "\n			else"
                + "\n			ocount=0;"
                + "\n	end"
                + "\n	"
                + "\nif((num2<=33554432)&&(num2>=16777216))"
                + "\n	begin"
                + "\n			"
                + "\n			p1=(num2*num2*5657277)>>48;"
                + "\n			p2=(num2*33487323)>>24;"
                + "\n			p3=27682407;"
                + "\n			num2=p2-p1-p3;"
                + "\n			if(num2[31]==1)"
                + "\n			num2=~num2;"
                + "\n			num2=(num2*200)>>24;"
                + "\n			exp1=write[(num2-2)];"
                + "\n	end"
                + "\n		num4=1;"
                + "\n		if(ocount>0)"
                + "\n		num4=(num4<<ocount);"
                + "\n		"
                + "\n		p4=(exp1*exp1*5774717)>>48;"
                + "\n		p5=(44022867*exp1)>>24;"
                + "\n		p6=16817287;"
                + "\n		exp1=p5-p4-p6;"
                + "\n		if(exp1[31]==1)"
                + "\n		exp1=~exp1;"
                + "\n		exp1=(exp1*200)>>24;"
                + "\n		exp1=199+exp1;"
                + "\n		multa1=write[exp1];"
                + "\n		if(signbit1==1)"
                + "\n		multa1[24]=1;"
                + "\n		"
                + "\n		multb1=multa1*num4;"
                + "\n		"
                + "\n		if(signbit1==0)"
                + "\n		begin"
                + "\n		if(ocount>0)"
                + "\n		multb1=multb1>>(ocount+ocount);"
                + "\n		end"
                + "\n		oneby=multb1;"
                + "\n		"
                + "\nend"
                + "\nendfunction"
                + "\n/////////end of function/////////////"
                + "\n"
                + "\n"
                + "\nalways @(posedge clk)"
                + "\nbegin"
                + "\nif(forbit==0)"
                + "\nbegin"
                + "\nif(i==1)"
                + "\nbegin"
                + "\npef1=matrix[rank];"
                + "\nif(pef1>32'h08000000)"
                + "\npef1=~pef1;"
                + "\nrety=oneby(pef1);"
                + "\npe=(rety*matrix[rank+n])>>24;"
                + "\nmatout1=pe;"
                + "\nend"
                + "\n"
                + "\n"
                + "\npe2=(pe*matrix[rank+1])>>24;"
                + "\nmatrix[rank+(i*n)+1]=matrix[rank+(i*n)+1]-pe2;"
                + "\nmatout2=matrix[rank+(i*n)+1];"
                + "\n"
                + "\npe3=(pe*matrix[rank+2])>>24;"
                + "\nmatrix[rank+(i*n)+2]=matrix[rank+(i*n)+2]-pe3;"
                + "\nmatout3=matrix[rank+(i*n)+2];"
                + "\n"
                + "\npe4=(pe*matrixb[j])>>24;"
                + "\nmatrixb[j+1]=matrixb[j+1]-pe3;"
                + "\nmatout4=matrixb[j+1];"
                + "\nkd=matrixb[2];"
                + "\n"
                + "\n///////////control logic///////////"
                + "\ni=i+1;"
                + "\nj=j+1;"
                + "\nif(i>k)"
                + "\nbegin"
                + "\ni=1;"
                + "\nrank=rank+4;"
                + "\nj=2;"
                + "\nif(rank==9)"
                + "\nbegin"
                + "\nrank=1;"
                + "\nforbit=1;"
                + "\nend"
                + "\n"
                + "\nk=k-1;"
                + "\n"
                + "\nif(j==n)"
                + "\nj=1;"
                + "\nend"
                + "\nend"
                + "\n"
                + "\n"
                + "\nif(forbit==1)"
                + "\nbegin"
                + "\nmatrix[9]=~matrix[9];"
                + "\ngo1=oneby(matrix[9]);"
                + "\nipe1=(go1*matrixb[3])>>24;"
                + "\nmatout1=ipe1;"
                + "\n"
                + "\ngo2=oneby(matrix[5]);"
                + "\nkd=~kd;"
                + "\nipe2=(matout1*matrix[6])>>24;"
                + "\nipe3=(go2*(ipe2[31:0]-kd))>>25;"
                + "\nmatout2=ipe3;"
                + "\n"
                + "\nmatrix[1]=~matrix[1];"
                + "\nmatrix[3]=~matrix[3];"
                + "\ngo3=oneby(matrix[1]);"
                + "\nipe4=(matout2*matrix[2]-matout1*matrix[3])>>24;"
                + "\nipe5=(go3*(matrixb[1]+ipe4[31:0]))>>24;"
                + "\nmatout3=ipe5;"
                + "\nmatout3=~matout3;"
                + "\n"
                + "\nmatout4=ipe4;"
                + "\nend"
                + "\n"
                + "\n"
                + "\nend"
                + "\n"
                + "\nendmodule");



    }

    public void generateLinearSolverLUFactorizationFixPoint(PrintStream p, String device, int[][] equ1, int answer1[], int rank) {
        p.println("//Linear Equation Solver using LU Factorization Method....\n\n");
        p.println("// Device : " + device);
        p.println("// Generated on : " + date);

    }

    public void generateLinearSolverGaussFloatingPoint(PrintStream p, String device, double[][] equ2, double answer2[], int rank) {
        p.println("//Linear Equation Solver using Gauss-Jordan Elimination Method....\n\n");
        p.println("// Device : " + device);
        p.println("// Generated on : " + date);

    }

    public void generateLinearSolverLUFactorizationFloatingPoint(PrintStream p, String device, double[][] equ2, double answer2[], int rank) {
        p.println("//Linear Equation Solver using LU Factorization Method....\n\n");
        p.println("// Device : " + device);
        p.println("// Generated on : " + date);

    }

    public void generateHelloWorld(PrintStream p, String device, String msg) {

        p.println("//Hello World Program....\n\n");
        p.println("// Device : " + device);
        p.println("// Generated on : " + date);
        p.println("\nmodule Hello_World;"
                + "\ninitial begin"
                + "\n$display(\""
                + msg
                + "\");"
                + "\n#10 $finish;"
                + "\nend "
                + "\nendmodule");

    }

    public void generateAsyncDFlipFlop(PrintStream p, String device, boolean checked, String data) {
        String lax = "";
        if (!checked) {
            lax = "~";
        }
        p.println("//Asynchronous reset D- Flip Flop...\n\n");
        p.println("// Device : " + device);
        p.println("// Generated on : " + date);

        p.println("module dff_async(clk,reset,q);"
                + "\n //-----------Input Ports---------------"
                + "\ninput clk, reset ; "
                + ""
                + "\n //-----------Output Ports---------------"
                + "\noutput [" + (data.length() - 1) + ":0] q;"
                + "\nreg [" + (data.length() - 1) + ":0] data;"
                + "\n//------------Internal Variables--------"
                + "\n reg [" + (data.length() - 1) + ":0] q;"
                + "\ninitial"
                + "\nbegin"
                + "\ndata=" + data.length() + "'b" + data + ";"
                + "\nend"
                + "\n//-------------Code Starts Here---------"
                + "\nalways @ ( posedge clk or negedge reset)"
                + "\nif (" + lax + "reset) begin"
                + "\nq <= 1'b0;"
                + "\nend  else begin"
                + "\nq <= data;"
                + "\nend"
                + "\nendmodule //End Of Module dff_async_reset");
    }

    public void generateSyncDFlipFlop(PrintStream p, String device, boolean checked, String data) {
        String lax = "";
        if (!checked) {
            lax = "~";
        }
        p.println("//Synchronous reset D- Flip Flop...\n\n");
        p.println("// Device : " + device);
        p.println("// Generated on : " + date);

        p.println("module dff_async(clk,reset,q);"
                + "\n //-----------Input Ports---------------"
                + "\ninput clk, reset ; "
                + ""
                + "\n //-----------Output Ports---------------"
                + "\noutput [" + (data.length() - 1) + ":0] q;"
                + "\nreg [" + (data.length() - 1) + ":0] data;"
                + "\n//------------Internal Variables--------"
                + "\n reg [" + (data.length() - 1) + ":0] q;"
                + "\ninitial"
                + "\nbegin"
                + "\ndata=" + data.length() + "'b" + data + ";"
                + "\nend"
                + "\n//-------------Code Starts Here---------"
                + "\nalways @ ( posedge clk)"
                + "\nif (" + lax + "reset) begin"
                + "\nq <= 1'b0;"
                + "\nend  else begin"
                + "\nq <= data;"
                + "\nend"
                + "\nendmodule //End Of Module dff_async_reset");
    }

    public void generateAsyncTFlipFlop(PrintStream p, String device, boolean checked, String data) {
        System.out.println("Coming here asynct.....................");
        String lax = "";
        if (!checked) {
            lax = "~";
        }
        p.println("//Asynchronous reset T- Flip Flop...\n");
        p.println("// Device : " + device);
        p.println("// Generated on : " + date);
        p.println("module dff_async(clk,reset,q);"
                + "\n //-----------Input Ports---------------"
                + "\ninput clk, reset ; "
                + ""
                + "\n //-----------Output Ports---------------"
                + "\noutput [" + (data.length() - 1) + ":0] q;"
                + "\nreg [" + (data.length() - 1) + ":0] data;"
                + "\n//------------Internal Variables--------"
                + "\n reg [" + (data.length() - 1) + ":0] q;"
                + "\ninitial"
                + "\nbegin"
                + "\ndata=" + data.length() + "'b" + data + ";"
                + "\nend"
                + "\n//-------------Code Starts Here---------"
                + "\nalways @ ( posedge clk or negedge reset)"
                + "\nif (" + lax + "reset) begin"
                + "\nq <= 1'b0;"
                + "\nend  else if (data) begin"
                + "\nq <= ~data;"
                + "\nend"
                + "\nendmodule //End Of Module dff_async_reset");
    }

    public void generateSyncTFlipFlop(PrintStream p, String device, boolean checked, String data) {
        System.out.println("Coming here synct.....................");
        String lax = "";
        if (!checked) {
            lax = "~";
        }
        p.println("//Synchronous reset T- Flip Flop...\n");
        p.println("// Device : " + device);
        p.println("// Generated on : " + date);
        p.println("module dff_async(clk,reset,q);"
                + "\n //-----------Input Ports---------------"
                + "\ninput clk, reset ; "
                + ""
                + "\n //-----------Output Ports---------------"
                + "\noutput [" + (data.length() - 1) + ":0] q;"
                + "\nreg [" + (data.length() - 1) + ":0] data;"
                + "\n//------------Internal Variables--------"
                + "\n reg [" + (data.length() - 1) + ":0] q;"
                + "\ninitial"
                + "\nbegin"
                + "\ndata=" + data.length() + "'b" + data + ";"
                + "\nend"
                + "\n//-------------Code Starts Here---------"
                + "\nalways @ ( posedge clk)"
                + "\nif (" + lax + "reset) begin"
                + "\nq <= 1'b0;"
                + "\nend  else if (data) begin"
                + "\nq <= ~data;"
                + "\nend"
                + "\nendmodule //End Of Module dff_async_reset");
    }

    public void generateSyncUpCounter(PrintStream p, String device, boolean enable, String bound) {
        p.println("//Synchronous Up counter...\n");
        p.println("// Device : " + device);
        p.println("// Generated on : " + date);
        String laxpk = "";
        if (enable) {
            laxpk = "enable";
        } else {
            laxpk = "~enable";
        }

        p.println("module up_counter(out,enable,clk,reset);"
                + "\n"
                + "\n//----------Output Ports--------------"
                + "\n   output [7:0] out;"
                + "\n//------------Input Ports--------------"
                + "\n   input enable, clk, reset;"
                + "\n//------------Internal Variables--------"
                + "\n   reg [7:0] out;"
                + "\n//-------------Code Starts Here-------"
                + "\ninitial"
                + "\nbegin"
                + "\nout=" + bound + ";"
                + "\nend"
                + "\nalways @(posedge clk)"
                + "\nif (reset) begin"
                + "\nout <= 8'b0 ;"
                + "\nend else if (" + laxpk + ") begin"
                + "\nout <= out + 1;"
                + "\nend"
                + "\nendmodule");
    }

    public void generateSyncDownCounter(PrintStream p, String device, boolean enable, String bound) {
        p.println("//Synchronous Down Counter...\n");
        p.println("// Device : " + device);
        p.println("// Generated on : " + date);

        String laxpk = "";
        if (enable) {
            laxpk = "enable";
        } else {
            laxpk = "~enable";
        }
        p.println("module up_counter(out,enable,clk,reset);"
                + "\n"
                + "\n//----------Output Ports--------------"
                + "\n   output [7:0] out;"
                + "\n//------------Input Ports--------------"
                + "\n   input enable, clk, reset;"
                + "\n//------------Internal Variables--------"
                + "\n   reg [7:0] out;"
                + "\n//-------------Code Starts Here-------"
                + "\ninitial"
                + "\nbegin"
                + "\nout=" + bound + ";"
                + "\nend"
                + "\nalways @(posedge clk)"
                + "\nif (reset) begin"
                + "\nout <= 8'b0 ;"
                + "\nend else if (" + laxpk + ") begin"
                + "\nout <= out - 1;"
                + "\nend"
                + "\nendmodule");
    }

    public void generateAlgoAddition(PrintStream p, int m, int n, int mat1[][], int mat2[][], String device) {

        System.out.println("======" + m);
        p.println("//Addition of matrices....\n\n");
        p.println("// Device : " + device);
        p.println("// Generated on : " + date);
        p.println();
        p.println("module matrix_element(clk,matout);");
        p.println("input clk;");
        p.println("output reg [7:0] matout;//reg to out matrix element");
        p.println("reg [7:0] matin1 [" + (m * n) + ":1];//reg array to store matrix");
        p.println("reg [7:0] matin2 [" + (m * n) + ":1];//reg array to store matrix elements");
        p.println("integer row1,col1,row2,col2,k; //to fetch matrix element,");
        p.println("initial");
        p.println("begin");
        p.println("k=1;");
        p.println();
        p.println();
        p.println();
        int cnt = 1;
        for (int i = 0; i < m; i++) {
            //cnt=i+1;
            for (int j = 0; j < n; j++) {
                // cnt=(i+1)*(j+1);
                //System.out.println(cnt);
                p.println("matin1[" + cnt++ + "]=" + mat1[i][j] + ";");


            }
            p.println();
        }
        p.println();
        p.println();
        p.println();
        cnt = 1;
        for (int i = 0; i < m; i++) {
            //cnt=i+1;
            for (int j = 0; j < n; j++) {
                //cnt=(i+1)*(j+1);

                // System.out.println(cnt);
                p.println("matin2[" + cnt++ + "]=" + mat2[i][j] + ";");


            }
            p.println();
        }
        p.println();
        p.println();
        p.println();

        p.println("row1=1;");

        p.println("col1=0;");
        p.println("row2=1;");
        p.println("col2=0;");
        p.println("end");
        p.println("always @(posedge clk)");
        p.println("begin");
        p.println("matout<=matin1[k]+matin2[k];");
        p.println("$display(\"col=%d\",col1);");
        p.println("//display col"
                + "\n$display(\"row=%d\",row1);//display row"
                + "\n$display(\"matrixout=%d\",matout);//display matrix element" + ""
                + "\n//////////control logic////////////////////"
                + "\ncol1=col1+1;//increase col of input matrix1"
                + "\ncol2=col2+1;//increase col of input matrix2"
                + "\nif(col1==" + (n + 1) + ")//for " + m + "x" + n + " matrix j goes from 1 to " + n
                + "\nbegin"
                + "\ncol1=1;"
                + "\nrow1=row1+1;//increase row"
                + "\nif(row1==" + (m + 1) + ")//for " + m + "x" + n + " matrix"
                + "\nrow1=1;"
                + "\nend"
                + "\n/////////for input matrix2//////////"
                + "\nif(col2==" + (n + 1) + ")//for " + m + "x" + n + " matrix j goes from 1 to " + n
                + "\nbegin"
                + "\ncol2=1;"
                + "\nrow2=row2+1;//increase row"
                + "\nif(row2==" + (m + 2) + ")//for " + m + "x" + n + " matrix"
                + "\nrow2=1;"
                + "\nend" + ""
                + "\n\nk=k+1;"
                + "\nif(k==" + (m * n + 1) + ")"
                + "\nk<=1;"
                + "\n\nend"
                + "\nendmodule    ");
        p.println();



    }

    public void displayOutput(javax.servlet.jsp.JspWriter out, int m, int n, int x, int y, int[][] mat1, int[][] mat2, long[][] ans, String op) {
        try {


            out.print("<table >");
            out.print("<tr>");

            out.print("<td>");


            out.print("<table cellpadding='10px' cellspacing='2px' class=\"matrixs\">");
            out.print("<td colspan=" + n + ">   Matrix A</td>");
            //out.print("<td rowspan="+m+">+</td>");
            for (int i = 0; i < m; i++) {
                out.println("<tr>");
                for (int j = 0; j < n; j++) {
                    out.println("<td>");
                    out.print(mat1[i][j]);
                    out.println("</td>");
                }
                out.println("</tr>");
            }
            out.print("</table>");

            out.print("</td>");

            out.print("<td>&nbsp;");

            out.print("</td>");

            out.print("<td><strong>" + op);

            out.print("</td></strong>");

            out.print("<td>&nbsp;");

            out.print("</td>");

            out.print("<td>");


            out.print("<table cellpadding='10px' cellspacing='2px' class=\"matrixs\">");
            out.print("<td colspan=" + y + ">    Matrix B</td>");
            //out.print("<td rowspan="+m+">=</td>");
            for (int i = 0; i < x; i++) {
                out.println("<tr>");
                for (int j = 0; j < y; j++) {
                    out.println("<td>");
                    out.print(mat2[i][j]);
                    out.println("</td>");
                }
                out.println("</tr>");
            }
            out.print("</table>");

            out.print("</td>");


            out.print("<td>&nbsp;");

            out.print("</td>");

            out.print("<td>=");

            out.print("</td>");

            out.print("<td>&nbsp;");

            out.print("</td>");

            out.print("<td>");


            out.print("<table cellpadding='10px' cellspacing='2px' class=\"matrixs\">");
            out.print("<td colspan=" + y + ">Resultant Matrix</td>");
            for (int i = 0; i < m; i++) {
                out.println("<tr>");
                for (int j = 0; j < y; j++) {
                    out.println("<td>");
                    out.print(ans[i][j]);
                }
                out.println("</tr>");
            }
            out.print("</table>");

            out.print("</td>");

            out.print("</tr>");
            out.print("</table>");


        } catch (IOException ex) {
            Logger.getLogger(GenerateVerilogCode.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void displaySingleOutput(javax.servlet.jsp.JspWriter out, int m, int n, int[][] mat1, double[][] ans, String op) {
        try {


            out.print("<table >");
            out.print("<tr>");

            out.print("<td>");


            out.print("<table cellpadding='10px' cellspacing='2px' class=\"matrixs\">");
            out.print("<td colspan=" + n + ">   Matrix A</td>");
            //out.print("<td rowspan="+m+">+</td>");
            for (int i = 0; i < m; i++) {
                out.println("<tr>");
                for (int j = 0; j < n; j++) {
                    out.println("<td>");
                    out.print(mat1[i][j]);
                    out.println("</td>");
                }
                out.println("</tr>");
            }
            out.print("</table>");

            out.print("</td>");

            out.print("<td>&nbsp;");

            out.print("</td>");
            String laxop = "";
            if (op.equals("^")) {
                laxop = "-1";
            }
            out.print("<td><strong><i>A<sup>" + laxop);

            out.print("</sup></i> =</strong></td>");

            out.print("<td>&nbsp;");

            out.print("</td>");


            out.print("<td>");
            out.print("<table cellpadding='10px' cellspacing='2px' class=\"matrixs\">");
            out.print("<td colspan=" + n + ">Resultant Matrix</td>");
            for (int i = 0; i < m; i++) {
                out.println("<tr>");
                for (int j = 0; j < n; j++) {
                    out.println("<td>");
                    out.print(ans[i][j]);
                }
                out.println("</tr>");
            }
            out.print("</table>");

            out.print("</td>");

            out.print("</tr>");
            out.print("</table>");


        } catch (IOException ex) {
            Logger.getLogger(GenerateVerilogCode.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void generateInverseAlgoGaussElimination(PrintStream p, int m, int n, int mat1[][], String device) {
        p.println("//Inverse of matrix using Gauss-Jordan Elimination..\n\n");
        p.println("// Device : " + device);
        p.println("// Generated on : " + date);
        p.println();

    }

    public void generateInverseAlgoLUFactorization(PrintStream p, int m, int n, int mat1[][], String device) {
        p.println("//Inverse of matrix LU Factorization..\n\n");
        p.println("// Device : " + device);
        p.println("// Generated on : " + date);
        p.println();

    }

    public void generateInverseAlgoCholeskyFactorization(PrintStream p, int m, int n, int mat1[][], String device) {
        p.println("//Inverse of matrix Cholesky Factorization..\n\n");
        p.println("// Device : " + device);
        p.println("// Generated on : " + date);
        p.println();

        p.println();



    }

    public void generatearithmeticalOperation(PrintStream p, String device, String exprs[]) {
        String lv[] = new String[exprs.length - 1];
        for (int i = 1; i < exprs.length; i++) {
            if (exprs[i] != null) {
                lv[i - 1] = String.valueOf(exprs[i].charAt(0));
            }
        }

        p.println("//Program demonstrating priority of verilog operators..\n\n");
        p.println("// Device : " + device);
        p.println("// Generated on : " + date);
        p.println("\nmodule priority_of_operators(clk,res,ans);"
                + "\ninput clk;"
                + "\noutput reg [15:0] res,ans;");
        p.print("\ninteger ");
        for (int i = 0; i < lv.length - 1; i++) {
            p.print(lv[i]);
            if (i != lv.length - 2) {
                p.print(",");
            }
        }

        p.print(";\n");
        p.println("always @(posedge clk)"
                + "\nbegin");
        p.print("res=" + exprs[0] + ";// Target expression\n");
        for (int i = 1; i < exprs.length - 1; i++) {
            p.println(exprs[i] + ";// step " + i);
        }
        p.println("ans=" + lv[exprs.length - 3] + "; //Final answer");
        p.println("//$display(\"res=%d  ans=%d\",res,ans);"
                + "\nend"
                + "\nendmodule");




    }

    public void generateShiftOperations(PrintStream p, String device, String expr, int len, String shiftType, String dataType) {
        String dformat = "";
        if (dataType.equals("Binary")) {
            dformat = "b";
        } else {
            dformat = "d";
        }

        p.println("//Program demonstrating shift operators..\n\n");
        p.println("// Device : " + device);
        p.println("// Generated on : " + date);
        p.println("\nmodule shift_operators(clk,a);"
                + "\ninput clk;"
                + "\noutput reg [" + (len - 1) + ":0] a;"
                + "\nalways @(posedge clk)"
                + "\nbegin"
                + "\n // " + shiftType + " Shift"
                + "\n a=" + expr + ";"
                + "\n$display (\" a= %" + dformat + "\", a);"
                + "\nend"
                + "\nendmodule");


    }

    public void generateBitwiseOperation(PrintStream p, String device, String data1, String data2, String operator) {

        String op = "";

        if (operator.equals("AND")) {
            op = "&";
        }
        if (operator.equals("OR")) {
            op = "|";
        }
        if (operator.equals("XOR")) {
            op = "^";
        }
        if (operator.equals("XNOR")) {
            op = "~^";
        }


        p.println("//Program demonstrating Bitwise operators..\n\n");
        p.println("// Device : " + device);
        p.println("// Generated on : " + date);
        p.println("\nmodule bitwise_operators(clk,a);"
                + "\ninput clk;"
                + "\noutput reg [" + (data1.length() - 1) + ":0] a;"
                + "\ninitial begin"
                + "\n"
                + "\nend"
                + "\nalways @(posedge clk)"
                + "\nbegin"
                + "\n//Bit wise "
                + operator);
        if (operator.equals("NEGATION")) {

            p.println("\na= ~" + data1.length() + "'b" + data1 + ";");
        } else {
            p.println("\na= " + data1.length() + "'b" + data1 + " " + op + " " + data2.length() + "'b" + data2 + ";");
        }

        p.println("\n$display (\"a = %b\",a);");
        p.println("\nend"
                + "\n"
                + "\nendmodule");

    }

    public void generateRelationalOperation(PrintStream p, String data1, String data2, String type1, String type2, String operator, String device) {
        String laxpk = "";
        if (type1.equals("Binary")) {
            data1 = data1.length() + "'b" + data1;
        }
        if (type2.equals("Binary")) {
            data2 = data2.length() + "'b" + data2;
        }

        laxpk = "\na= " + data1 + "  " + operator + "  " + data2 + ";";
        p.println("//Program demonstrating Relational operators..\n\n");
        p.println("// Device : " + device);
        p.println("// Generated on : " + date);
        p.println("\nmodule relational_operators(clk,a);"
                + "\ninput clk;"
                + "\noutput reg a;"
                + "\nalways @(posedge clk)"
                + "\nbegin"
                + laxpk
                + "\n$display (\" a = %b\", a);"
                + "\nend"
                + "\nendmodule");
    }

    public void generateLogicalOperation(PrintStream p, String data1, String data2, String logop, String logdtype1, String logdtype2, String device) {
        if (logdtype1.equals("Binary")) {
            data1 = data1.length() + "'b" + data1;
        }
        if (logdtype2.equals("Binary")) {
            data2 = data2.length() + "'b" + data2;
        }
        String name = "";

        if (logop.equals("===")) {
            name = "Case Equality";
        }
        if (logop.equals("!==")) {
            name = "Case Inequality";
        }
        if (logop.equals("==")) {
            name = "Logical Equality";
        }
        if (logop.equals("!=")) {
            name = "Logical Inequality";
        }
        if (logop.equals("&&")) {
            name = "Logical AND";
        }
        if (logop.equals("||")) {
            name = "Logical OR";
        }



        p.println("//Program demonstrating Logical operators..\n\n");
        p.println("// Device : " + device);
        p.println("// Generated on : " + date);
        p.println("\nmodule equality_logical_operators(clk,a);"
                + "\ninput clk;"
                + "\noutput reg a;"
                + "\n"
                + "\nalways @(posedge clk)"
                + "\nbegin"
                + "\n//"
                + name
                + "\na = "
                + data1 + " " + logop + " " + data2 + ";"
                + "\n$display(\"a=%b\",a);"
                + "\nend"
                + "\nendmodule");
    }

    public void generateReductionOperation(PrintStream p, String data1, String operator, String device) {

        String name = "";
        String logop = operator;
        data1 = data1.length() + "'b" + data1;
        if (logop.equals("&")) {
            name = "// Bit Wise AND reduction";
        }
        if (logop.equals("~&")) {
            name = "// Bit Wise NAND reduction";
        }
        if (logop.equals("|")) {
            name = "// Bit Wise OR reduction";
        }
        if (logop.equals("~|")) {
            name = "// Bit Wise NOR reduction";
        }
        if (logop.equals("^")) {
            name = "// Bit Wise XOR reduction";
        }
        if (logop.equals("~^")) {
            name = "// Bit Wise XNOR reduction";
        }

        p.println("//Program demonstrating Reduction operators..\n\n");
        p.println("// Device : " + device);
        p.println("// Generated on : " + date);
        p.println("\nmodule equality_logical_operators(clk,a);"
                + "\ninput clk;"
                + "\noutput reg a;"
                + "\n"
                + "\nalways @(posedge clk)"
                + "\nbegin"
                + "\n//"
                + name
                + "\na = "
                + operator
                + " "
                + data1 + ";"
                + "\n$display(\"a=%b\",a);"
                + "\nend"
                + "\nendmodule");
    }

    public void generateAlgoMultiplication(PrintStream p, int m, int n, int x, int y, int mat1[][], int mat2[][], String device) {






        p.println("//Multiplication of matrices..\n\n");
        p.println("// Device : " + device);
        p.println("// Generated on : " + date);
        p.println();
        p.println("\n\nmodule mm(clk,ot1,ot2,ot3,ot4);"
                + "\ninput clk;"
                + "\noutput reg [15:0] ot1,ot2,ot3,ot4;"
                + "\ninteger m,n;//matrix size"
                + "\ninteger kindex1,kindex2,kindex3,kindex4,r1,r2,r3,r4;"
                + "\nreg [15:0] matrix1 [16:1];//input matrix1"
                + "\nreg [15:0] matrix2 [16:1];//input matrix2"
                + "\nreg [31:0] mpe1,mpe2,mpe3,mpe4;"
                + "\nreg [15:0] matrix3 [16:1];//output matrix"
                + "\ninitial"
                + "\nbegin"
                + "\nr1=1;"
                + "\nr2=5;"
                + "\nr3=9;"
                + "\nr4=13;");
        p.println();
        p.println("////////////////////Input Matrix 1 ////////////////");
        p.println();

        int cnt = 1;
        for (int i = 0; i < m; i++) {
            //cnt=i+1;
            for (int j = 0; j < n; j++) {
                // cnt=(i+1)*(j+1);
                //System.out.println(cnt);
                p.println("matrix1[" + cnt++ + "]=" + mat1[i][j] + ";");


            }
            p.println();
        }
        p.println();
        p.println();
        p.println("////////////////////Input Matrix 2 ////////////////");
        p.println();
        p.println();

        cnt = 1;
        for (int i = 0; i < m; i++) {
            //cnt=i+1;
            for (int j = 0; j < n; j++) {
                //cnt=(i+1)*(j+1);

                // System.out.println(cnt);
                p.println("matrix2[" + cnt++ + "]=" + mat2[i][j] + ";");


            }
            p.println();
        }

        p.println();
        p.println();


        p.println("\nend"
                + "\nalways @(posedge clk)"
                + "\nbegin"
                + "\n//first PE//////////"
                + "\nmpe1<=matrix1[r1]*matrix2[1]+matrix1[r1+1]*matrix2[1+4]+matrix1[r1+2]*matrix2[1+8]+matrix1[r1+3]*matrix2[1+12];"
                + "\nkindex1<=r1;"
                + "\nif(kindex1>16)"
                + "\nkindex1<=1;"
                + "\nmatrix3[kindex1]<=mpe1>>24;"
                + "\not1<=matrix3[kindex1];"
                + "\n//////Second PE///////"
                + "\nmpe2<=matrix1[r2]*matrix2[2]+matrix1[r2+1]*matrix2[2+4]+matrix1[r2+2]*matrix2[2+8]+matrix1[r2+3]*matrix2[2+12];"
                + "\nkindex2<=r2+1;"
                + "\nif(kindex2>16)"
                + "\nkindex2<=2;"
                + "\nmatrix3[kindex2]<=mpe2>>24;"
                + "\not2<=matrix3[kindex2];"
                + "\n//////////third PE////////////"
                + "\nmpe3<=matrix1[r3]*matrix2[3]+matrix1[r3+1]*matrix2[3+4]+matrix1[r3+2]*matrix2[3+8]+matrix1[r3+3]*matrix2[3+12];"
                + "\nkindex3<=r3+2;"
                + "\nif(kindex3>16)"
                + "kindex3<=3;"
                + "\nmatrix3[kindex3]<=mpe3>>24;"
                + "\not3<=matrix3[kindex3];"
                + "\n//////////4th PE////////"
                + "\nmpe4<=matrix1[r4]*matrix2[4]+matrix1[r4+1]*matrix2[4+4]+matrix1[r4+2]*matrix2[4+8]+matrix1[r4+3]*matrix2[4+12];"
                + "\nkindex4<=r4+3;"
                + "\nif(kindex4>16)"
                + "\nkindex4<=4;"
                + "\nmatrix3[kindex4]<=mpe4>>24;"
                + "\not4<=matrix3[kindex4];"
                + "\nr1<=r1+4;"
                + "\nr2<=r2+4;"
                + "\nr3<=r3+4;"
                + "\nr4<=r4+4;"
                + "\nif(r1>16)"
                + "\nr1<=1;"
                + "\nif(r2>16)"
                + "\nr2<=1;"
                + "\nif(r3>16)"
                + "\nr3<=1;"
                + "\nif(r4>16)"
                + "\nr4<=1;"
                + "\nend"
                + "\nendmodule");





    }

    public void generatePopulateMatrixCode(PrintStream p, int m, int n, int mat1[][]) {


        p.print(
                "\nmodule matrix_element(clk,matin,matout);"
                + "\ninput clk;"
                + "\ninput [7:0] matin;//wire to input element"
                + "\noutput reg [7:0] matout;//reg to out matrix element"
                + "\ninteger i,j;//to fetch matrix element, i--> no of ROW, j--> No of COL "
                + "\ninitial"
                + "\nbegin"
                + "\ni=1;"
                + "\nj=1;"
                + "\nend"
                + "\nalways @(posedge clk)"
                + "\nbegin"
                + "\nmatout<=matin;"
                + "\n$display(\"col=%d\",j);//display col"
                + "\n$display(\"row=%d\",i);//display row"
                + "\n$display(\"matrixout=%d \n\",matout);//display matrix element"
                + "\nj=j+1;//increase col"
                + "\nif(j==" + (n + 1) + ")//for " + m + "x" + n + " matrix j goes from 1 to " + n
                + "\nbegin"
                + "\nj=1;"
                + "\ni=i+1;//increase row"
                + "\nif(i==" + (m + 1) + ")//for " + m + "x" + n + " matrix"
                + "\ni=1;"
                + "\nend"
                + "\nend"
                + "\nendmodule");


    }

    /**
     * ****************FUNCTION TO FIND THE DETERMINANT OF THE
     * MATRIX***********************
     */
    public double detrm(double a[][], double k) {
        double s = 1, b[][] = new double[25][25];
        int i, j, m, n, c;
        double det = 0;

        if (k == 1) {
            return (a[0][0]);
        } else {
            det = 0;

            for (c = 0; c < k; c++) {
                m = 0;
                n = 0;

                for (i = 0; i < k; i++) {
                    for (j = 0; j < k; j++) {
                        b[i][j] = 0;

                        if (i != 0 && j != c) {
                            b[m][n] = a[i][j];

                            if (n < (k - 2)) {
                                n++;
                            } else {
                                n = 0;
                                m++;
                            }
                        }
                    }
                }

                det = det + (double) (s * (a[0][c] * detrm(b, k - 1)));
                s = -1 * s;
            }
        }

        return (det);
    }

    /**
     * *****************FUNCTION TO FIND
     * COFACTOR********************************
     */
    public void cofact(double num[][], double f) {
        double b[][] = new double[25][25], fac[][] = new double[25][25];
        int p, q, m, n, i, j;

        for (q = 0; q < f; q++) {
            for (p = 0; p < f; p++) {
                m = 0;
                n = 0;

                for (i = 0; i < f; i++) {
                    for (j = 0; j < f; j++) {
                        b[i][j] = 0;

                        if (i != q && j != p) {
                            b[m][n] = num[i][j];

                            if (n < (f - 2)) {
                                n++;
                            } else {
                                n = 0;
                                m++;
                            }
                        }
                    }
                }

                fac[q][p] = Math.pow((double) -1, (double) (q + p)) * detrm(b, f - 1);
            }
        }

        trans(num, fac, f);
    }

    /**
     * ***********FUNCTION TO FIND TRANSPOSE AND INVERSE OF A
     * MATRIX*************************
     */
    void trans(double num[][], double fac[][], double r) {
        int i = 0, j = 0;
        double b[][] = new double[25][25], inv[][] = new double[25][25], d;

        for (i = 0; i < r; i++) {
            for (j = 0; j < r; j++) {
                b[i][j] = fac[j][i];
            }
        }

        d = detrm(num, r);

        inv[ i][ j] = 0;

        for (i = 0; i < r; i++) {
            for (j = 0; j < r; j++) {
                inv[i][j] = b[i][j] / d;
            }
        }

        System.out.print("\nTHE INVERSE OF THE MATRIX:\n");

        for (i = 0; i < r; i++) {
            for (j = 0; j < r; j++) {
                System.out.print("  " + inv[i][j]);
            }

            System.out.println();
        }
    }

    public void generatePidControllerHalfPrecisionFloat(PrintStream p, String device, long laxt1, String time, long laxt2, String setpoint, long laxt3, String kpval, long laxt4, String kdval, long laxt5, String kival) {
        System.out.println("Coming");

    }

    public void generatePidControllerSinglePrecisionFloat(PrintStream p, String device, long laxt1, String time, long laxt2, String setpoint, long laxt3, String kpval, long laxt4, String kdval, long laxt5, String kival) {

        System.out.println("Coming");
        p.println("//reconfigurable PID Controller for floating point : IEEE 754 SIngle Precision....\n\n");
        p.println("// Device : " + device);
        p.println("// Generated on : " + date);

        p.println(
                "\nmodule pidchk1_fixedpt_external_ip_kpkikd(e,kp,ki,kd,clk,ce,u);"
                + "\n input clk,ce;"
                + "\n input [31:0] e,kp,ki,kd;"
                + "\n output reg [31:0] u;"
                + "\n reg [31:0] ei_delay,e_delay,temp,temp2,u1,ed,e_delay1,p_ctrl,i_ctrl,d_ctrl,ei,temp3;"
                + "\n reg [31:0] stepsize,stepinv,ki1,kd1,temp4,temp5;"
                + "\n integer k,k1;"
                + "\n initial "
                + "\n begin ei_delay=0;temp=0;p_ctrl=0;i_ctrl=0;d_ctrl=0;u=0;u1=0;temp2=0;temp3=32'hFFF0000;temp4=0;"
                + "\n stepsize=32'h00000419;ei=0;ei_delay=0;"
                + "\n stepinv=32'h3E800000;"
                + "\n kp = " + laxt3 + "; // " + laxt1 + "is a fixed point equivalent of " + kpval
                + "\n ki = " + laxt5 + "; // " + laxt5 + "is a fixed point equivalent of " + kival
                + "\n kd = " + laxt4 + "; // " + laxt4 + "is a fixed point equivalent of " + kdval
                + "\n end"
                + "\n ///////////////          fixed point multiplication            ////////////////////"
                + "\n function[31:0] fixmul;"
                + "\n input[31:0] no1,no2;"
                + "\n reg [31:0] outc;"
                + "\n reg [61:0] temp;"
                + "\n reg [31:0] inno1,inno2;"
                + "\n begin"
                + "\n inno1=no1;"
                + "\n inno2=no2;"
                + "\n if (inno1[31]==1)  "
                + "\n begin "
                + "\n inno1[30:0]=~inno1+1;"
                + "\n end"
                + "\n if (inno2[31]==1)   /// reverse 2's complemnt"
                + "\n begin "
                + "\n inno2[30:0]=~inno2+1;//(31'h7FFFFFFF-inno2[30:0])+1;"
                + "\n end"
                + "\n temp[61:0]=inno1[30:0]*inno2[30:0];"
                + "\n outc[31]=inno1[31]^inno2[31];"
                + "\n outc[30:0]=temp[50:20];"
                + "\n fixmul=outc;"
                + "\n if (fixmul[31]==1)"
                + "\n begin"
                + "\n fixmul=~fixmul+1;"
                + "\n end"
                + "\n end"
                + "\n endfunction"
                + "\n ///////////////          fixed point addition          ////////////////////"
                + "\n function [31:0] fixadd;"
                + "\n input [31:0] a,b;"
                + "\n integer signa,signb,signc;"
                + "\n reg [30:0] inputa,inputb;"
                + "\n reg [31:0] outputc;"
                + "\n begin"
                + "\n inputa=a[30:0];"
                + "\n inputb=b[30:0];"
                + "\n signa=a[31];"
                + "\n signb=b[31];"
                + "\n if(signa==0 && signb==0)"
                + "\n k=1;"
                + "\n if(signa==0 && signb==1)"
                + "\n k=2;"
                + "\n if(signa==1 && signb==0)"
                + "\n k=3;"
                + "\n if(signa==1 && signb==1)"
                + "\n k=4;"
                + "\n /////////////////case structure///////"
                + "\n case(k)"
                + "\n ///////case1 : both numbers are positive////////"
                + "\n 1: begin"
                + "\n outputc=inputa+inputb;"
                + "\n outputc[31]=0;"
                + "\n end"
                + "\n ////////////case 2: number b is negative//////////"
                + "\n 2: begin"
                + "\n inputb=~inputb+1;"
                + "\n if(inputa>inputb)"
                + "\n begin"
                + "\n outputc=inputa-inputb;// added 1"
                + "\n outputc[31]=0;"
                + "\n end"
                + "\n else"
                + "\n begin"
                + "\n outputc=(inputb-inputa);//+32'd1;"
                + "\n outputc=~outputc+1;"
                + "\n end"
                + "\n end"
                + "\n //////////////////////case 3: number a is negative///"
                + "\n 3: begin"
                + "\n inputa=~inputa+1;"
                + "\n if(inputa>inputb)"
                + "\n begin"
                + "\n outputc=(inputa-inputb)+1;"
                + "\n outputc=~outputc+1;"
                + "\n end"
                + "\n else"
                + "\n begin"
                + "\n outputc=inputb-inputa;//+32'd1;"
                + "\n outputc[31]=0;"
                + "\n end"
                + "\n end"
                + "\n ///////case 4: both numbers are negative//////////"
                + "\n 4: begin"
                + "\n inputa=~inputa+1;"
                + "\n inputb=~inputb+1;"
                + "\n outputc=(inputa+inputb);"
                + "\n outputc=~outputc+1;"
                + "\n end"
                + "\n default: outputc=0;"
                + "\n endcase"
                + "\n fixadd=outputc;"
                + "\n end"
                + "\n endfunction"
                + "\n ///////////////          fixed point substraction            ////////////////////"
                + "\n function [31:0] fixsub;"
                + "\n input [31:0] ina,inb;"
                + "\n integer k1,signa,signb;"
                + "\n reg [31:0] a,b,c;"
                + "\n begin"
                + "\n a=ina;"
                + "\n b=inb;"
                + "\n signa=ina[31];"
                + "\n signb=inb[31];"
                + "\n if(signa==0 && signb==0)"
                + "\n k1=1;"
                + "\n if(signa==0 && signb==1)"
                + "\n k1=2;"
                + "\n if(signa==1 && signb==0)"
                + "\n k1=3;"
                + "\n if(signa==1 && signb==1)"
                + "\n k1=4;"
                + "\n /////////////////case structure///////"
                + "\n case(k1)"
                + "\n ///////case1 : both numbers are positive////////"
                + "\n 1: begin "
                + "\n if(a>=b)"
                + "\n c=a-b;"
                + "\n else"
                + "\n begin"
                + "\n c=b-a;"
                + "\n c=~c+1;"
                + "\n end"
                + "\n end"
                + "\n ////////////case 2: number b is negative//////////"
                + "\n 2:begin"
                + "\n b=(~b)+32'd1;"
                + "\n c=a+b;"
                + "\n end"
                + "\n 3:begin"
                + "\n a=(~a)+1;"
                + "\n c=a+b;"
                + "\n c= ~c+1;"
                + "\n end"
                + "\n 4: begin"
                + "\n a=(~a)+1;"
                + "\n b=(~b)+1;"
                + "\n if(a>b)"
                + "\n begin "
                + "\n c=a-b;"
                + "\n c=~c+1;//1;//"
                + "\n end"
                + "\n else"
                + "\n begin"
                + "\n c=b-a;"
                + "\n end"
                + "\n end"
                + "\n default:c=0;"
                + "\n endcase"
                + "\n fixsub=c;"
                + "\n end"
                + "\n endfunction"
                + "\n ///////////////          algorithm             ////////////////////"
                + "\n always@(posedge clk)"
                + "\n begin"
                + "\n p_ctrl=fixmul(kp,e);"
                + "\n temp=fixmul(stepsize,e);"
                + "\n ei=fixadd(ei_delay,temp);"
                + "\n i_ctrl=fixmul(ki,ei);"
                + "\n temp4=fixmul(temp5,e_delay);"
                + "\n ed=fixsub(e,e_delay);"
                + "\n d_ctrl=fixmul(ed,kd);"
                + "\n u1=fixadd(p_ctrl,i_ctrl); "
                + "\n u=fixadd(u1,d_ctrl);    "
                + "\n ei_delay=ei;"
                + "\n e_delay=e;"
                + "\n end"
                + "\n endmodule");

    }

    public void generatePidControllerDoublePrecisionFloat(PrintStream p, String device, long laxt1, String time, long laxt2, String setpoint, long laxt3, String kpval, long laxt4, String kdval, long laxt5, String kival) {
        System.out.println("Coming");

    }

    public void generatePidControllerFixed(PrintStream p, String device, String kpval, String kp, String kdval, String kd, String kival, String ki, Vector<String> e, Vector<String> e_pre, Vector<String> sumError) {
        System.out.println("Coming");
        p.println("//reconfigurable PID Controller for fixed point\n\n");
        p.println("// Device : " + device);
        p.println("// Generated on : " + date);

        String[] a = new String[100];
        String[] a1 = new String[100];
        String[] a2 = new String[100];
        Vector<String> v = new Vector<String>();
        Vector<String> v1 = new Vector<String>();
        Vector<String> v2 = new Vector<String>();
        v = e;
        v1 = e_pre;
        v2 = sumError;
        int n = v.size();
        for (int i = 0; i < n; i++) {
            a[i + 1] = "32'h" + v.get(i);

        }
        for (int i = 0; i < n - 1; i++) {
            a1[i + 1] = "32'h" + v1.get(i);

        }

        for (int i = 0; i < n - 1; i++) {
            a2[i + 1] = "32'h" + v2.get(i);

        }

        p.println(
                "\nmodule pid(clk,u);"
                + "\noutput reg [31:0] u;"
                + "\ninput clk,ce;"
                + "\nreg [31:0] e[76:1];"
                + "\nreg [31:0] e_delay[76:1];"
                + "\nreg [31:0] e_sum[76:1];"
                + "\nreg [31:0] e_present,e_s,e_previous,e_pp,p_ctrl,temp_1,i_ctrl,temp_2,d_ctrl,u1,kp,ki,kd,stepinv;"
                + "\ninteger k,k1,i;"
                + "\ninitial"
                + "\nbegin"
                + "\ne_present=0;e_s=0;e_previous=0;e_pp=0;p_ctrl=0;temp_1=0;i_ctrl=0;d_ctrl=0;u1=0;u=0;temp_2=0;"
                + "\ni=1;stepinv=32'h3E800000;"
                + "\nkp=32'h" + kpval + ";//inp is 32 bit hexadecimal equivalent of input fixed point number " + kp + "(1-11-20 FORMAT)"
                + "\nkd=32'h" + kdval + ";//inp is 32 bit hexadecimal equivalent of input fixed point number " + kd + "(1-11-20 FORMAT)"
                + "\nki=32'h" + kival + ";//inp is 32 bit hexadecimal equivalent of input fixed point number " + ki + "(1-11-20 FORMAT)"
                + "\n//////////////////   error       //////////"
                + "\ne[1]=" + a[1] + ";"
                + "\ne[2]=" + a[2] + ";"
                + "\ne[3]=" + a[3] + ";"
                + "\ne[4]=" + a[4] + ";"
                + "\ne[5]=" + a[5] + ";"
                + "\ne[6]=" + a[6] + ";"
                + "\ne[7]=" + a[7] + ";"
                + "\ne[8]=" + a[8] + ";"
                + "\ne[9]=" + a[9] + ";"
                + "\ne[10]=" + a[10] + ";"
                + "\ne[11]=" + a[11] + ";"
                + "\ne[12]=" + a[12] + ";"
                + "\ne[13]=" + a[13] + ";"
                + "\ne[14]=" + a[14] + ";"
                + "\ne[15]=" + a[15] + ";"
                + "\ne[16]=" + a[16] + ";"
                + "\ne[17]=" + a[17] + ";"
                + "\ne[18]=" + a[18] + ";"
                + "\ne[19]=" + a[19] + ";"
                + "\ne[20]=" + a[20] + ";"
                + "\ne[21]=" + a[21] + ";"
                + "\ne[22]=" + a[22] + ";"
                + "\ne[23]=" + a[23] + ";"
                + "\ne[24]=" + a[24] + ";"
                + "\ne[25]=" + a[25] + ";"
                + "\ne[26]=" + a[26] + ";"
                + "\ne[27]=" + a[27] + ";"
                + "\ne[28]=" + a[28] + ";"
                + "\ne[29]=" + a[29] + ";"
                + "\ne[30]=" + a[30] + ";"
                + "\ne[31]=" + a[31] + ";"
                + "\ne[32]=" + a[32] + ";"
                + "\ne[33]=" + a[33] + ";"
                + "\ne[34]=" + a[34] + ";"
                + "\ne[35]=" + a[35] + ";"
                + "\ne[36]=" + a[36] + ";"
                + "\ne[37]=" + a[37] + ";"
                + "\ne[38]=" + a[38] + ";"
                + "\ne[39]=" + a[39] + ";"
                + "\ne[40]=" + a[40] + ";"
                + "\ne[41]=" + a[41] + ";"
                + "\ne[42]=" + a[42] + ";"
                + "\ne[43]=" + a[43] + ";"
                + "\ne[44]=" + a[44] + ";"
                + "\ne[45]=" + a[45] + ";"
                + "\ne[46]=" + a[46] + ";"
                + "\ne[47]=" + a[47] + ";"
                + "\ne[48]=" + a[48] + ";"
                + "\ne[49]=" + a[49] + ";"
                + "\ne[50]=" + a[50] + ";"
                + "\ne[51]=" + a[51] + ";"
                + "\ne[52]=" + a[52] + ";"
                + "\ne[53]=" + a[53] + ";"
                + "\ne[54]=" + a[54] + ";"
                + "\ne[55]=" + a[55] + ";"
                + "\ne[56]=" + a[56] + ";"
                + "\ne[57]=" + a[57] + ";"
                + "\ne[58]=" + a[58] + ";"
                + "\ne[59]=" + a[59] + ";"
                + "\ne[60]=" + a[60] + ";"
                + "\ne[61]=" + a[61] + ";"
                + "\ne[62]=" + a[62] + ";"
                + "\ne[63]=" + a[63] + ";"
                + "\ne[64]=" + a[64] + ";"
                + "\ne[65]=" + a[65] + ";"
                + "\ne[66]=" + a[66] + ";"
                + "\ne[67]=" + a[67] + ";"
                + "\ne[68]=" + a[68] + ";"
                + "\ne[69]=" + a[69] + ";"
                + "\ne[70]=" + a[70] + ";"
                + "\ne[71]=" + a[71] + ";"
                + "\ne[72]=" + a[72] + ";"
                + "\ne[73]=" + a[73] + ";"
                + "\ne[74]=" + a[74] + ";"
                + "\ne[75]=" + a[75] + ";"
                + "\ne[76]=" + a[76] + ";"
                + "\ne_delay[1]=" + a[1] + ";"
                + "\ne_delay[2]=" + a1[1] + ";"
                + "\ne_delay[3]=" + a1[2] + ";"
                + "\ne_delay[4]=" + a1[3] + ";"
                + "\ne_delay[5]=" + a1[4] + ";"
                + "\ne_delay[6]=" + a1[5] + ";"
                + "\ne_delay[7]=" + a1[6] + ";"
                + "\ne_delay[8]=" + a1[7] + ";"
                + "\ne_delay[9]=" + a1[8] + ";"
                + "\ne_delay[10]=" + a1[9] + ";"
                + "\ne_delay[11]=" + a1[10] + ";"
                + "\ne_delay[12]=" + a1[11] + ";"
                + "\ne_delay[13]=" + a1[12] + ";"
                + "\ne_delay[14]=" + a1[13] + ";"
                + "\ne_delay[15]=" + a1[14] + ";"
                + "\ne_delay[16]=" + a1[15] + ";"
                + "\ne_delay[17]=" + a1[16] + ";"
                + "\ne_delay[18]=" + a1[17] + ";"
                + "\ne_delay[19]=" + a1[18] + ";"
                + "\ne_delay[20]=" + a1[19] + ";"
                + "\ne_delay[21]=" + a1[20] + ";"
                + "\ne_delay[22]=" + a1[21] + ";"
                + "\ne_delay[23]=" + a1[22] + ";"
                + "\ne_delay[24]=" + a1[23] + ";"
                + "\ne_delay[25]=" + a1[24] + ";"
                + "\ne_delay[26]=" + a1[25] + ";"
                + "\ne_delay[27]=" + a1[26] + ";"
                + "\ne_delay[28]=" + a1[27] + ";"
                + "\ne_delay[29]=" + a1[28] + ";"
                + "\ne_delay[30]=" + a1[29] + ";"
                + "\ne_delay[31]=" + a1[30] + ";"
                + "\ne_delay[32]=" + a1[31] + ";"
                + "\ne_delay[33]=" + a1[32] + ";"
                + "\ne_delay[34]=" + a1[33] + ";"
                + "\ne_delay[35]=" + a1[34] + ";"
                + "\ne_delay[36]=" + a1[35] + ";"
                + "\ne_delay[37]=" + a1[36] + ";"
                + "\ne_delay[38]=" + a1[37] + ";"
                + "\ne_delay[39]=" + a1[38] + ";"
                + "\ne_delay[40]=" + a1[39] + ";"
                + "\ne_delay[41]=" + a1[40] + ";"
                + "\ne_delay[42]=" + a1[41] + ";"
                + "\ne_delay[43]=" + a1[42] + ";"
                + "\ne_delay[44]=" + a1[43] + ";"
                + "\ne_delay[45]=" + a1[44] + ";"
                + "\ne_delay[46]=" + a1[45] + ";"
                + "\ne_delay[47]=" + a1[46] + ";"
                + "\ne_delay[48]=" + a1[47] + ";"
                + "\ne_delay[49]=" + a1[48] + ";"
                + "\ne_delay[50]=" + a1[49] + ";"
                + "\ne_delay[51]=" + a1[50] + ";"
                + "\ne_delay[52]=" + a1[51] + ";"
                + "\ne_delay[53]=" + a1[52] + ";"
                + "\ne_delay[54]=" + a1[53] + ";"
                + "\ne_delay[55]=" + a1[54] + ";"
                + "\ne_delay[56]=" + a1[55] + ";"
                + "\ne_delay[57]=" + a1[56] + ";"
                + "\ne_delay[58]=" + a1[57] + ";"
                + "\ne_delay[59]=" + a1[58] + ";"
                + "\ne_delay[60]=" + a1[59] + ";"
                + "\ne_delay[61]=" + a1[60] + ";"
                + "\ne_delay[62]=" + a1[61] + ";"
                + "\ne_delay[63]=" + a1[62] + ";"
                + "\ne_delay[64]=" + a1[63] + ";"
                + "\ne_delay[65]=" + a1[64] + ";"
                + "\ne_delay[66]=" + a1[65] + ";"
                + "\ne_delay[67]=" + a1[66] + ";"
                + "\ne_delay[68]=" + a1[67] + ";"
                + "\ne_delay[69]=" + a1[68] + ";"
                + "\ne_delay[70]=" + a1[69] + ";"
                + "\ne_delay[71]=" + a1[70] + ";"
                + "\ne_delay[72]=" + a1[71] + ";"
                + "\ne_delay[73]=" + a1[72] + ";"
                + "\ne_delay[74]=" + a1[73] + ";"
                + "\ne_delay[75]=" + a1[74] + ";"
                + "\ne_delay[76]=" + a1[75] + ";"
                + "\ne_sum[1]=0;"
                + "\ne_sum[2]=" + a2[1] + ";"
                + "\ne_sum[3]=" + a2[2] + ";"
                + "\ne_sum[4]=" + a2[3] + ";"
                + "\ne_sum[5]=" + a2[4] + ";"
                + "\ne_sum[6]=" + a2[5] + ";"
                + "\ne_sum[7]=" + a2[6] + ";"
                + "\ne_sum[8]=" + a2[7] + ";"
                + "\ne_sum[9]=" + a2[8] + ";"
                + "\ne_sum[10]=" + a2[9] + ";"
                + "\ne_sum[11]=" + a2[10] + ";"
                + "\ne_sum[12]=" + a2[11] + ";"
                + "\ne_sum[13]=" + a2[12] + ";"
                + "\ne_sum[14]=" + a2[13] + ";"
                + "\ne_sum[15]=" + a2[14] + ";"
                + "\ne_sum[16]=" + a2[15] + ";"
                + "\ne_sum[17]=" + a2[16] + ";"
                + "\ne_sum[18]=" + a2[17] + ";"
                + "\ne_sum[19]=" + a2[18] + ";"
                + "\ne_sum[20]=" + a2[19] + ";"
                + "\ne_sum[21]=" + a2[20] + ";"
                + "\ne_sum[22]=" + a2[21] + ";"
                + "\ne_sum[23]=" + a2[22] + ";"
                + "\ne_sum[24]=" + a2[23] + ";"
                + "\ne_sum[25]=" + a2[25] + ";"
                + "\ne_sum[26]=" + a2[25] + ";"
                + "\ne_sum[27]=" + a2[26] + ";"
                + "\ne_sum[28]=" + a2[27] + ";"
                + "\ne_sum[29]=" + a2[28] + ";"
                + "\ne_sum[30]=" + a2[29] + ";"
                + "\ne_sum[31]=" + a2[30] + ";"
                + "\ne_sum[32]=" + a2[31] + ";"
                + "\ne_sum[33]=" + a2[32] + ";"
                + "\ne_sum[34]=" + a2[33] + ";"
                + "\ne_sum[35]=" + a2[34] + ";"
                + "\ne_sum[36]=" + a2[35] + ";"
                + "\ne_sum[37]=" + a2[36] + ";"
                + "\ne_sum[38]=" + a2[37] + ";"
                + "\ne_sum[39]=" + a2[38] + ";"
                + "\ne_sum[40]=" + a2[39] + ";"
                + "\ne_sum[41]=" + a2[40] + ";"
                + "\ne_sum[42]=" + a2[41] + ";"
                + "\ne_sum[43]=" + a2[42] + ";"
                + "\ne_sum[44]=" + a2[43] + ";"
                + "\ne_sum[45]=" + a2[44] + ";"
                + "\ne_sum[46]=" + a2[45] + ";"
                + "\ne_sum[47]=" + a2[46] + ";"
                + "\ne_sum[48]=" + a2[47] + ";"
                + "\ne_sum[49]=" + a2[48] + ";"
                + "\ne_sum[50]=" + a2[49] + ";"
                + "\ne_sum[51]=" + a2[50] + ";"
                + "\ne_sum[52]=" + a2[51] + ";"
                + "\ne_sum[53]=" + a2[52] + ";"
                + "\ne_sum[54]=" + a2[53] + ";"
                + "\ne_sum[55]=" + a2[54] + ";"
                + "\ne_sum[56]=" + a2[55] + ";"
                + "\ne_sum[57]=" + a2[56] + ";"
                + "\ne_sum[58]=" + a2[57] + ";"
                + "\ne_sum[59]=" + a2[58] + ";"
                + "\ne_sum[60]=" + a2[59] + ";"
                + "\ne_sum[61]=" + a2[60] + ";"
                + "\ne_sum[62]=" + a2[61] + ";"
                + "\ne_sum[63]=" + a2[62] + ";"
                + "\ne_sum[64]=" + a2[63] + ";"
                + "\ne_sum[65]=" + a2[64] + ";"
                + "\ne_sum[66]=" + a2[65] + ";"
                + "\ne_sum[67]=" + a2[66] + ";"
                + "\ne_sum[68]=" + a2[67] + ";"
                + "\ne_sum[69]=" + a2[68] + ";"
                + "\ne_sum[70]=" + a2[69] + ";"
                + "\ne_sum[71]=" + a2[70] + ";"
                + "\ne_sum[72]=" + a2[71] + ";"
                + "\ne_sum[73]=" + a2[72] + ";"
                + "\ne_sum[74]=" + a2[73] + ";"
                + "\ne_sum[75]=" + a2[74] + ";"
                + "\ne_sum[76]=" + a2[75] + ";"
                + "\nend"
                + "\n///////////////          fixed point multiplication            ////////////////////"
                + "\nfunction[31:0] fixmul;"
                + "\ninput[31:0] no1,no2;"
                + "\nreg [31:0] outc;"
                + "\nreg [61:0] temp;"
                + "\nreg [31:0] inno1,inno2;"
                + "\nbegin"
                + "\ninno1=no1;"
                + "\ninno2=no2;"
                + "\nif (inno1[31]==1)"
                + "\nbegin "
                + "\ninno1[30:0]=~inno1+1;"
                + "\nend"
                + "\nif (inno2[31]==1)   /// reverse 2's complemnt"
                + "\nbegin "
                + "\ninno2[30:0]=~inno2+1;//(31'h7FFFFFFF-inno2[30:0])+1;"
                + "\nend"
                + "\ntemp[61:0]=inno1[30:0]*inno2[30:0];"
                + "\noutc[31]=inno1[31]^inno2[31];"
                + "\noutc[30:0]=temp[50:20];"
                + "\nfixmul=outc;"
                + "\nif (fixmul[31]==1)"
                + "\nbegin"
                + "\nfixmul[30:0]=~fixmul[30:0]+1;"
                + "\nend"
                + "\nend"
                + "\nendfunction"
                + "\n///////////////          fixed point addition          ////////////////////"
                + "\nfunction [31:0] fixadd;"
                + "\ninput [31:0] a,b;"
                + "\ninteger signa,signb,signc;"
                + "\nreg [30:0] inputa,inputb;"
                + "\nreg [31:0] outputc;"
                + "\nbegin"
                + "\ninputa=a[30:0];"
                + "\ninputb=b[30:0];"
                + "\nsigna=a[31];"
                + "\nsignb=b[31];"
                + "\nif(signa==0 && signb==0)"
                + "\nk=1;"
                + "\nif(signa==0 && signb==1)"
                + "\nk=2;"
                + "\nif(signa==1 && signb==0)"
                + "\nk=3;"
                + "\nif(signa==1 && signb==1)"
                + "\nk=4;"
                + "\n/////////////////case structure///////"
                + "\ncase(k)"
                + "\n///////case1 : both numbers are positive////////"
                + "\n1: begin"
                + "\noutputc=inputa+inputb;"
                + "\noutputc[31]=0;"
                + "\nend"
                + "\n////////////case 2: number b is negative//////////"
                + "\n2: begin"
                + "\ninputb=~inputb+1;"
                + "\nif(inputa>inputb)"
                + "\nbegin"
                + "\noutputc=inputa-inputb;// added 1"
                + "\noutputc[31]=0;"
                + "\nend"
                + "\nelse"
                + "\nbegin"
                + "\noutputc=(inputb-inputa);//+32'd1;"
                + "\noutputc=~outputc+1;"
                + "\nend"
                + "\nend"
                + "\n//////////////////////case 3: number a is negative///"
                + "\n3: begin"
                + "\ninputa=~inputa+1;"
                + "\nif(inputa>inputb)"
                + "\nbegin"
                + "\noutputc=(inputa-inputb)+1;"
                + "\noutputc=~outputc+1;"
                + "\nend"
                + "\nelse"
                + "\nbegin"
                + "\noutputc=inputb-inputa;//+32'd1;"
                + "\noutputc[31]=0;"
                + "\nend"
                + "\nend"
                + "\n///////case 4: both numbers are negative//////////"
                + "\n4: begin"
                + "\ninputa=~inputa+1;"
                + "\ninputb=~inputb+1;"
                + "\noutputc=(inputa+inputb);"
                + "\noutputc=~outputc+1;"
                + "\nend"
                + "\ndefault: outputc=0;"
                + "\nendcase"
                + "\nfixadd=outputc;"
                + "\nend"
                + "\nendfunction"
                + "\n///////////////          fixed point substraction            ////////////////////"
                + "\nfunction [31:0] fixsub;"
                + "\ninput [31:0] ina,inb;"
                + "\ninteger k1,signa,signb;"
                + "\nreg [31:0] a,b,c;"
                + "\nbegin"
                + "\na=ina;"
                + "\nb=inb;"
                + "\nsigna=ina[31];"
                + "\nsignb=inb[31];"
                + "\nif(signa==0 && signb==0)"
                + "\nk1=1;"
                + "\nif(signa==0 && signb==1)"
                + "\nk1=2;"
                + "\nif(signa==1 && signb==0)"
                + "\nk1=3;"
                + "\nif(signa==1 && signb==1)"
                + "\nk1=4;"
                + "\n/////////////////case structure///////"
                + "\ncase(k1)"
                + "\n///////case1 : both numbers are positive////////"
                + "\n1: begin "
                + "\nif(a>=b)"
                + "\nc=a-b;"
                + "\nelse"
                + "\nbegin"
                + "\nc=b-a;"
                + "\nc=~c+1;"
                + "\nend"
                + "\nend"
                + "\n////////////case 2: number b is negative//////////"
                + "\n2:begin"
                + "\nb=(~b)+32'd1;"
                + "\nc=a+b;"
                + "\nend"
                + "\n3:begin"
                + "\na=(~a)+1;"
                + "\nc=a+b;"
                + "\nc= ~c+1;"
                + "\nend"
                + "\n4: begin"
                + "\na=(~a)+1;"
                + "\nb=(~b)+1;"
                + "\nif(a>b)"
                + "\nbegin "
                + "\nc=a-b;"
                + "\nc=~c+1;//1;//"
                + "\nend"
                + "\nelse"
                + "\nbegin"
                + "\nc=b-a;"
                + "\nend"
                + "\nend"
                + "\ndefault:c=0;"
                + "\nendcase"
                + "\nfixsub=c;"
                + "\nend"
                + "\nendfunction"
                + "\n///////////////          algorithm             ////////////////////"
                + "\nalways@(posedge clk)"
                + "\nbegin"
                + "\nif(i>=1 && i<=76)"
                + "\nbegin"
                + "\n///////////////          P Control            ////////////////////"
                + "\ne_present=e[i];"
                + "\np_ctrl=fixmul(kp,e_present);"
                + "////////////////          I Control            /////////////////////"
                + "\ne_s=e_sum[i];"
                + "\ntemp_1=fixmul(ki,e_s);"
                + "\ni_ctrl=fixmul(stepinv,temp_1);"
                + "/////////////////         D Control           /////////////////////"
                + "\ne_previous=e_delay[i];"
                + "\ne_pp=fixsub(e_present,e_previous);"
                + "\ntemp_2=fixmul(kd,e_pp);"
                + "\nd_ctrl=fixmul(stepinv,temp_2);"
                + "\nu1=fixadd(p_ctrl,i_ctrl); "
                + "\nu=fixadd(u1,d_ctrl);    "
                + "\nend"
                + "\ni=i+1;"
                + "\nend"
                + "\nendmodule");
    }

    public void generatePWM(PrintStream p, String device, String hexPeriod, String hexCycle, String clk) {
        System.out.println("Coming");
        p.println("//Pulse-Width Modulation (PWM) Generation Using FPGA\n\n");
        p.println("// Device : " + device);
        p.println("// Generated on : " + date);

        String clock = "";
        if (clk.equals("50")) {
            clock = "5000000";
        } else if (clk.equals("100")) {
            clock = "10000000";
        } else if (clk.equals("200")) {
            clock = "20000000";
        } else if (clk.equals("125")) {
            clock = "12500000";
        }

        p.println("\nmodule pwm(clk,pwm_out);"
                + "\ninput clk;"
                + "\nreg [31:0] sample_time,duty_cycle;"
                + "\nreg [31:0] out_freq,total_count,temp4,counter;"
                + "\noutput reg pwm_out;"
                + "\nreg [63:0] A;"
                + "\nreg [31:0] B,compliment,adjust,temp1,temp2,temp3,q,in_freq;"
                + "\nreg [32:0] temp;"
                + "\ninitial"
                + "\nbegin"
                + "\ntemp1=64'h80000000; // 31st bit is integer part and 30 to 0 bit is fraction part"
                + "\ntemp2=32'd100;"
                + "\nin_freq=32'd" + clock + ";"
                + "\ncounter=0;"
                + "\nend"
                + "\n"
                + "\n"
                + "\nfunction [31:0] div;"
                + "\ninput [63:0] inp1;"
                + "\ninput [31:0] inp2;"
                + "\nbegin"
                + "\n	A=inp1;"
                + "\n	B=inp2;"
                + "\n	compliment=~B+1;"
                + "\n	adjust=A[63:32];"
                + "\n	temp=adjust+compliment;"
                + "\n	adjust={temp[30:0],A[31]};"
                + "\n	if(temp[32]==0)"
                + "\n	begin"
                + "\n		temp=adjust+B;"
                + "\n	end"
                + "\n	else"
                + "\n	begin"
                + "\n		temp=adjust+compliment;"
                + "\n	end"
                + "\n	adjust={temp[30:0],A[30]};"
                + "\n	if(temp[32]==0)"
                + "\n	begin"
                + "\n		q[31]=0;"
                + "\n		temp=adjust+B;"
                + "\n	end"
                + "\n	else"
                + "\n	begin"
                + "\n		q[31]=1;"
                + "\n		temp=adjust+compliment;"
                + "\n	end"
                + "\n	adjust={temp[30:0],A[29]};"
                + "\n	if(temp[32]==0)"
                + "\n	begin"
                + "\n		q[30]=0;"
                + "\n		temp=adjust+B;"
                + "\n	end"
                + "\n	else"
                + "\n	begin"
                + "\n		q[30]=1;"
                + "\n		temp=adjust+compliment;"
                + "\n	end"
                + "\n	adjust={temp[30:0],A[28]};"
                + "\n	if(temp[32]==0)"
                + "\n	begin"
                + "\n		q[29]=0;"
                + "\n		temp=adjust+B;"
                + "\n	end"
                + "\n	else"
                + "\n	begin"
                + "\n		q[29]=1;"
                + "\n		temp=adjust+compliment;"
                + "\n	end"
                + "\n	adjust={temp[30:0],A[27]};"
                + "\n	if(temp[32]==0)"
                + "\n	begin"
                + "\n		q[28]=0;"
                + "\n		temp=adjust+B;"
                + "\n	end"
                + "\n	else"
                + "\n	begin"
                + "\n		q[28]=1;"
                + "\n		temp=adjust+compliment;"
                + "\n	end"
                + "\n	adjust={temp[30:0],A[26]};"
                + "\n	if(temp[32]==0)"
                + "\n	begin"
                + "\n		q[27]=0;"
                + "\n		temp=adjust+B;"
                + "\n	end"
                + "\n	else"
                + "\n	begin"
                + "\n		q[27]=1;"
                + "\n		temp=adjust+compliment;"
                + "\n	end"
                + "\n	adjust={temp[30:0],A[25]};"
                + "\n	if(temp[32]==0)"
                + "\n	begin"
                + "\n		q[26]=0;"
                + "\n		temp=adjust+B;"
                + "\n	end"
                + "\n	else"
                + "\n	begin"
                + "\n		q[26]=1;"
                + "\n		temp=adjust+compliment;"
                + "\n	end"
                + "\n	adjust={temp[30:0],A[24]};"
                + "\n	if(temp[32]==0)"
                + "\n	begin"
                + "\n		q[25]=0;"
                + "\n		temp=adjust+B;"
                + "\n	end"
                + "\n	else"
                + "\n	begin"
                + "\n		q[25]=1;"
                + "\n		temp=adjust+compliment;"
                + "\n	end"
                + "\n	adjust={temp[30:0],A[23]};"
                + "\n	if(temp[32]==0)"
                + "\n	begin"
                + "\n		q[24]=0;"
                + "\n		temp=adjust+B;"
                + "\n	end"
                + "\n	else"
                + "\n	begin"
                + "\n		q[24]=1;"
                + "\n		temp=adjust+compliment;"
                + "\n	end"
                + "\n	adjust={temp[30:0],A[22]};"
                + "\n	if(temp[32]==0)"
                + "\n	begin"
                + "\n		q[23]=0;"
                + "\n		temp=adjust+B;"
                + "\n	end"
                + "\n	else"
                + "\n	begin"
                + "\n		q[23]=1;"
                + "\n		temp=adjust+compliment;"
                + "\n	end"
                + "\n	adjust={temp[30:0],A[21]};"
                + "\n	if(temp[32]==0)"
                + "\n	begin"
                + "\n		q[22]=0;"
                + "\n		temp=adjust+B;"
                + "\n	end"
                + "\n	else"
                + "\n	begin"
                + "\n		q[22]=1;"
                + "\n		temp=adjust+compliment;"
                + "\n	end"
                + "\n	adjust={temp[30:0],A[20]};"
                + "\n	if(temp[32]==0)"
                + "\n	begin"
                + "\n		q[21]=0;"
                + "\n		temp=adjust+B;"
                + "\n	end"
                + "\n	else"
                + "\n	begin"
                + "\n		q[21]=1;"
                + "\n		temp=adjust+compliment;"
                + "\n	end"
                + "\n	adjust={temp[30:0],A[19]};"
                + "\n	if(temp[32]==0)"
                + "\n	begin"
                + "\n		q[20]=0;"
                + "\n		temp=adjust+B;"
                + "\n	end"
                + "\n	else"
                + "\n	begin"
                + "\n		q[20]=1;"
                + "\n		temp=adjust+compliment;"
                + "\n	end"
                + "\n	adjust={temp[30:0],A[18]};"
                + "\n	if(temp[32]==0)"
                + "\n	begin"
                + "\n		q[19]=0;"
                + "\n		temp=adjust+B;"
                + "\n	end"
                + "\n	else"
                + "\n	begin"
                + "\n		q[19]=1;"
                + "\n		temp=adjust+compliment;"
                + "\n	end"
                + "\n	adjust={temp[30:0],A[17]};"
                + "\n	if(temp[32]==0)"
                + "\n	begin"
                + "\n		q[18]=0;"
                + "\n		temp=adjust+B;"
                + "\n	end"
                + "\n	else"
                + "\n	begin"
                + "\n		q[18]=1;"
                + "\n		temp=adjust+compliment;"
                + "\n	end"
                + "\n	adjust={temp[30:0],A[16]};"
                + "\n	if(temp[32]==0)"
                + "\n	begin"
                + "\n		q[17]=0;"
                + "\n		temp=adjust+B;"
                + "\n	end"
                + "\n	else"
                + "\n	begin"
                + "\n		q[17]=1;"
                + "\n		temp=adjust+compliment;"
                + "\n	end"
                + "\n	adjust={temp[30:0],A[15]};"
                + "\n	if(temp[32]==0)"
                + "\n	begin"
                + "\n		q[16]=0;"
                + "\n		temp=adjust+B;"
                + "\n	end"
                + "\n	else"
                + "\n	begin"
                + "\n		q[16]=1;"
                + "\n		temp=adjust+compliment;"
                + "\n	end"
                + "\n	adjust={temp[30:0],A[14]};"
                + "\n	if(temp[32]==0)"
                + "\n	begin"
                + "\n		q[15]=0;"
                + "\n		temp=adjust+B;"
                + "\n	end"
                + "\n	else"
                + "\n	begin"
                + "\n		q[15]=1;"
                + "\n		temp=adjust+compliment;"
                + "\n	end"
                + "\n	adjust={temp[30:0],A[13]};"
                + "\n	if(temp[32]==0)"
                + "\n	begin"
                + "\n		q[14]=0;"
                + "\n		temp=adjust+B;"
                + "\n	end"
                + "\n	else"
                + "\n	begin"
                + "\n		q[14]=1;"
                + "\n		temp=adjust+compliment;"
                + "\n	end"
                + "\n	adjust={temp[30:0],A[12]};"
                + "\n	if(temp[32]==0)"
                + "\n	begin"
                + "\n		q[13]=0;"
                + "\n		temp=adjust+B;"
                + "\n	end"
                + "\n	else"
                + "\n	begin"
                + "\n		q[13]=1;"
                + "\n		temp=adjust+compliment;"
                + "\n	end"
                + "\n	adjust={temp[30:0],A[11]};"
                + "\n	if(temp[32]==0)"
                + "\n	begin"
                + "\n		q[12]=0;"
                + "\n		temp=adjust+B;"
                + "\n	end"
                + "\n	else"
                + "\n	begin"
                + "\n		q[12]=1;"
                + "\n		temp=adjust+compliment;"
                + "\n	end"
                + "\n	adjust={temp[30:0],A[10]};"
                + "\n	if(temp[32]==0)"
                + "\n	begin"
                + "\n		q[11]=0;"
                + "\n		temp=adjust+B;"
                + "\n	end"
                + "\n	else"
                + "\n	begin"
                + "\n		q[11]=1;"
                + "\n		temp=adjust+compliment;"
                + "\n	end"
                + "\n	adjust={temp[30:0],A[9]};"
                + "\n	if(temp[32]==0)"
                + "\n	begin"
                + "\n		q[10]=0;"
                + "\n		temp=adjust+B;"
                + "\n	end"
                + "\n	else"
                + "\n	begin"
                + "\n		q[10]=1;"
                + "\n		temp=adjust+compliment;"
                + "\n	end"
                + "\n	adjust={temp[30:0],A[8]};"
                + "\n	if(temp[32]==0)"
                + "\n	begin"
                + "\n		q[9]=0;"
                + "\n		temp=adjust+B;"
                + "\n	end"
                + "\n	else"
                + "\n	begin"
                + "\n		q[9]=1;"
                + "\n		temp=adjust+compliment;"
                + "\n	end"
                + "\n	adjust={temp[30:0],A[7]};"
                + "\n	if(temp[32]==0)"
                + "\n	begin"
                + "\n		q[8]=0;"
                + "\n		temp=adjust+B;"
                + "\n	end"
                + "\n	else"
                + "\n	begin"
                + "\n		q[8]=1;"
                + "\n		temp=adjust+compliment;"
                + "\n	end"
                + "\n	adjust={temp[30:0],A[6]};"
                + "\n	if(temp[32]==0)"
                + "\n	begin"
                + "\n		q[7]=0;"
                + "\n		temp=adjust+B;"
                + "\n	end"
                + "\n	else"
                + "\n	begin"
                + "\n		q[7]=1;"
                + "\n		temp=adjust+compliment;"
                + "\n	end"
                + "\n	adjust={temp[30:0],A[5]};"
                + "\n	if(temp[32]==0)"
                + "\n	begin"
                + "\n		q[6]=0;"
                + "\n		temp=adjust+B;"
                + "\n	end"
                + "\n	else"
                + "\n	begin"
                + "\n		q[6]=1;"
                + "\n		temp=adjust+compliment;"
                + "\n	end"
                + "\n	adjust={temp[30:0],A[4]};"
                + "\n	if(temp[32]==0)"
                + "\n	begin"
                + "\n		q[5]=0;"
                + "\n		temp=adjust+B;"
                + "\n	end"
                + "\n	else"
                + "\n	begin"
                + "\n		q[5]=1;"
                + "\n		temp=adjust+compliment;"
                + "\n	end"
                + "\n	adjust={temp[30:0],A[3]};"
                + "\n	if(temp[32]==0)"
                + "\n	begin"
                + "\n		q[4]=0;"
                + "\n		temp=adjust+B;"
                + "\n	end"
                + "\n	else"
                + "\n	begin"
                + "\n		q[4]=1;"
                + "\n		temp=adjust+compliment;"
                + "\n	end"
                + "\n	adjust={temp[30:0],A[2]};"
                + "\n	if(temp[32]==0)"
                + "\n	begin"
                + "\n		q[3]=0;"
                + "\n		temp=adjust+B;"
                + "\n	end"
                + "\n	else"
                + "\n	begin"
                + "\n		q[3]=1;"
                + "\n		temp=adjust+compliment;"
                + "\n	end"
                + "\n	adjust={temp[30:0],A[1]};"
                + "\n	if(temp[32]==0)"
                + "\n	begin"
                + "\n		q[2]=0;"
                + "\n		temp=adjust+B;"
                + "\n	end"
                + "\n	else"
                + "\n	begin"
                + "\n		q[2]=1;"
                + "\n		temp=adjust+compliment;"
                + "\n	end"
                + "\n	adjust={temp[30:0],A[0]};"
                + "\n	if(temp[32]==0)"
                + "\n	begin"
                + "\n		q[1]=0;"
                + "\n		temp=adjust+B;"
                + "\n	end"
                + "\n	else"
                + "\n	begin"
                + "\n		q[1]=1;"
                + "\n		temp=adjust+compliment;"
                + "\n	end"
                + "\n	if(temp[32]==0)"
                + "\n	begin"
                + "\n		q[0]=0;"
                + "\n	end"
                + "\n	else"
                + "\n	begin"
                + "\n		q[0]=1;"
                + "\n	end"
                + "\ndiv=q;"
                + "\nend"
                + "\nendfunction"
                + "\nalways @(posedge clk)"
                + "\nbegin"
                + "\n	sample_time=32'h" + hexPeriod + "; // 31st bit is integer part and 30 to 0 bit is fraction part"
                + "\n	duty_cycle=32'h" + hexCycle + ";"
                + "\n///////////////////////////////////////////////////////"
                + "\n		out_freq=div(temp1,sample_time);"
                + "\n		total_count=div(in_freq,out_freq);"
                + "\n/////////////////////////////////////////////////////////"
                + "\n		temp3=total_count * duty_cycle;"
                + "\n		temp4=div(temp3,temp2);"
                + "\n		"
                + "\n      if (counter<=temp4)"
                + "\n      begin"
                + "\n				pwm_out <= 1'b1;"
                + "\n				counter=counter+1;"
                + "\n		end"
                + "\n      else if (counter<total_count)"
                + "\n      begin"
                + "\n				pwm_out <= 1'b0;"
                + "\n				counter=counter+1;"
                + "\n      end"
                + "\n		else if (counter>=total_count)"
                + "\n		begin"
                + "\n				counter=0;"
                + "\n		end"
                + "\n		else"
                + "\n		begin"
                + "\n				counter=counter+1;"
                + "\n		end"
                + "\nend"
                + "\nendmodule");

    }

    public void generateDivisionLNS(PrintStream p, String device, long num1, long num2) {
        System.out.println("Coming");
        p.println("// Logarithmic Number System (LNS) Based Arithmetic Operations Using FPGA\n\n");
        p.println("// Device : " + device);
        p.println("// Generated on : " + date);

        p.println("\nmodule lns_division(clk,num1_log,num2_log,diff,div_out);"
                + "\ninput clk;"
                + "\noutput reg[31:0] num1_log,num2_log,diff,div_out;"
                + "\nreg [31:0]numb1,numb2;"
                + "\nreg [31:0] num1_fp,num2_fp;"
                + "\nreg [23:0] write [126:1],write1[126:1];"
                + "\ninitial"
                + "\nbegin"
                + "\n//////////log table(1-126) /////////////////////////////////////////////////////////"
                + "\nwrite[1]=24'h02EB6C;"
                + "\nwrite[2]=24'h05D0FB;"
                + "\nwrite[3]=24'h08B0C5;"
                + "\nwrite[4]=24'h0B8AE1;"
                + "\nwrite[5]=24'h0E5F64;"
                + "\nwrite[6]=24'h112E65;"
                + "\nwrite[7]=24'h13F7F8;"
                + "\nwrite[8]=24'h16BC34;"
                + "\nwrite[9]=24'h197B2B;"
                + "\nwrite[10]=24'h1C34F2;"
                + "\n"
                + "\nwrite[11]=24'h1EE99D;"
                + "\nwrite[12]=24'h21993D;"
                + "\nwrite[13]=24'h2443E7;"
                + "\nwrite[14]=24'h26E9AC;"
                + "\nwrite[15]=24'h298A9E;"
                + "\nwrite[16]=24'h2C26CF;"
                + "\nwrite[17]=24'h2EBE4F;"
                + "\nwrite[18]=24'h315130;"
                + "\nwrite[19]=24'h33DF81;"
                + "\nwrite[20]=24'h366953;"
                + "\n"
                + "\nwrite[21]=24'h38EEB5;"
                + "\nwrite[22]=24'h3B6FB7;"
                + "\nwrite[23]=24'h3DEC69;"
                + "\nwrite[24]=24'h4064D8;"
                + "\nwrite[25]=24'h42D913;"
                + "\nwrite[26]=24'h454929;"
                + "\nwrite[27]=24'h47B527;"
                + "\nwrite[28]=24'h4A1D1B;"
                + "\nwrite[29]=24'h4C8112;"
                + "\nwrite[30]=24'h4EE11A;"
                + "\n"
                + "\nwrite[31]=24'h513D3F;"
                + "\nwrite[32]=24'h53958E;"
                + "\nwrite[33]=24'h55EA14;"
                + "\nwrite[34]=24'h583ADC;"
                + "\nwrite[35]=24'h5A87F3;"
                + "\nwrite[36]=24'h5CD164;"
                + "\nwrite[37]=24'h5F173B;"
                + "\nwrite[38]=24'h615982;"
                + "\nwrite[39]=24'h639846;"
                + "\nwrite[40]=24'h65D391;"
                + "\n"
                + "\nwrite[41]=24'h680B6D;"
                + "\nwrite[42]=24'h6A3FE5;"
                + "\nwrite[43]=24'h6C7104;"
                + "\nwrite[44]=24'h6E9ED3;"
                + "\nwrite[45]=24'h70C95D;"
                + "\nwrite[46]=24'h72F0AB;"
                + "\nwrite[47]=24'h7514C7;"
                + "\nwrite[48]=24'h7735BA;"
                + "\nwrite[49]=24'h79538D;"
                + "\nwrite[50]=24'h7B6E4B;"
                + "\n"
                + "\nwrite[51]=24'h7D85FA;"
                + "\nwrite[52]=24'h7F9AA6;"
                + "\nwrite[53]=24'h81AC55;"
                + "\nwrite[54]=24'h83BB11;"
                + "\nwrite[55]=24'h85C6E2;"
                + "\nwrite[56]=24'h87CFCF;"
                + "\nwrite[57]=24'h89D5E3;"
                + "\nwrite[58]=24'h8BD923;"
                + "\nwrite[59]=24'h8DD999;"
                + "\nwrite[60]=24'h8FD74B;"
                + "\n"
                + "\nwrite[61]=24'h91D242;"
                + "\nwrite[62]=24'h93CA84;"
                + "\nwrite[63]=24'h95C01A;"
                + "\nwrite[64]=24'h97B30A;"
                + "\nwrite[65]=24'h99A35B;"
                + "\nwrite[66]=24'h9B9115;"
                + "\nwrite[67]=24'h9D7C3F;"
                + "\nwrite[68]=24'h9F64DE;"
                + "\nwrite[69]=24'hA14AFB;"
                + "\nwrite[70]=24'hA32E9B;"
                + "\n"
                + "\nwrite[71]=24'hA50FC5;"
                + "\nwrite[72]=24'hA6EE7F;"
                + "\nwrite[73]=24'hA8CAD0;"
                + "\nwrite[74]=24'hAAA4BD;"
                + "\nwrite[75]=24'hAC7C4E;"
                + "\nwrite[76]=24'hAE5187;"
                + "\nwrite[77]=24'hB02470;"
                + "\nwrite[78]=24'hB1F50C;"
                + "\nwrite[79]=24'hB3C364;"
                + "\nwrite[80]=24'hB58F7B;"
                + "\n"
                + "\nwrite[81]=24'hB75958;"
                + "\nwrite[82]=24'hB92100;"
                + "\nwrite[83]=24'hBAE678;"
                + "\nwrite[84]=24'hBCA9C6;"
                + "\nwrite[85]=24'hBE6AF0;"
                + "\nwrite[86]=24'hC029FA;"
                + "\nwrite[87]=24'hC1E6E9;"
                + "\nwrite[88]=24'hC3A1C3;"
                + "\nwrite[89]=24'hC55A8C;"
                + "\nwrite[90]=24'hC7114A;"
                + "\n"
                + "\nwrite[91]=24'hC8C601;"
                + "\nwrite[92]=24'hCA78B5;"
                + "\nwrite[93]=24'hCC296D;"
                + "\nwrite[94]=24'hCDD82C;"
                + "\nwrite[95]=24'hCF84F7;"
                + "\nwrite[96]=24'hD12FD2;"
                + "\nwrite[97]=24'hD2D8C2;"
                + "\nwrite[98]=24'hD47FCB;"
                + "\nwrite[99]=24'hD624F2;"
                + "\nwrite[100]=24'hD7C83B;"
                + "\n"
                + "\nwrite[101]=24'hD969AA;"
                + "\nwrite[102]=24'hDB0943;"
                + "\nwrite[103]=24'hDCA70A;"
                + "\nwrite[104]=24'hDE4304;"
                + "\nwrite[105]=24'hDFDD35;"
                + "\nwrite[106]=24'hE175A0;"
                + "\nwrite[107]=24'hE30C49;"
                + "\nwrite[108]=24'hE4A134;"
                + "\nwrite[109]=24'hE63465;"
                + "\nwrite[110]=24'hE7C5E0;"
                + "\n"
                + "\nwrite[111]=24'hE955A9;"
                + "\nwrite[112]=24'hEAE3C2;"
                + "\nwrite[113]=24'hEC7030;"
                + "\nwrite[114]=24'hEDFAF7;"
                + "\nwrite[115]=24'hEF8419;"
                + "\nwrite[116]=24'hF10B9A;"
                + "\nwrite[117]=24'hF2917E;"
                + "\nwrite[118]=24'hF415C8;"
                + "\nwrite[119]=24'hF5987C;"
                + "\nwrite[120]=24'hF7199D;"
                + "\n"
                + "\nwrite[121]=24'hF8992D;"
                + "\nwrite[122]=24'hFA1731;"
                + "\nwrite[123]=24'hFB93AB;"
                + "\nwrite[124]=24'hFD0E9F;"
                + "\nwrite[125]=24'hFE880F;"
                + "\nwrite[126]=24'h010000;"
                + "\n/////////////////////////////////////////////////////////////////"
                + "\n///////////////////////antilog table(1-126)///////////////////////////"
                + "\nwrite1[1]=24'h016984;"
                + "\nwrite1[2]=24'h02D506;"
                + "\nwrite1[3]=24'h04428C;"
                + "\nwrite1[4]=24'h05B214;"
                + "\nwrite1[5]=24'h0723A4;"
                + "\nwrite1[6]=24'h08973E;"
                + "\nwrite1[7]=24'h0A0CE4;"
                + "\nwrite1[8]=24'h0B849A;"
                + "\nwrite1[9]=24'h0CFE63;"
                + "\nwrite1[10]=24'h0E7A41;"
                + "\n"
                + "\nwrite1[11]=24'h0FF837;"
                + "\nwrite1[12]=24'h117849;"
                + "\nwrite1[13]=24'h12FA79;"
                + "\nwrite1[14]=24'h147ECB;"
                + "\nwrite1[15]=24'h160541;"
                + "\nwrite1[16]=24'h178DDE;"
                + "\nwrite1[17]=24'h1918A6;"
                + "\nwrite1[18]=24'h1AA59C;"
                + "\nwrite1[19]=24'h1C34C2;"
                + "\nwrite1[20]=24'h1DC61B;"
                + "\n"
                + "\nwrite1[21]=24'h1F59AC;"
                + "\nwrite1[22]=24'h20EF76;"
                + "\nwrite1[23]=24'h22877D;"
                + "\nwrite1[24]=24'h2421C5;"
                + "\nwrite1[25]=24'h25BE50;"
                + "\nwrite1[26]=24'h275D21;"
                + "\nwrite1[27]=24'h28FE3D;"
                + "\nwrite1[28]=24'h2AA1A5;"
                + "\nwrite1[29]=24'h2C475E;"
                + "\nwrite1[30]=24'h2DEF6A;"
                + "\n"
                + "\nwrite1[31]=24'h2F99CD;"
                + "\nwrite1[32]=24'h31468A;"
                + "\nwrite1[33]=24'h32F5A5;"
                + "\nwrite1[34]=24'h34A720;"
                + "\nwrite1[35]=24'h365B00;"
                + "\nwrite1[36]=24'h381147;"
                + "\nwrite1[37]=24'h39C9F9;"
                + "\nwrite1[38]=24'h3B8519;"
                + "\nwrite1[39]=24'h3D42AB;"
                + "\nwrite1[40]=24'h3F02B3;"
                + "\n"
                + "\nwrite1[41]=24'h40C533;"
                + "\nwrite1[42]=24'h428A2F;"
                + "\nwrite1[43]=24'h4451AB;"
                + "\nwrite1[44]=24'h461BAA;"
                + "\nwrite1[45]=24'h47E830;"
                + "\nwrite1[46]=24'h49B740;"
                + "\nwrite1[47]=24'h4B88DF;"
                + "\nwrite1[48]=24'h4D5D0E;"
                + "\nwrite1[49]=24'h4F33D3;"
                + "\nwrite1[50]=24'h510D31;"
                + "\n"
                + "\nwrite1[51]=24'h52E92B;"
                + "\nwrite1[52]=24'h54C7C6;"
                + "\nwrite1[53]=24'h56A904;"
                + "\nwrite1[54]=24'h588CEA;"
                + "\nwrite1[55]=24'h5A737B;"
                + "\nwrite1[56]=24'h5C5CBB;"
                + "\nwrite1[57]=24'h5E48AE;"
                + "\nwrite1[58]=24'h603758;"
                + "\nwrite1[59]=24'h6228BD;"
                + "\nwrite1[60]=24'h641CE0;"
                + "\n"
                + "\nwrite1[61]=24'h6613C5;"
                + "\nwrite1[62]=24'h680D70;"
                + "\nwrite1[63]=24'h6A09E6;"
                + "\nwrite1[64]=24'h6C0929;"
                + "\nwrite1[65]=24'h6E0B3F;"
                + "\nwrite1[66]=24'h70102A;"
                + "\nwrite1[67]=24'h7217F0;"
                + "\nwrite1[68]=24'h742293;"
                + "\nwrite1[69]=24'h763019;"
                + "\nwrite1[70]=24'h784085;"
                + "\n"
                + "\nwrite1[71]=24'h7A53DA;"
                + "\nwrite1[72]=24'h7C6A1F;"
                + "\nwrite1[73]=24'h7E8355;"
                + "\nwrite1[74]=24'h809F83;"
                + "\nwrite1[75]=24'h82BEAB;"
                + "\nwrite1[76]=24'h84E0D2;"
                + "\nwrite1[77]=24'h8705FD;"
                + "\nwrite1[78]=24'h892E2F;"
                + "\nwrite1[79]=24'h8B596C;"
                + "\nwrite1[80]=24'h8D87BA;"
                + "\n"
                + "\nwrite1[81]=24'h8FB91D;"
                + "\nwrite1[82]=24'h91ED98;"
                + "\nwrite1[83]=24'h942530;"
                + "\nwrite1[84]=24'h965FEA;"
                + "\nwrite1[85]=24'h989DCA;"
                + "\nwrite1[86]=24'h9ADED4;"
                + "\nwrite1[87]=24'h9D230D;"
                + "\nwrite1[88]=24'h9F6A79;"
                + "\nwrite1[89]=24'hA1B51E;"
                + "\nwrite1[90]=24'hA402FE;"
                + "\n"
                + "\nwrite1[91]=24'hA65420;"
                + "\nwrite1[92]=24'hA8A888;"
                + "\nwrite1[93]=24'hAB0039;"
                + "\nwrite1[94]=24'hAD5B3A;"
                + "\nwrite1[95]=24'hAFB98E;"
                + "\nwrite1[96]=24'hB21B3A;"
                + "\nwrite1[97]=24'hB48043;"
                + "\nwrite1[98]=24'hB6E8AE;"
                + "\nwrite1[99]=24'hB95480;"
                + "\nwrite1[100]=24'hBBC3BD;"
                + "\n"
                + "\nwrite1[101]=24'hBE366A;"
                + "\nwrite1[102]=24'hC0AC8B;"
                + "\nwrite1[103]=24'hC32627;"
                + "\nwrite1[104]=24'hC5A342;"
                + "\nwrite1[105]=24'hC823E0;"
                + "\nwrite1[106]=24'hCAA807;"
                + "\nwrite1[107]=24'hCD2FBB;"
                + "\nwrite1[108]=24'hCFBB03;"
                + "\nwrite1[109]=24'hD249E2;"
                + "\nwrite1[110]=24'hD4DC5D;"
                + "\n"
                + "\nwrite1[111]=24'hD7727B;"
                + "\nwrite1[112]=24'hDA0C40;"
                + "\nwrite1[113]=24'hDCA9B0;"
                + "\nwrite1[114]=24'hDF4AD3;"
                + "\nwrite1[115]=24'hE1EFAB;"
                + "\nwrite1[116]=24'hE49840;"
                + "\nwrite1[117]=24'hE74496;"
                + "\nwrite1[118]=24'hE9F4B2;"
                + "\nwrite1[119]=24'hECA89A;"
                + "\nwrite1[120]=24'hEF6053;"
                + "\n"
                + "\nwrite1[121]=24'hF21BE2;"
                + "\nwrite1[122]=24'hF4DB4E;"
                + "\nwrite1[123]=24'hF79E9A;"
                + "\nwrite1[124]=24'hFA65CE;"
                + "\nwrite1[125]=24'hFD30EE;"
                + "\nwrite1[126]=24'h000001;"
                + "\nend"
                + "\n///////////////////////////////////////////////////////////////////////////////////"
                + "\n//////////////////////////////////////////////////////////////////////////////////"
                + "\nfunction [31:0] fix_ft;"
                + "\ninput [31:0] inp;"
                + "\nreg [31:0] ans;"
                + "\nreg [22:0] outp;"
                + "\nreg [7:0] exponent;"
                + "\nreg [31:0] num;"
                + "\nreg signbit;"
                + "\nbegin"
                + "\n"
                + "\n	if(inp[31]==1)"
                + "\n	begin"
                + "\n	signbit=1;"
                + "\n	num=(32'h7FFFFFFF-inp)+1;"
                + "\n	end"
                + "\n"
                + "\n	else if (inp[31]==0)"
                + "\n	begin"
                + "\n	signbit=0;"
                + "\n	num=inp;"
                + "\n	end"
                + "\n"
                + "\n"
                + "\n	if (num[30:23]!==8'd00)"
                + "\n	begin"
                + "\n"
                + "\n		if(num[30]==1)"
                + "\n		begin"
                + "\n		outp=num >> 7;"
                + "\n		exponent=7;"
                + "\n		end"
                + "\n"
                + "\n		else if(num[29]==1)"
                + "\n		begin"
                + "\n		outp=num >> 6;"
                + "\n		exponent=6;"
                + "\n		end"
                + "\n"
                + "\n		else if(num[28]==1)"
                + "\n		begin"
                + "\n		outp=num >> 5;"
                + "\n		exponent=5;"
                + "\n		end"
                + "\n"
                + "\n		else if(num[27]==1)"
                + "\n		begin"
                + "\n		outp=num >> 4;"
                + "\n		exponent=4;"
                + "\n		end"
                + "\n"
                + "\n		else if(num[26]==1)"
                + "\n		begin"
                + "\n		outp=num >> 3;"
                + "\n		exponent=3;"
                + "\n		end"
                + "\n"
                + "\n		else if(num[25]==1)"
                + "\n		begin"
                + "\n		outp=num >> 2;"
                + "\n		exponent=2;"
                + "\n		end"
                + "\n"
                + "\n		else if(num[24]==1)"
                + "\n		begin"
                + "\n		outp=num >> 1;"
                + "\n		exponent=1;"
                + "\n		end"
                + "\n"
                + "\n		else if(num[23]==1)"
                + "\n		begin"
                + "\n		outp=num ;"
                + "\n		exponent=0;"
                + "\n		end"
                + "\n"
                + "\n	end"
                + "\n"
                + "\n	else if (num[30:23]==8'd00)"
                + "\n	begin"
                + "\n"
                + "\n		if (num[22:0]==0)"
                + "\n				begin"
                + "\n				outp=0;"
                + "\n				exponent=0;"
                + "\n				end"
                + "\n		else"
                + "\n		begin"
                + "\n		"
                + "\n		if(num[22]==1)"
                + "\n		begin"
                + "\n		outp=num << 1;"
                + "\n		exponent=-1;"
                + "\n		end"
                + "\n	"
                + "\n		else if(num[21]==1)"
                + "\n		begin"
                + "\n		outp=num << 2;"
                + "\n		exponent=-2;"
                + "\n		end"
                + "\n"
                + "\n		else if(num[20]==1)"
                + "\n		begin"
                + "\n		outp=num << 3;"
                + "\n		exponent=-3;"
                + "\n		end"
                + "\n	"
                + "\n		else if(num[19]==1)"
                + "\n		begin"
                + "\n		outp=num << 4;"
                + "\n		exponent=-4;"
                + "\n		end"
                + "\n	"
                + "\n		else if(num[18]==1)"
                + "\n		begin"
                + "\n		outp=num << 5;"
                + "\n		exponent=-5;"
                + "\n		end	"
                + "\n	"
                + "\n		else if(num[17]==1)"
                + "\n		begin"
                + "\n		outp=num << 6;"
                + "\n		exponent=-6;"
                + "\n		end"
                + "\n	"
                + "\n		else if(num[16]==1)"
                + "\n		begin"
                + "\n		outp=num << 7;"
                + "\n		exponent=-7;"
                + "\n		end"
                + "\n	"
                + "\n		else if(num[15]==1)"
                + "\n		begin"
                + "\n		outp=num <<8;"
                + "\n		exponent=-8;"
                + "\n		end"
                + "\n	"
                + "\n		else if(num[14]==1)"
                + "\n		begin"
                + "\n		outp=num << 9;"
                + "\n		exponent=-9;"
                + "\n		end"
                + "\n	"
                + "\n		else if(num[13]==1)"
                + "\n		begin"
                + "\n		outp=num<< 10 ;"
                + "\n		exponent=-10;"
                + "\n		end"
                + "\n	"
                + "\n		else if(num[12]==1)"
                + "\n		begin"
                + "\n		outp=num<< 11 ;"
                + "\n		exponent=-11;"
                + "\n		end"
                + "\n"
                + "\n	"
                + "\n		else if(num[11]==1)"
                + "\n		begin"
                + "\n		outp=num<< 12 ;"
                + "\n		exponent=-12;"
                + "\n		end"
                + "\n	"
                + "\n		else if(num[10]==1)"
                + "\n		begin"
                + "\n		outp=num<< 13 ;"
                + "\n		exponent=-13;"
                + "\n		end"
                + "\n"
                + "\n		else if(num[9]==1)"
                + "\n		begin"
                + "\n		outp=num<< 14 ;"
                + "\n		exponent=-14;"
                + "\n		end"
                + "\n"
                + "\n		else if(num[8]==1)"
                + "\n		begin"
                + "\n		outp=num << 15 ;"
                + "\n		exponent=-15;"
                + "\n		end"
                + "\n"
                + "\n		else if(num[7]==1)"
                + "\n		begin"
                + "\n		outp=num << 16;"
                + "\n		exponent=-16;"
                + "\n		end"
                + "\n	"
                + "\n		else if(num[6]==1)"
                + "\n		begin"
                + "\n		outp=num << 17;"
                + "\n		exponent=-17;"
                + "\n		end"
                + "\n"
                + "\n		else if(num[5]==1)"
                + "\n		begin"
                + "\n		outp=num << 18;"
                + "\n		exponent=-18;"
                + "\n		end"
                + "\n"
                + "\n		else if(num[4]==1)"
                + "\n		begin"
                + "\n		outp=num << 19;"
                + "\n		exponent=-19;"
                + "\n		end"
                + "\n"
                + "\n		else if(num[3]==1)"
                + "\n		begin"
                + "\n		outp=num << 20;"
                + "\n		exponent=-20;"
                + "\n		end"
                + "\n		"
                + "\n		else if(num[2]==1)"
                + "\n		begin"
                + "\n		outp=num << 21;"
                + "\n		exponent=-21;"
                + "\n		end"
                + "\n	"
                + "\n		else if(num[1]==1)"
                + "\n		begin"
                + "\n		outp=num << 22;"
                + "\n		exponent=-22;"
                + "\n		end"
                + "\n	"
                + "\n	"
                + "\n		else if(num[0]==1)"
                + "\n		begin"
                + "\n		outp=num << 23;"
                + "\n		exponent=-23;"
                + "\n		end"
                + "\n"
                + "\n"
                + "\n		end 	"
                + "\n"
                + "\n	end		"
                + "\n"
                + "\n	if (num[22:0]==0 && num[30:23]==0)"
                + "\n	ans=32'd00000000;"
                + "\n	else"
                + "\n	begin"
                + "\nans[31]=signbit;"
                + "\nans[30:23]=exponent+8'd127;"
                + "\nans[22:0]=outp;"
                + "\n	end"
                + "\nfix_ft=ans;"
                + "\nend"
                + "\nendfunction"
                + "\n/////////////////////////////////////////////////////////////////////////////////////////////////"
                + "\nfunction [31:0] ft2_fix;"
                + "\ninput[31:0] num;"
                + "\nreg [7:0] exp;"
                + "\nbegin"
                + "\nft2_fix=0;"
                + "\nif (num[30:23]>=8'd127)"
                + "\nbegin"
                + "\nnum=num;"
                + "\nft2_fix[31]=num[31];"
                + "\nexp=num[30:23]-8'd127;"
                + "\nft2_fix[23]=1;"
                + "\nft2_fix[22:0]=num[22:0];"
                + "\nft2_fix=ft2_fix << exp;"
                + "\nend"
                + "\nelse"
                + "\nbegin"
                + "\nnum=num;"
                + "\nft2_fix[31]=num[31];"
                + "\nexp=8'd127-num[30:23];"
                + "\nft2_fix[23]=1;"
                + "\nft2_fix[22:0]=num[22:0];"
                + "\nft2_fix=ft2_fix >> exp;"
                + "\nend"
                + "\nif (num[31]==1)"
                + "\nbegin"
                + "\nft2_fix=~ft2_fix+1;"
                + "\nend"
                + "\nend"
                + "\nendfunction"
                + "\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////"
                + "\nfunction [31:0] log_greater1;"
                + "\ninput [31:0] num;"
                + "\nreg   [22:0] man;"
                + "\nreg    [7:0] exponent;"
                + "\nreg   [23:0] man_log;"
                + "\nreg   [31:0] alog;"
                + "\nreg          signbit;"
                + "\n"
                + "\nbegin"
                + "\n	signbit=num[31];"
                + "\n	exponent=num[31:23]-8'd127;"
                + "\n	man=num[22:0];"
                + "\n	if (man==0)"
                + "\n	begin"
                + "\n	man_log = 23'h0;"
                + "\n	end"
                + "\n	else"
                + "\n	begin"
                + "\n	man_log=write[man[22:16]];"
                + "\n	end"
                + "\n	alog[31:24]=exponent;"
                + "\n   alog[23:0]=man_log;"
                + "\n	log_greater1=alog[31:0];"
                + "\nend"
                + "\nendfunction"
                + "\n////////////////////////////////////////////////////////////////////////////////////"
                + "\nfunction [31:0] log_less1;"
                + "\ninput [31:0] num;"
                + "\nreg   [31:0] num_d;"
                + "\nbegin"
                + "\n	num=ft2_fix(num);"
                + "\nif(num<32'h00800000)//1"
                + "\n	begin"
                + "\n   num=num*10;"
                + "\n	num_d=1;"
                + "\n	end"
                + "\n if(num<32'h00800000)//2"
                + "\n	begin"
                + "\n   num=num*10;"
                + "\n	num_d=2;"
                + "\n	end"
                + "\n if(num<32'h00800000)//3"
                + "\n	begin"
                + "\n   num=num*10;"
                + "\n	num_d=3;"
                + "\n	end"
                + "\n if(num<32'h00800000)//4"
                + "\n	begin"
                + "\n	num=num*10;"
                + "\n	num_d=4;"
                + "\n	end"
                + "\n if(num<32'h00800000)//5"
                + "\n	begin"
                + "\n	num=num*10;"
                + "\n	num_d=5;"
                + "\n	end"
                + "\n if(num<32'h00800000)//6"
                + "\n	begin"
                + "\n	num=num*10;"
                + "\n	num_d=6;"
                + "\n	end"
                + "\n if(num<32'h00800000)//7"
                + "\n	begin"
                + "\n   num=num*10;"
                + "\n	num_d=7;"
                + "\n	end"
                + "\n   num=fix_ft(num);"
                + "\nlog_less1=(num_d*32'h0353958E)-log_greater1(num);"
                + "\nend"
                + "\nendfunction"
                + "\n/////////////////////////////////////////////////////////////////////////////////////	"
                + "\nfunction [31:0] log;"
                + "\ninput[31:0]num;"
                + "\n"
                + "\nbegin"
                + "\n   if(num[31]==1)"
                + "\n   begin"
                + "\n   num={1'b0,num[30:0]};"
                + "\n   end"
                + "\n   else"
                + "\n   begin"
                + "\n   num=num;"
                + "\n   end"
                + "\n"
                + "\n    if (num<32'h3F800000)"
                + "\n    begin"
                + "\n    log=log_less1(num);"
                + "\n    end"
                + "\n    else"
                + "\n    begin"
                + "\n    log=log_greater1(num);"
                + "\n    end"
                + "\nend"
                + "\nendfunction"
                + "\n"
                + "\n/////////////////////////////////////////////////////////////////////////////////////////"
                + "\nfunction [31:0] diff_log;"
                + "\ninput [31:0] num1_log,num2_log;"
                + "\nreg   [31:0] num1_fp1,num2_fp2,num22_log,num_log;//num1_log,num2_log,num_log,"
                + "\nreg          signbit1,signbit2;"
                + "\n"
                + "\nbegin"
                + "\n"
                + "\n    if(num1_fp[31]==1)"
                + "\n       begin"
                + "\n       num1_fp1={num1_fp[31],num1_fp[30:0]};"
                + "\n       end"
                + "\n    else if(num2_fp2[31]==1)"
                + "\n       begin"
                + "\n       num2_fp2={1'b0,num2_fp[30:0]};"
                + "\n       end"
                + "\n"
                + "\nif(({1'b0,num1_fp[30:0]}>32'h3F800000 && {1'b0,num2_fp[30:0]}<32'h3F800000)||({1'b0,num2_fp[30:0]}>32'h3F800000 && {1'b0,num1_fp[30:0]}<32'h3F800000))"
                + "\n	begin"
                + "\n    diff_log=num1_log+num2_log;"
                + "\n	 end"
                + "\n"
                + "\nelse if (((num1_fp && num2_fp)>=32'h3F800000)||((num1_fp && num2_fp)<=32'h3F800000))"
                + "\nbegin"
                + "\n"
                + "\n    signbit1=num1_fp[31];"
                + "\n    signbit2=num2_fp[31];"
                + "\n    if ((signbit1==0)&(signbit2==0)) "
                + "\n        begin"
                + "\n        if (num1_log>=num2_log)"
                + "\n           begin"
                + "\n           num22_log=~num2_log+1;"
                + "\n           num_log=num1_log+num22_log;"
                + "\n           end"
                + "\n        if(num2_log>num1_log)"
                + "\n           begin"
                + "\n           num22_log=~num2_log+1;"
                + "\n           num_log=num1_log+num22_log;"
                + "\n           num_log=~num_log+1;"
                + "\n           end"
                + "\n        end"
                + "\n"
                + "\n"
                + "\n      if ((signbit1==1)&(signbit2==1)) "
                + "\n         begin"
                + "\n         if (num1_log>=num2_log)"
                + "\n            begin"
                + "\n            num_log=num1_log-num2_log;"
                + "\n            end "
                + "\n         if(num2_log>num1_log)"
                + "\n            begin"
                + "\n            num_log=num2_log-num1_log;"
                + "\n            end"
                + "\n       end"
                + "\n"
                + "\n       if((signbit1==1)&(signbit2==0))"
                + "\n          begin"
                + "\n          if (num1_log>=num2_log)"
                + "\n              begin"
                + "\n              num_log=num1_log-num2_log;"
                + "\n              end"
                + "\n          if(num2_log>num1_log)"
                + "\n              begin"
                + "\n              num_log=num2_log-num1_log;"
                + "\n              end"
                + "\n          end"
                + "\n"
                + "\n        if((signbit1==0)&(signbit2==1))"
                + "\n           begin"
                + "\n           if(num2_log>num1_log)"
                + "\n              begin"
                + "\n              num_log=num2_log-num1_log;"
                + "\n              end"
                + "\n           else if(num1_log>=num2_log)"
                + "\n              begin"
                + "\n              num_log=num1_log-num2_log;"
                + "\n              end"
                + "\n           end "
                + "\n         diff_log=num_log;"
                + "\n   end"
                + "\n"
                + "\nelse if(num1_log == num2_log)"
                + "\n     begin"
                + "\n     diff_log=32'h00000000;"
                + "\n     end"
                + "\n"
                + "\nend"
                + "\nendfunction"
                + "\n"
                + "\n//////////////////////////////////////////////////////////////////////////////////////////////////"
                + "\nfunction [31:0] antilog;"
                + "\ninput [31:0] num;"
                + "\nreg [23:0] man;"
                + "\nreg [7:0] exponent,alog_exp;"
                + "\nreg [23:0] man_antilog,alog_man;"
                + "\nreg [31:0]alog,ans_anti;"
                + "\n"
                + "\nbegin"
                + "\nif (num==0)"
                + "\nbegin"
                + "\n	antilog=32'h01000000;"
                + "\nend"
                + "\nelse if((num1_fp<32'h3F800000 && num2_fp<32'h3F800000)||({num1_fp[31],num1_fp[30:0]}<32'h3F800000 && {1'b0,num2_fp[30:0]}<32'h3F800000)||((num1_fp==32'h3F800000 && num2_fp<32'h3F800000)|| (num2_fp==32'h3F800000 && num1_fp<32'h3F800000)))"
                + "\nbegin"
                + "\nif(num1_log >= num2_log)"
                + "\nbegin"
                + "\nexponent=num[31:24];"
                + "\nman=num[23:0];"
                + "\n"
                + "\nif (man==0)"
                + "\nbegin"
                + "\n   exponent=exponent+1;"
                + "\n   man=24'b000000000000000000000001-man;"
                + "\n	man_antilog =24'h0; "
                + "\n	ans_anti={8'h01,man_antilog};"
                + "\n	alog=ans_anti/(2**(exponent-1));"
                + "\n	antilog=alog;"
                + "\nend"
                + "\n"
                + "\nelse if (num[31:24]==0)"
                + "\nbegin"
                + "\n   exponent=exponent+1;"
                + "\n   man=24'b000000000000000000000001-man;"
                + "\n	man_antilog=write1[man[23:17]];"
                + "\n	ans_anti={8'h01,man_antilog};"
                + "\n	alog=ans_anti/(2**exponent);"
                + "\n	antilog=alog;"
                + "\nend"
                + "\n	else"
                + "\nbegin"
                + "\n   exponent=exponent+1;"
                + "\n   man=24'b000000000000000000000001-man;"
                + "\n	man_antilog=write1[man[23:17]];"
                + "\n	ans_anti={8'h01,man_antilog};"
                + "\n	alog=ans_anti/(2**exponent);"
                + "\n	antilog=alog;"
                + "\nend"
                + "\n"
                + "\nend"
                + "\nelse if(num2_log > num1_log)"
                + "\nbegin"
                + "\n"
                + "\n	exponent=num[31:24];"
                + "\n	man=num[23:0];	"
                + "\n	if (man==0)///man=0"
                + "\nbegin"
                + "\n	man_antilog = 24'h0;"
                + "\n	alog_exp =2**exponent;"
                + "\n	antilog={alog_exp,man_antilog};"
                + "\nend"
                + "\n"
                + "\nelse if (num[31:24]==0)///exp=0"
                + "\nbegin"
                + "\n	man_antilog=write1[man[23:17]];"
                + "\n	ans_anti={8'h01,man_antilog};"
                + "\n	alog=2**exponent*ans_anti;"
                + "\n	alog_exp=2**exponent;"
                + "\n	alog_man=alog[23:0];"
                + "\n	antilog={alog};"
                + "\nend"
                + "\n	else"
                + "\nbegin"
                + "\n	man_antilog=write1[man[23:17]];"
                + "\n   ans_anti={8'h01,man_antilog};"
                + "\n	alog=2**exponent*ans_anti;"
                + "\n	antilog={alog};"
                + "\n	"
                + "\nend	"
                + "\nend"
                + "\nend"
                + "\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////"
                + "\nelse"
                + "\nbegin"
                + "\nif((num1_fp[31]==1 && num2_fp[31]==0)&&(num2_log>num1_log)||(((num1_fp[31] && num2_fp[31])==1)&&(num2_log>num1_log))||(num2_log>num1_log))"
                + "\nbegin"
                + "\nexponent=num[31:24];"
                + "\nman=num[23:0];"
                + "\n"
                + "\nif (man==0)"
                + "\nbegin"
                + "\n   exponent=exponent+1;"
                + "\n   man=24'b000000000000000000000001-man;"
                + "\n	man_antilog =24'h0; "
                + "\n	ans_anti={8'h01,man_antilog};"
                + "\n	alog=ans_anti/(2**(exponent-1));"
                + "\n	antilog=alog;"
                + "\nend"
                + "\n"
                + "\nelse if (num[31:24]==0)"
                + "\nbegin"
                + "\n   exponent=exponent+1;"
                + "\n   man=24'b000000000000000000000001-man;"
                + "\n	man_antilog=write1[man[23:17]];"
                + "\n	ans_anti={8'h01,man_antilog};"
                + "\n	alog=ans_anti/(2**exponent);"
                + "\n	antilog=alog;"
                + "\nend"
                + "\n	else"
                + "\nbegin"
                + "\n   exponent=exponent+1;"
                + "\n   man=24'b000000000000000000000001-man;"
                + "\n	man_antilog=write1[man[23:17]];"
                + "\n	ans_anti={8'h01,man_antilog};"
                + "\n	alog=ans_anti/(2**exponent);"
                + "\n	antilog=alog;"
                + "\nend"
                + "\n"
                + "\nend"
                + "\n"
                + "\nelse if((num1_fp[31]==1 && num2_fp[31]==0)&&(num1_log>num2_log)||(num1_fp[31]==1 && num2_fp[31]==1)&&(num1_log>num2_log)||(num1_log>num2_log))"
                + "\n"
                + "\nbegin"
                + "\n"
                + "\n	exponent=num[31:24];"
                + "\n	man=num[23:0];	"
                + "\n	if (man==0)///man=0"
                + "\nbegin"
                + "\n	man_antilog = 24'h0;"
                + "\n	alog_exp =2**exponent;"
                + "\n	antilog={alog_exp,man_antilog};"
                + "\nend"
                + "\n"
                + "\nelse if (num[31:24]==0)///exp=0"
                + "\nbegin"
                + "\n	man_antilog=write1[man[23:17]];"
                + "\n	ans_anti={8'h01,man_antilog};"
                + "\n	alog=2**exponent*ans_anti;"
                + "\n	alog_exp=2**exponent;"
                + "\n	alog_man=alog[23:0];"
                + "\n	antilog={alog};"
                + "\nend"
                + "\n	else"
                + "\nbegin"
                + "\n	man_antilog=write1[man[23:17]];"
                + "\n   ans_anti={8'h01,man_antilog};"
                + "\n	alog=2**exponent*ans_anti;"
                + "\n	antilog={alog};"
                + "\n	"
                + "\nend	"
                + "\nend"
                + "\nelse if(num1_log==num2_log)"
                + "\nbegin"
                + "\nexponent=num[31:24];"
                + "\nman=num[23:0];"
                + "\nif(num1_fp>num2_fp)"
                + "\nbegin"
                + "\n"
                + "\nif (man==0)///man=0"
                + "\nbegin"
                + "\n	man_antilog = 24'h0;"
                + "\n	alog_exp =2**exponent;"
                + "\n	antilog={alog_exp,man_antilog};"
                + "\nend"
                + "\n"
                + "\nelse if (num[31:24]==0)///exp=0"
                + "\nbegin"
                + "\n	man_antilog=write1[man[23:17]];"
                + "\n	ans_anti={8'h01,man_antilog};"
                + "\n	alog=2**exponent*ans_anti;"
                + "\n	alog_exp=2**exponent;"
                + "\n	alog_man=alog[23:0];"
                + "\n	antilog={alog};"
                + "\nend"
                + "\n	else"
                + "\nbegin"
                + "\n	man_antilog=write1[man[23:17]];"
                + "\n   ans_anti={8'h01,man_antilog};"
                + "\n	alog=2**exponent*ans_anti;"
                + "\n	antilog={alog};	"
                + "\nend	"
                + "\nend //if(num1_fp>num2_fp)"
                + "\n"
                + "\nelse"
                + "\nbegin"
                + "\nif (man==0)"
                + "\nbegin"
                + "\n   exponent=exponent+1;"
                + "\n   man=24'b000000000000000000000001-man;"
                + "\n	man_antilog =24'h0; "
                + "\n	ans_anti={8'h01,man_antilog};"
                + "\n	alog=ans_anti/(2**(exponent-1));"
                + "\n	antilog=alog;"
                + "\nend"
                + "\n"
                + "\nelse if (num[31:24]==0)"
                + "\nbegin"
                + "\n   exponent=exponent+1;"
                + "\n   man=24'b000000000000000000000001-man;"
                + "\n	man_antilog=write1[man[23:17]];"
                + "\n	ans_anti={8'h01,man_antilog};"
                + "\n	alog=ans_anti/(2**exponent);"
                + "\n	antilog=alog;"
                + "\nend"
                + "\n	else"
                + "\nbegin"
                + "\n   exponent=exponent+1;"
                + "\n   man=24'b000000000000000000000001-man;"
                + "\n	man_antilog=write1[man[23:17]];"
                + "\n	ans_anti={8'h01,man_antilog};"
                + "\n	alog=ans_anti/(2**exponent);"
                + "\n	antilog=alog;"
                + "\nend"
                + "\n"
                + "\n"
                + "\nend////else"
                + "\n"
                + "\nend"
                + "\nend"
                + "\n"
                + "\nend"
                + "\nendfunction"
                + "\n////////////////////////////////////////////////////////////////////////////////////////////	"
                + "\nfunction [31:0] division;"
                + "\ninput    [31:0] num1_fp,num2_fp;"
                + "\nreg             signbit1,signbit2;"
                + "\nbegin"
                + "\nnum1_log = log(num1_fp);"
                + "\nnum2_log = log(num2_fp);"
                + "\ndiff     = diff_log(num1_log,num2_log);"
                + "\ndivision = antilog(diff);"
                + "\n"
                + "\n    signbit1 = numb1[31];"
                + "\n    signbit2 = numb2[31];"
                + "\n"
                + "\n     if ((signbit1==0 & signbit2==0)||(signbit1==1 & signbit2==1))"
                + "\n        begin"
                + "\n        division={1'b0,division[31:24],division[23:1]} ;"
                + "\n        division=fix_ft(division);"
                + "\n        end"
                + "\n     else if ((signbit1==0 & signbit2==1)||(signbit1==1 & signbit2==0))"
                + "\n        begin"
                + "\n        division={1'b1,division[31:24],division[23:1]} ;"
                + "\n        division=(32'h7FFFFFFF-division)+1;"
                + "\n        division=fix_ft(division);"
                + "\n        end"
                + "\nend	"
                + "\nendfunction"
                + "\n//////////////////////////////////////////////////////////////////////////////////////////////////"
                + "\nalways @(posedge clk)"
                + "\nbegin"
                + "\nnumb1=32'd" + num1 + ";"
                + "\nnumb2=32'd" + num2 + ";"
                + "\nnum1_fp  = fix_ft(numb1);"
                + "\nnum2_fp  = fix_ft(numb2);"
                + "\ndiv_out  = division(num1_fp,num2_fp);"
                + "\nend"
                + "\nendmodule");

    }

    public void generateSquareRootLNS(PrintStream p, String device, long num) {
        System.out.println("Coming");
        p.println("// Logarithmic Number System (LNS) Based Arithmetic Operations Using FPGA\n\n");
        p.println("// Device : " + device);
        p.println("// Generated on : " + date);

        p.println("\nmodule lns_sqrt(clk,num_log,s_root);"
                + "\ninput clk;"
                + "\nreg [31:0] numb;"
                + "\noutput reg [31:0] num_log,s_root;"
                + "\nreg [31:0] num_fp;"
                + "\nreg signbit;"
                + "\nreg [23:0] write [126:0],write1[126:0];"
                + "\ninitial"
                + "\nbegin"
                + "\n//////////log table(1-126)new /////////////////////////////////////////////////////////"
                + "\nwrite[1]=24'h02EB6C;"
                + "\nwrite[2]=24'h05D0FB;"
                + "\nwrite[3]=24'h08B0C5;"
                + "\nwrite[4]=24'h0B8AE1;"
                + "\nwrite[5]=24'h0E5F64;"
                + "\nwrite[6]=24'h112E65;"
                + "\nwrite[7]=24'h13F7F8;"
                + "\nwrite[8]=24'h16BC34;"
                + "\nwrite[9]=24'h197B2B;"
                + "\nwrite[10]=24'h1C34F2;"
                + "\n"
                + "\nwrite[11]=24'h1EE99D;"
                + "\nwrite[12]=24'h21993D;"
                + "\nwrite[13]=24'h2443E7;"
                + "\nwrite[14]=24'h26E9AC;"
                + "\nwrite[15]=24'h298A9E;"
                + "\nwrite[16]=24'h2C26CF;"
                + "\nwrite[17]=24'h2EBE4F;"
                + "\nwrite[18]=24'h315130;"
                + "\nwrite[19]=24'h33DF81;"
                + "\nwrite[20]=24'h366953;"
                + "\n"
                + "\nwrite[21]=24'h38EEB5;"
                + "\nwrite[22]=24'h3B6FB7;"
                + "\nwrite[23]=24'h3DEC69;"
                + "\nwrite[24]=24'h4064D8;"
                + "\nwrite[25]=24'h42D913;"
                + "\nwrite[26]=24'h454929;"
                + "\nwrite[27]=24'h47B527;"
                + "\nwrite[28]=24'h4A1D1B;"
                + "\nwrite[29]=24'h4C8112;"
                + "\nwrite[30]=24'h4EE11A;"
                + "\n"
                + "\nwrite[31]=24'h513D3F;"
                + "\nwrite[32]=24'h53958E;"
                + "\nwrite[33]=24'h55EA14;"
                + "\nwrite[34]=24'h583ADC;"
                + "\nwrite[35]=24'h5A87F3;"
                + "\nwrite[36]=24'h5CD164;"
                + "\nwrite[37]=24'h5F173B;//new//"
                + "\nwrite[38]=24'h615982;"
                + "\nwrite[39]=24'h639846;"
                + "\nwrite[40]=24'h65D391;"
                + "\n"
                + "\nwrite[41]=24'h680B6D;"
                + "\nwrite[42]=24'h6A3FE5;"
                + "\nwrite[43]=24'h6C7104;"
                + "\nwrite[44]=24'h6E9ED3;"
                + "\nwrite[45]=24'h70C95D;"
                + "\nwrite[46]=24'h72F0AB;"
                + "\nwrite[47]=24'h7514C7;"
                + "\nwrite[48]=24'h7735BA;"
                + "\nwrite[49]=24'h79538D;"
                + "\nwrite[50]=24'h7B6E4B;"
                + "\n"
                + "\nwrite[51]=24'h7D85FA;"
                + "\nwrite[52]=24'h7F9AA6;"
                + "\nwrite[53]=24'h81AC55;"
                + "\nwrite[54]=24'h83BB11;"
                + "\nwrite[55]=24'h85C6E2;"
                + "\nwrite[56]=24'h87CFCF;"
                + "\nwrite[57]=24'h89D5E3;"
                + "\nwrite[58]=24'h8BD923;"
                + "\nwrite[59]=24'h8DD999;"
                + "\nwrite[60]=24'h8FD74B;"
                + "\n"
                + "\nwrite[61]=24'h91D242;"
                + "\nwrite[62]=24'h93CA84;"
                + "\nwrite[63]=24'h95C01A;"
                + "\nwrite[64]=24'h97B30A;"
                + "\nwrite[65]=24'h99A35B;"
                + "\nwrite[66]=24'h9B9115;"
                + "\nwrite[67]=24'h9D7C3F;"
                + "\nwrite[68]=24'h9F64DE;"
                + "\nwrite[69]=24'hA14AFB;"
                + "\nwrite[70]=24'hA32E9B;"
                + "\n"
                + "\nwrite[71]=24'hA50FC5;"
                + "\nwrite[72]=24'hA6EE7F;"
                + "\nwrite[73]=24'hA8CAD0;"
                + "\nwrite[74]=24'hAAA4BD;"
                + "\nwrite[75]=24'hAC7C4E;"
                + "\nwrite[76]=24'hAE5187;"
                + "\nwrite[77]=24'hB02470;"
                + "\nwrite[78]=24'hB1F50C;"
                + "\nwrite[79]=24'hB3C364;"
                + "\nwrite[80]=24'hB58F7B;"
                + "\n"
                + "\nwrite[81]=24'hB75958;"
                + "\nwrite[82]=24'hB92100;"
                + "\nwrite[83]=24'hBAE678;"
                + "\nwrite[84]=24'hBCA9C6;"
                + "\nwrite[85]=24'hBE6AF0;"
                + "\nwrite[86]=24'hC029FA;"
                + "\nwrite[87]=24'hC1E6E9;"
                + "\nwrite[88]=24'hC3A1C3;"
                + "\nwrite[89]=24'hC55A8C;"
                + "\nwrite[90]=24'hC7114A;"
                + "\n"
                + "\nwrite[91]=24'hC8C601;"
                + "\nwrite[92]=24'hCA78B5;"
                + "\nwrite[93]=24'hCC296D;"
                + "\nwrite[94]=24'hCDD82C;"
                + "\nwrite[95]=24'hCF84F7;"
                + "\nwrite[96]=24'hD12FD2;"
                + "\nwrite[97]=24'hD2D8C2;"
                + "\nwrite[98]=24'hD47FCB;"
                + "\nwrite[99]=24'hD624F2;"
                + "\nwrite[100]=24'hD7C83B;"
                + "\n"
                + "\nwrite[101]=24'hD969AA;"
                + "\nwrite[102]=24'hDB0943;"
                + "\nwrite[103]=24'hDCA70A;"
                + "\nwrite[104]=24'hDE4304;"
                + "\nwrite[105]=24'hDFDD35;"
                + "\nwrite[106]=24'hE175A0;"
                + "\nwrite[107]=24'hE30C49;"
                + "\nwrite[108]=24'hE4A134;"
                + "\nwrite[109]=24'hE63465;"
                + "\nwrite[110]=24'hE7C5E0;"
                + "\n"
                + "\nwrite[111]=24'hE955A9;"
                + "\nwrite[112]=24'hEAE3C2;"
                + "\nwrite[113]=24'hEC7030;"
                + "\nwrite[114]=24'hEDFAF7;"
                + "\nwrite[115]=24'hEF8419;"
                + "\nwrite[116]=24'hF10B9A;"
                + "\nwrite[117]=24'hF2917E;"
                + "\nwrite[118]=24'hF415C8;"
                + "\nwrite[119]=24'hF5987C;"
                + "\nwrite[120]=24'hF7199D;"
                + "\n"
                + "\nwrite[121]=24'hF8992D;"
                + "\nwrite[122]=24'hFA1731;"
                + "\nwrite[123]=24'hFB93AB;"
                + "\nwrite[124]=24'hFD0E9F;"
                + "\nwrite[125]=24'hFE880F;"
                + "\nwrite[126]=24'h010000;"
                + "\n/////////////////////////////////////////////////////////////////"
                + "\n///////////////////////antilog table(1-126)///////////////////////////"
                + "\n"
                + "\nwrite1[1]=24'h016984;"
                + "\nwrite1[2]=24'h02D506;"
                + "\nwrite1[3]=24'h04428C;"
                + "\nwrite1[4]=24'h05B214;"
                + "\nwrite1[5]=24'h0723A4;"
                + "\nwrite1[6]=24'h08973E;"
                + "\nwrite1[7]=24'h0A0CE4;"
                + "\nwrite1[8]=24'h0B849A;"
                + "\nwrite1[9]=24'h0CFE63;"
                + "\nwrite1[10]=24'h0E7A41;"
                + "\n"
                + "\nwrite1[11]=24'h0FF837;"
                + "\nwrite1[12]=24'h117849;"
                + "\nwrite1[13]=24'h12FA79;"
                + "\nwrite1[14]=24'h147ECB;"
                + "\nwrite1[15]=24'h160541;"
                + "\nwrite1[16]=24'h178DDE;"
                + "\nwrite1[17]=24'h1918A6;"
                + "\nwrite1[18]=24'h1AA59C;"
                + "\nwrite1[19]=24'h1C34C2;"
                + "\nwrite1[20]=24'h1DC61B;"
                + "\n"
                + "\nwrite1[21]=24'h1F59AC;"
                + "\nwrite1[22]=24'h20EF76;"
                + "\nwrite1[23]=24'h22877D;"
                + "\nwrite1[24]=24'h2421C5;"
                + "\nwrite1[25]=24'h25BE50;"
                + "\nwrite1[26]=24'h275D21;"
                + "\nwrite1[27]=24'h28FE3D;"
                + "\nwrite1[28]=24'h2AA1A5;"
                + "\nwrite1[29]=24'h2C475E;"
                + "\nwrite1[30]=24'h2DEF6A;"
                + "\n"
                + "\nwrite1[31]=24'h2F99CD;"
                + "\nwrite1[32]=24'h31468A;"
                + "\nwrite1[33]=24'h32F5A5;"
                + "\nwrite1[34]=24'h34A720;"
                + "\nwrite1[35]=24'h365B00;"
                + "\nwrite1[36]=24'h381147;"
                + "\nwrite1[37]=24'h39C9F9;"
                + "\nwrite1[38]=24'h3B8519;"
                + "\nwrite1[39]=24'h3D42AB;"
                + "\nwrite1[40]=24'h3F02B3;"
                + "\n"
                + "\nwrite1[41]=24'h40C533;"
                + "\nwrite1[42]=24'h428A2F;"
                + "\nwrite1[43]=24'h4451AB;"
                + "\nwrite1[44]=24'h461BAA;"
                + "\nwrite1[45]=24'h47E830;"
                + "\nwrite1[46]=24'h49B740;"
                + "\nwrite1[47]=24'h4B88DF;"
                + "\nwrite1[48]=24'h4D5D0E;"
                + "\nwrite1[49]=24'h4F33D3;"
                + "\nwrite1[50]=24'h510D31;"
                + "\n"
                + "\nwrite1[51]=24'h52E92B;"
                + "\nwrite1[52]=24'h54C7C6;"
                + "\nwrite1[53]=24'h56A904;"
                + "\nwrite1[54]=24'h588CEA;"
                + "\nwrite1[55]=24'h5A737B;"
                + "\nwrite1[56]=24'h5C5CBB;"
                + "\nwrite1[57]=24'h5E48AE;"
                + "\nwrite1[58]=24'h603758;"
                + "\nwrite1[59]=24'h6228BD;"
                + "\nwrite1[60]=24'h641CE0;"
                + "\n"
                + "\nwrite1[61]=24'h6613C5;"
                + "\nwrite1[62]=24'h680D70;"
                + "\nwrite1[63]=24'h6A09E6;"
                + "\nwrite1[64]=24'h6C0929;"
                + "\nwrite1[65]=24'h6E0B3F;"
                + "\nwrite1[66]=24'h70102A;"
                + "\nwrite1[67]=24'h7217F0;"
                + "\nwrite1[68]=24'h742293;"
                + "\nwrite1[69]=24'h763019;"
                + "\nwrite1[70]=24'h784085;"
                + "\n"
                + "\nwrite1[71]=24'h7A53DA;"
                + "\nwrite1[72]=24'h7C6A1F;"
                + "\nwrite1[73]=24'h7E8355;"
                + "\nwrite1[74]=24'h809F83;"
                + "\nwrite1[75]=24'h82BEAB;"
                + "\nwrite1[76]=24'h84E0D2;"
                + "\nwrite1[77]=24'h8705FD;"
                + "\nwrite1[78]=24'h892E2F;"
                + "\nwrite1[79]=24'h8B596C;"
                + "\nwrite1[80]=24'h8D87BA;"
                + "\n"
                + "\nwrite1[81]=24'h8FB91D;"
                + "\nwrite1[82]=24'h91ED98;"
                + "\nwrite1[83]=24'h942530;"
                + "\nwrite1[84]=24'h965FEA;"
                + "\nwrite1[85]=24'h989DCA;"
                + "\nwrite1[86]=24'h9ADED4;"
                + "\nwrite1[87]=24'h9D230D;"
                + "\nwrite1[88]=24'h9F6A79;"
                + "\nwrite1[89]=24'hA1B51E;"
                + "\nwrite1[90]=24'hA402FE;"
                + "\n"
                + "\nwrite1[91]=24'hA65420;"
                + "\nwrite1[92]=24'hA8A888;"
                + "\nwrite1[93]=24'hAB0039;"
                + "\nwrite1[94]=24'hAD5B3A;"
                + "\nwrite1[95]=24'hAFB98E;"
                + "\nwrite1[96]=24'hB21B3A;"
                + "\nwrite1[97]=24'hB48043;"
                + "\nwrite1[98]=24'hB6E8AE;"
                + "\nwrite1[99]=24'hB95480;"
                + "\nwrite1[100]=24'hBBC3BD;"
                + "\n"
                + "\nwrite1[101]=24'hBE366A;"
                + "\nwrite1[102]=24'hC0AC8B;"
                + "\nwrite1[103]=24'hC32627;"
                + "\nwrite1[104]=24'hC5A342;"
                + "\nwrite1[105]=24'hC823E0;"
                + "\nwrite1[106]=24'hCAA807;"
                + "\nwrite1[107]=24'hCD2FBB;"
                + "\nwrite1[108]=24'hCFBB03;"
                + "\nwrite1[109]=24'hD249E2;"
                + "\nwrite1[110]=24'hD4DC5D;"
                + "\n"
                + "\nwrite1[111]=24'hD7727B;"
                + "\nwrite1[112]=24'hDA0C40;"
                + "\nwrite1[113]=24'hDCA9B0;"
                + "\nwrite1[114]=24'hDF4AD3;"
                + "\nwrite1[115]=24'hE1EFAB;"
                + "\nwrite1[116]=24'hE49840;"
                + "\nwrite1[117]=24'hE74496;"
                + "\nwrite1[118]=24'hE9F4B2;"
                + "\nwrite1[119]=24'hECA89A;"
                + "\nwrite1[120]=24'hEF6053;"
                + "\n"
                + "\nwrite1[121]=24'hF21BE2;"
                + "\nwrite1[122]=24'hF4DB4E;"
                + "\nwrite1[123]=24'hF79E9A;"
                + "\nwrite1[124]=24'hFA65CE;"
                + "\nwrite1[125]=24'hFD30EE;"
                + "\nwrite1[126]=24'h000001;"
                + "\nend"
                + "\n"
                + "\n"
                + "\n//////////////////////////////////////////////////////////////////////////////////////////"
                + "\nfunction [31:0] fix_ft;"
                + "\ninput [31:0] inp;"
                + "\nreg [31:0] ans;"
                + "\nreg [22:0] outp;"
                + "\nreg [7:0]  exponent;"
                + "\nreg [31:0] num;"
                + "\nbegin"
                + "\n"
                + "\n	if(inp[31]==1)"
                + "\n	begin"
                + "\n	signbit=1;"
                + "\n	num=(32'h7FFFFFFF-inp)+1;"
                + "\n	end"
                + "\n"
                + "\n	else if (inp[31]==0)"
                + "\n	begin"
                + "\n	signbit=0;"
                + "\n	num=inp;"
                + "\n	end"
                + "\n"
                + "\n"
                + "\n	if (num[30:23]!==8'd00)"
                + "\n	begin"
                + "\n"
                + "\n		if(num[30]==1)"
                + "\n		begin"
                + "\n		outp=num >> 7;"
                + "\n		exponent=7;"
                + "\n		end"
                + "\n"
                + "\n		else if(num[29]==1)"
                + "\n		begin"
                + "\n		outp=num >> 6;"
                + "\n		exponent=6;"
                + "\n		end"
                + "\n"
                + "\n		else if(num[28]==1)"
                + "\n		begin"
                + "\n		outp=num >> 5;"
                + "\n		exponent=5;"
                + "\n		end"
                + "\n"
                + "\n		else if(num[27]==1)"
                + "\n		begin"
                + "\n		outp=num >> 4;"
                + "\n		exponent=4;"
                + "\n		end"
                + "\n"
                + "\n		else if(num[26]==1)"
                + "\n		begin"
                + "\n		outp=num >> 3;"
                + "\n		exponent=3;"
                + "\n		end"
                + "\n"
                + "\n		else if(num[25]==1)"
                + "\n		begin"
                + "\n		outp=num >> 2;"
                + "\n		exponent=2;"
                + "\n		end"
                + "\n"
                + "\n		else if(num[24]==1)"
                + "\n		begin"
                + "\n		outp=num >> 1;"
                + "\n		exponent=1;"
                + "\n		end"
                + "\n"
                + "\n		else if(num[23]==1)"
                + "\n		begin"
                + "\n		outp=num ;"
                + "\n		exponent=0;"
                + "\n		end"
                + "\n"
                + "\n	end"
                + "\n"
                + "\n	else if (num[30:23]==8'd00)"
                + "\n	begin"
                + "\n"
                + "\n		if (num[22:0]==0)"
                + "\n				begin"
                + "\n				outp=0;"
                + "\n				exponent=0;"
                + "\n				end"
                + "\n		else"
                + "\n		begin"
                + "\n		"
                + "\n		if(num[22]==1)"
                + "\n		begin"
                + "\n		outp=num << 1;"
                + "\n		exponent=-1;"
                + "\n		end"
                + "\n	"
                + "\n		else if(num[21]==1)"
                + "\n		begin"
                + "\n		outp=num << 2;"
                + "\n		exponent=-2;"
                + "\n		end"
                + "\n"
                + "\n		else if(num[20]==1)"
                + "\n		begin"
                + "\n		outp=num << 3;"
                + "\n		exponent=-3;"
                + "\n		end"
                + "\n	"
                + "\n		else if(num[19]==1)"
                + "\n		begin"
                + "\n		outp=num << 4;"
                + "\n		exponent=-4;"
                + "\n		end"
                + "\n	"
                + "\n		else if(num[18]==1)"
                + "\n		begin"
                + "\n		outp=num << 5;"
                + "\n		exponent=-5;"
                + "\n		end	"
                + "\n	"
                + "\n		else if(num[17]==1)"
                + "\n		begin"
                + "\n		outp=num << 6;"
                + "\n		exponent=-6;"
                + "\n		end"
                + "\n	"
                + "\n		else if(num[16]==1)"
                + "\n		begin"
                + "\n		outp=num << 7;"
                + "\n		exponent=-7;"
                + "\n		end"
                + "\n	"
                + "\n		else if(num[15]==1)"
                + "\n		begin"
                + "\n		outp=num <<8;"
                + "\n		exponent=-8;"
                + "\n		end"
                + "\n	"
                + "\n		else if(num[14]==1)"
                + "\n		begin"
                + "\n		outp=num << 9;"
                + "\n		exponent=-9;"
                + "\n		end"
                + "\n	"
                + "\n		else if(num[13]==1)"
                + "\n		begin"
                + "\n		outp=num<< 10 ;"
                + "\n		exponent=-10;"
                + "\n		end"
                + "\n	"
                + "\n		else if(num[12]==1)"
                + "\n		begin"
                + "\n		outp=num<< 11 ;"
                + "\n		exponent=-11;"
                + "\n		end"
                + "\n"
                + "\n	"
                + "\n		else if(num[11]==1)"
                + "\n		begin"
                + "\n		outp=num<< 12 ;"
                + "\n		exponent=-12;"
                + "\n		end"
                + "\n	"
                + "\n		else if(num[10]==1)"
                + "\n		begin"
                + "\n		outp=num<< 13 ;"
                + "\n		exponent=-13;"
                + "\n		end"
                + "\n"
                + "\n		else if(num[9]==1)"
                + "\n		begin"
                + "\n		outp=num<< 14 ;"
                + "\n		exponent=-14;"
                + "\n		end"
                + "\n"
                + "\n		else if(num[8]==1)"
                + "\n		begin"
                + "\n		outp=num << 15 ;"
                + "\n		exponent=-15;"
                + "\n		end"
                + "\n"
                + "\n		else if(num[7]==1)"
                + "\n		begin"
                + "\n		outp=num << 16;"
                + "\n		exponent=-16;"
                + "\n		end"
                + "\n	"
                + "\n		else if(num[6]==1)"
                + "\n		begin"
                + "\n		outp=num << 17;"
                + "\n		exponent=-17;"
                + "\n		end"
                + "\n"
                + "\n		else if(num[5]==1)"
                + "\n		begin"
                + "\n		outp=num << 18;"
                + "\n		exponent=-18;"
                + "\n		end"
                + "\n"
                + "\n		else if(num[4]==1)"
                + "\n		begin"
                + "\n		outp=num << 19;"
                + "\n		exponent=-19;"
                + "\n		end"
                + "\n"
                + "\n		else if(num[3]==1)"
                + "\n		begin"
                + "\n		outp=num << 20;"
                + "\n		exponent=-20;"
                + "\n		end"
                + "\n		"
                + "\n		else if(num[2]==1)"
                + "\n		begin"
                + "\n		outp=num << 21;"
                + "\n		exponent=-21;"
                + "\n		end"
                + "\n	"
                + "\n		else if(num[1]==1)"
                + "\n		begin"
                + "\n		outp=num << 22;"
                + "\n		exponent=-22;"
                + "\n		end"
                + "\n	"
                + "\n	"
                + "\n		else if(num[0]==1)"
                + "\n		begin"
                + "\n		outp=num << 23;"
                + "\n		exponent=-23;"
                + "\n		end"
                + "\n"
                + "\n"
                + "\n		end 	"
                + "\n"
                + "\n	end		"
                + "\n"
                + "\n	if (num[22:0]==0 && num[30:23]==0)"
                + "\n	ans=32'd00000000;"
                + "\n	else"
                + "\n	begin"
                + "\nans[31]=signbit;"
                + "\nans[30:23]=exponent+8'd127;"
                + "\nans[22:0]=outp;"
                + "\n	end"
                + "\nfix_ft=ans;"
                + "\nend"
                + "\nendfunction"
                + "\n/////////////////////////////////////////////////////////////////////////////////////////////////"
                + "\nfunction [31:0] ft2_fix;"
                + "\ninput[31:0] num;"
                + "\nreg [7:0] exp;"
                + "\nbegin"
                + "\nft2_fix=0;"
                + "\nif (num[30:23]>=8'd127)"
                + "\nbegin"
                + "\n//num=num;"
                + "\nft2_fix[31]=num[31];"
                + "\nexp=num[30:23]-8'd127;"
                + "\nft2_fix[23]=1;"
                + "\nft2_fix[22:0]=num[22:0];"
                + "\nft2_fix=ft2_fix << exp;"
                + "\nend"
                + "\nelse"
                + "\nbegin"
                + "\n//num=num;"
                + "\nft2_fix[31]=num[31];"
                + "\nexp=8'd127-num[30:23];"
                + "\nft2_fix[23]=1;"
                + "\nft2_fix[22:0]=num[22:0];"
                + "\nft2_fix=ft2_fix >> exp;"
                + "\nend"
                + "\nif (num[31]==1)"
                + "\nbegin"
                + "\nft2_fix=~ft2_fix+1;"
                + "\nend"
                + "\n"
                + "\nend"
                + "\nendfunction"
                + "\n////////////////////////////////////////////////////////////////////////////////////"
                + "\nfunction [31:0] log_greater1;"
                + "\ninput [31:0] num;"
                + "\nreg [22:0] man;"
                + "\nreg [7:0] exponent;"
                + "\nreg[23:0]man_log;"
                + "\nreg [31:0]alog;"
                + "\nreg signbit;"
                + "\n"
                + "\n   begin"
                + "\n	signbit=num[31];"
                + "\n	exponent=num[31:23]-8'd127;"
                + "\n	man=num[22:0];"
                + "\n	if (man==0)"
                + "\n	begin"
                + "\n	man_log = 23'h0;"
                + "\n	end"
                + "\n	else"
                + "\n	begin"
                + "\n	man_log=write[man[22:16]];"
                + "\n	end"
                + "\n	alog[31:24]=exponent;"
                + "\n   alog[23:0]=man_log;"
                + "\n	log_greater1=alog[31:0];"
                + "\n	end"
                + "\nendfunction"
                + "\n///////////////////////////////////////////////////////////////////////////////////////////"
                + "\nfunction [31:0] log_less1;"
                + "\ninput [31:0] num1;"
                + "\nreg [31:0] num_d,num;"
                + "\nbegin"
                + "\nnum=num1;"
                + "\n	num=ft2_fix(num);"
                + "\nif(num<32'h00800000)//1"
                + "\n	begin"
                + "\n   num=num*10;"
                + "\n	num_d=1;"
                + "\n	end"
                + "\n if(num<32'h00800000)//2"
                + "\n	begin"
                + "\n   num=num*10;"
                + "\n	num_d=2;"
                + "\n	end"
                + "\n if(num<32'h00800000)//3"
                + "\n	begin"
                + "\n   num=num*10;"
                + "\n	num_d=3;"
                + "\n	end"
                + "\n if(num<32'h00800000)//4"
                + "\n	begin"
                + "\n	num=num*10;"
                + "\n	num_d=4;"
                + "\n	end"
                + "\n if(num<32'h00800000)//5"
                + "\n	begin"
                + "\n	num=num*10;"
                + "\n	num_d=5;"
                + "\n	end"
                + "\n if(num<32'h00800000)//6"
                + "\n	begin"
                + "\n	num=num*10;"
                + "\n	num_d=6;"
                + "\n	end"
                + "\n if(num<32'h00800000)//7"
                + "\n	begin"
                + "\n   num=num*10;"
                + "\n	num_d=7;"
                + "\n	end"
                + "\nnum=fix_ft(num);"
                + "\n	log_less1=(num_d*32'h0353958E)-log_greater1(num);"
                + "\n	end"
                + "\nendfunction"
                + "\n/////////////////////////////////////////////////////////////////////////////////////	"
                + "\nfunction [31:0] log;"
                + "\ninput[31:0]num1;"
                + "\nreg[31:0]num;"
                + "\nbegin"
                + "\nnum=num1;"
                + "\nif(num[31]==1)"
                + "\nbegin"
                + "\nnum={1'b0,num[30:0]};"
                + "\nend"
                + "\nelse"
                + "\nbegin"
                + "\nnum=num;"
                + "\nend"
                + "\n"
                + "\nif (num<32'h3F800000)"
                + "\nbegin"
                + "\nlog=log_less1(num);"
                + "\nend"
                + "\nelse"
                + "\nbegin"
                + "\nlog=log_greater1(num);"
                + "\nend"
                + "\n"
                + "\nend"
                + "\nendfunction"
                + "\n//////////////////////////////////////////////////////////////////////////////////////////"
                + "\nfunction [31:0] antilog_sqrt;"
                + "\ninput [31:0] num;"
                + "\nreg [23:0] man;"
                + "\nreg [7:0] exponent,alog_exp;"
                + "\nreg [23:0] man_antilog,alog_man;"
                + "\nreg [31:0]alog,ans_anti;"
                + "\n"
                + "\nbegin"
                + "\n"
                + "\nif (num_fp==32'h00000000)"
                + "\n	begin"
                + "\n		antilog_sqrt=32'h01000000;"
                + "\n	end"
                + "\n"
                + "\n else if(num_fp<<32'h3F800000 ||{1'b0,num_fp[30:0]}<32'h3F800000)"
                + "\n	begin"
                + "\n	exponent=num[31:24];"
                + "\n   man=num[23:0];"
                + "\n"
                + "\n		if (man==0)"
                + "\n			begin"
                + "\n			exponent=exponent+1;"
                + "\n			man=24'b000000000000000000000001-man;"
                + "\n			man_antilog =24'h0; "
                + "\n			ans_anti={8'h01,man_antilog};"
                + "\n			alog=ans_anti>>(2**(exponent-1));"
                + "\n			antilog_sqrt=alog;"
                + "\n			end"
                + "\n"
                + "\n		else if (num[31:24]==0)"
                + "\n			begin"
                + "\n			exponent=exponent+1;"
                + "\n			man=24'b000000000000000000000001-man;"
                + "\n			man_antilog=write1[man[23:17]-1];"
                + "\n			ans_anti={8'h01,man_antilog};"
                + "\n			alog=ans_anti>>(2**exponent);"
                + "\n			antilog_sqrt=alog;"
                + "\n			end"
                + "\n		"
                + "\n		else"
                + "\n			begin"
                + "\n			exponent=exponent+1;"
                + "\n			man=24'b000000000000000000000001-man;"
                + "\n			man_antilog=write1[man[23:17]];"
                + "\n			ans_anti={8'h01,man_antilog};"
                + "\n			alog=ans_anti>>(2**exponent);"
                + "\n			antilog_sqrt=alog;"
                + "\n			end"
                + "\n	end"
                + "\n"
                + "\n else if (num_fp >=32'h3F800000 ||{1'b0,num_fp[30:0]}>32'h3F800000)"
                + "\n	begin"
                + "\n	exponent=num[31:24];"
                + "\n	man=num[23:0];	"
                + "\nif (man==0)///man=0"
                + "\nbegin"
                + "\n	man_antilog = 24'h0;"
                + "\n	alog_exp =2**exponent;"
                + "\n	antilog_sqrt={alog_exp,man_antilog};"
                + "\nend"
                + "\n"
                + "\nelse if (num[31:24]==0)///exp=0"
                + "\nbegin"
                + "\n	man_antilog=write1[man[23:17]];"
                + "\n	ans_anti={8'h01,man_antilog};"
                + "\n	alog=2**exponent*ans_anti;"
                + "\n	antilog_sqrt={alog};"
                + "\nend"
                + "\n	else"
                + "\nbegin"
                + "\n	man_antilog=write1[man[23:17]];"
                + "\n   ans_anti={8'h01,man_antilog};"
                + "\n	alog=2**exponent*ans_anti;"
                + "\n	antilog_sqrt={alog};"
                + "\n	"
                + "\nend	"
                + "\n	end"
                + "\n	"
                + "\nantilog_sqrt=antilog_sqrt;"
                + "\nend"
                + "\nendfunction"
                + "\n////////////////////////////////////////////////////////////////////////////////////////////"
                + "\nfunction[31:0]sqrt;"
                + "\ninput[31:0]num;"
                + "\nbegin"
                + "\nif(num==0)"
                + "\nbegin"
                + "\nnum_log=log(num);"
                + "\nnum_log=num_log>>1;"
                + "\nsqrt=32'h00000000;"
                + "\nend"
                + "\nelse"
                + "\nbegin"
                + "\nnum_log=log(num);"
                + "\nnum_log=num_log>>1;"
                + "\nsqrt=antilog_sqrt(num_log);"
                + "\nsqrt={1'b0,sqrt[31:24],sqrt[23:1]} ;"
                + "\nsqrt=fix_ft(sqrt);"
                + "\nend"
                + "\nend"
                + "\nendfunction"
                + "\n//////////////////////////////////////////////////////////////////////////////////////////"
                + "\nalways @(posedge clk)"
                + "\nbegin"
                + "\nnumb=32'd" + num + ";"
                + "\nnum_fp=fix_ft(numb);"
                + "\ns_root=sqrt(num_fp);"
                + "\nend"
                + "\nendmodule");
    }

    public void generateLogLNS(PrintStream p, String device, long num) {
        System.out.println("Coming");
        p.println("// Logarithmic Number System (LNS) Based Arithmetic Operations Using FPGA\n\n");
        p.println("// Device : " + device);
        p.println("// Generated on : " + date);

        p.println("\nmodule lns_log(clk,out);"
                + "\ninput clk;"
                + "\noutput reg [31:0] out; "
                + "\nreg [31:0] log_number;"
                + "\nreg [31:0] num_fp, numb;"
                + "\nreg signbit;"
                + "\nreg [23:0] write [126:0],write1[126:0];"
                + "\ninitial "
                + "\nbegin"
                + "\n//////////log table(1-126)new /////////////////////////////////////////////////////////"
                + "\nwrite[1]=24'h02EB6C;"
                + "\nwrite[2]=24'h05D0FB;"
                + "\nwrite[3]=24'h08B0C5;"
                + "\nwrite[4]=24'h0B8AE1;"
                + "\nwrite[5]=24'h0E5F64;"
                + "\nwrite[6]=24'h112E65;"
                + "\nwrite[7]=24'h13F7F8;"
                + "\nwrite[8]=24'h16BC34;"
                + "\nwrite[9]=24'h197B2B;"
                + "\nwrite[10]=24'h1C34F2;"
                + "\n"
                + "\nwrite[11]=24'h1EE99D;"
                + "\nwrite[12]=24'h21993D;"
                + "\nwrite[13]=24'h2443E7;"
                + "\nwrite[14]=24'h26E9AC;"
                + "\nwrite[15]=24'h298A9E;"
                + "\nwrite[16]=24'h2C26CF;"
                + "\nwrite[17]=24'h2EBE4F;"
                + "\nwrite[18]=24'h315130;"
                + "\nwrite[19]=24'h33DF81;"
                + "\nwrite[20]=24'h366953;"
                + "\n"
                + "\nwrite[21]=24'h38EEB5;"
                + "\nwrite[22]=24'h3B6FB7;"
                + "\nwrite[23]=24'h3DEC69;"
                + "\nwrite[24]=24'h4064D8;"
                + "\nwrite[25]=24'h42D913;"
                + "\nwrite[26]=24'h454929;"
                + "\nwrite[27]=24'h47B527;"
                + "\nwrite[28]=24'h4A1D1B;"
                + "\nwrite[29]=24'h4C8112;"
                + "\nwrite[30]=24'h4EE11A;"
                + "\n"
                + "\nwrite[31]=24'h513D3F;"
                + "\nwrite[32]=24'h53958E;"
                + "\nwrite[33]=24'h55EA14;"
                + "\nwrite[34]=24'h583ADC;"
                + "\nwrite[35]=24'h5A87F3;"
                + "\nwrite[36]=24'h5CD164;"
                + "\nwrite[37]=24'h5F173B;//new//"
                + "\nwrite[38]=24'h615982;"
                + "\nwrite[39]=24'h639846;"
                + "\nwrite[40]=24'h65D391;"
                + "\n"
                + "\nwrite[41]=24'h680B6D;"
                + "\nwrite[42]=24'h6A3FE5;"
                + "\nwrite[43]=24'h6C7104;"
                + "\nwrite[44]=24'h6E9ED3;"
                + "\nwrite[45]=24'h70C95D;"
                + "\nwrite[46]=24'h72F0AB;"
                + "\nwrite[47]=24'h7514C7;"
                + "\nwrite[48]=24'h7735BA;"
                + "\nwrite[49]=24'h79538D;"
                + "\nwrite[50]=24'h7B6E4B;"
                + "\n"
                + "\nwrite[51]=24'h7D85FA;"
                + "\nwrite[52]=24'h7F9AA6;"
                + "\nwrite[53]=24'h81AC55;"
                + "\nwrite[54]=24'h83BB11;"
                + "\nwrite[55]=24'h85C6E2;"
                + "\nwrite[56]=24'h87CFCF;"
                + "\nwrite[57]=24'h89D5E3;"
                + "\nwrite[58]=24'h8BD923;"
                + "\nwrite[59]=24'h8DD999;"
                + "\nwrite[60]=24'h8FD74B;"
                + "\n"
                + "\nwrite[61]=24'h91D242;"
                + "\nwrite[62]=24'h93CA84;"
                + "\nwrite[63]=24'h95C01A;"
                + "\nwrite[64]=24'h97B30A;"
                + "\nwrite[65]=24'h99A35B;"
                + "\nwrite[66]=24'h9B9115;"
                + "\nwrite[67]=24'h9D7C3F;"
                + "\nwrite[68]=24'h9F64DE;"
                + "\nwrite[69]=24'hA14AFB;"
                + "\nwrite[70]=24'hA32E9B;"
                + "\n"
                + "\nwrite[71]=24'hA50FC5;"
                + "\nwrite[72]=24'hA6EE7F;"
                + "\nwrite[73]=24'hA8CAD0;"
                + "\nwrite[74]=24'hAAA4BD;"
                + "\nwrite[75]=24'hAC7C4E;"
                + "\nwrite[76]=24'hAE5187;"
                + "\nwrite[77]=24'hB02470;"
                + "\nwrite[78]=24'hB1F50C;"
                + "\nwrite[79]=24'hB3C364;"
                + "\nwrite[80]=24'hB58F7B;"
                + "\n"
                + "\nwrite[81]=24'hB75958;"
                + "\nwrite[82]=24'hB92100;"
                + "\nwrite[83]=24'hBAE678;"
                + "\nwrite[84]=24'hBCA9C6;"
                + "\nwrite[85]=24'hBE6AF0;"
                + "\nwrite[86]=24'hC029FA;"
                + "\nwrite[87]=24'hC1E6E9;"
                + "\nwrite[88]=24'hC3A1C3;"
                + "\nwrite[89]=24'hC55A8C;"
                + "\nwrite[90]=24'hC7114A;"
                + "\n"
                + "\nwrite[91]=24'hC8C601;"
                + "\nwrite[92]=24'hCA78B5;"
                + "\nwrite[93]=24'hCC296D;"
                + "\nwrite[94]=24'hCDD82C;"
                + "\nwrite[95]=24'hCF84F7;"
                + "\nwrite[96]=24'hD12FD2;"
                + "\nwrite[97]=24'hD2D8C2;"
                + "\nwrite[98]=24'hD47FCB;"
                + "\nwrite[99]=24'hD624F2;"
                + "\nwrite[100]=24'hD7C83B;"
                + "\n"
                + "\nwrite[101]=24'hD969AA;"
                + "\nwrite[102]=24'hDB0943;"
                + "\nwrite[103]=24'hDCA70A;"
                + "\nwrite[104]=24'hDE4304;"
                + "\nwrite[105]=24'hDFDD35;"
                + "\nwrite[106]=24'hE175A0;"
                + "\nwrite[107]=24'hE30C49;"
                + "\nwrite[108]=24'hE4A134;"
                + "\nwrite[109]=24'hE63465;"
                + "\nwrite[110]=24'hE7C5E0;"
                + "\n"
                + "\nwrite[111]=24'hE955A9;"
                + "\nwrite[112]=24'hEAE3C2;"
                + "\nwrite[113]=24'hEC7030;"
                + "\nwrite[114]=24'hEDFAF7;"
                + "\nwrite[115]=24'hEF8419;"
                + "\nwrite[116]=24'hF10B9A;"
                + "\nwrite[117]=24'hF2917E;"
                + "\nwrite[118]=24'hF415C8;"
                + "\nwrite[119]=24'hF5987C;"
                + "\nwrite[120]=24'hF7199D;"
                + "\n"
                + "\nwrite[121]=24'hF8992D;"
                + "\nwrite[122]=24'hFA1731;"
                + "\nwrite[123]=24'hFB93AB;"
                + "\nwrite[124]=24'hFD0E9F;"
                + "\nwrite[125]=24'hFE880F;"
                + "\nwrite[126]=24'h010000;"
                + "\nend"
                + "\n"
                + "\n//////////////////////////////////////////////////////////////////////////////////////////"
                + "\nfunction [31:0] fix_ft;"
                + "\ninput [31:0] inp;"
                + "\nreg [31:0] ans;"
                + "\nreg [22:0] outp;"
                + "\nreg [7:0]  exponent;"
                + "\nreg [31:0] num;"
                + "\nbegin"
                + "\n"
                + "\n	if(inp[31]==1)"
                + "\n	begin"
                + "\n	signbit=1;"
                + "\n	num=(32'h7FFFFFFF-inp)+1;"
                + "\n	end"
                + "\n"
                + "\n	else if (inp[31]==0)"
                + "\n	begin"
                + "\n	signbit=0;"
                + "\n	num=inp;"
                + "\n	end"
                + "\n"
                + "\n"
                + "\n	if (num[30:23]!==8'd00)"
                + "\n	begin"
                + "\n"
                + "\n		if(num[30]==1)"
                + "\n		begin"
                + "\n		outp=num >> 7;"
                + "\n		exponent=7;"
                + "\n		end"
                + "\n"
                + "\n		else if(num[29]==1)"
                + "\n		begin"
                + "\n		outp=num >> 6;"
                + "\n		exponent=6;"
                + "\n		end"
                + "\n"
                + "\n		else if(num[28]==1)"
                + "\n		begin"
                + "\n		outp=num >> 5;"
                + "\n		exponent=5;"
                + "\n		end"
                + "\n"
                + "\n		else if(num[27]==1)"
                + "\n		begin"
                + "\n		outp=num >> 4;"
                + "\n		exponent=4;"
                + "\n		end"
                + "\n"
                + "\n		else if(num[26]==1)"
                + "\n		begin"
                + "\n		outp=num >> 3;"
                + "\n		exponent=3;"
                + "\n		end"
                + "\n"
                + "\n		else if(num[25]==1)"
                + "\n		begin"
                + "\n		outp=num >> 2;"
                + "\n		exponent=2;"
                + "\n		end"
                + "\n"
                + "\n		else if(num[24]==1)"
                + "\n		begin"
                + "\n		outp=num >> 1;"
                + "\n		exponent=1;"
                + "\n		end"
                + "\n"
                + "\n		else if(num[23]==1)"
                + "\n		begin"
                + "\n		outp=num ;"
                + "\n		exponent=0;"
                + "\n		end"
                + "\n"
                + "\n	end"
                + "\n"
                + "\n	else if (num[30:23]==8'd00)"
                + "\n	begin"
                + "\n"
                + "\n		if (num[22:0]==0)"
                + "\n				begin"
                + "\n				outp=0;"
                + "\n				exponent=0;"
                + "\n				end"
                + "\n		else"
                + "\n		begin"
                + "\n		"
                + "\n		if(num[22]==1)"
                + "\n		begin"
                + "\n		outp=num << 1;"
                + "\n		exponent=-1;"
                + "\n		end"
                + "\n	"
                + "\n		else if(num[21]==1)"
                + "\n		begin"
                + "\n		outp=num << 2;"
                + "\n		exponent=-2;"
                + "\n		end"
                + "\n"
                + "\n		else if(num[20]==1)"
                + "\n		begin"
                + "\n		outp=num << 3;"
                + "\n		exponent=-3;"
                + "\n		end"
                + "\n	"
                + "\n		else if(num[19]==1)"
                + "\n		begin"
                + "\n		outp=num << 4;"
                + "\n		exponent=-4;"
                + "\n		end"
                + "\n	"
                + "\n		else if(num[18]==1)"
                + "\n		begin"
                + "\n		outp=num << 5;"
                + "\n		exponent=-5;"
                + "\n		end	"
                + "\n	"
                + "\n		else if(num[17]==1)"
                + "\n		begin"
                + "\n		outp=num << 6;"
                + "\n		exponent=-6;"
                + "\n		end"
                + "\n	"
                + "\n		else if(num[16]==1)"
                + "\n		begin"
                + "\n		outp=num << 7;"
                + "\n		exponent=-7;"
                + "\n		end"
                + "\n	"
                + "\n		else if(num[15]==1)"
                + "\n		begin"
                + "\n		outp=num <<8;"
                + "\n		exponent=-8;"
                + "\n		end"
                + "\n	"
                + "\n		else if(num[14]==1)"
                + "\n		begin"
                + "\n		outp=num << 9;"
                + "\n		exponent=-9;"
                + "\n		end"
                + "\n	"
                + "\n		else if(num[13]==1)"
                + "\n		begin"
                + "\n		outp=num<< 10 ;"
                + "\n		exponent=-10;"
                + "\n		end"
                + "\n	"
                + "\n		else if(num[12]==1)"
                + "\n		begin"
                + "\n		outp=num<< 11 ;"
                + "\n		exponent=-11;"
                + "\n		end"
                + "\n"
                + "\n	"
                + "\n		else if(num[11]==1)"
                + "\n		begin"
                + "\n		outp=num<< 12 ;"
                + "\n		exponent=-12;"
                + "\n		end"
                + "\n	"
                + "\n		else if(num[10]==1)"
                + "\n		begin"
                + "\n		outp=num<< 13 ;"
                + "\n		exponent=-13;"
                + "\n		end"
                + "\n"
                + "\n		else if(num[9]==1)"
                + "\n		begin"
                + "\n		outp=num<< 14 ;"
                + "\n		exponent=-14;"
                + "\n		end"
                + "\n"
                + "\n		else if(num[8]==1)"
                + "\n		begin"
                + "\n		outp=num << 15 ;"
                + "\n		exponent=-15;"
                + "\n		end"
                + "\n"
                + "\n		else if(num[7]==1)"
                + "\n		begin"
                + "\n		outp=num << 16;"
                + "\n		exponent=-16;"
                + "\n		end"
                + "\n	"
                + "\n		else if(num[6]==1)"
                + "\n		begin"
                + "\n		outp=num << 17;"
                + "\n		exponent=-17;"
                + "\n		end"
                + "\n"
                + "\n		else if(num[5]==1)"
                + "\n		begin"
                + "\n		outp=num << 18;"
                + "\n		exponent=-18;"
                + "\n		end"
                + "\n"
                + "\n		else if(num[4]==1)"
                + "\n		begin"
                + "\n		outp=num << 19;"
                + "\n		exponent=-19;"
                + "\n		end"
                + "\n"
                + "\n		else if(num[3]==1)"
                + "\n		begin"
                + "\n		outp=num << 20;"
                + "\n		exponent=-20;"
                + "\n		end"
                + "\n		"
                + "\n		else if(num[2]==1)"
                + "\n		begin"
                + "\n		outp=num << 21;"
                + "\n		exponent=-21;"
                + "\n		end"
                + "\n	"
                + "\n		else if(num[1]==1)"
                + "\n		begin"
                + "\n		outp=num << 22;"
                + "\n		exponent=-22;"
                + "\n		end"
                + "\n	"
                + "\n	"
                + "\n		else if(num[0]==1)"
                + "\n		begin"
                + "\n		outp=num << 23;"
                + "\n		exponent=-23;"
                + "\n		end"
                + "\n"
                + "\n"
                + "\n		end 	"
                + "\n"
                + "\n	end		"
                + "\n"
                + "\n	if (num[22:0]==0 && num[30:23]==0)"
                + "\n	ans=32'd00000000;"
                + "\n	else"
                + "\n	begin"
                + "\nans[31]=signbit;"
                + "\nans[30:23]=exponent+8'd127;"
                + "\nans[22:0]=outp;"
                + "\n	end"
                + "\nfix_ft=ans;"
                + "\nend"
                + "\nendfunction"
                + "\n/////////////////////////////////////////////////////////////////////////////////////////////////"
                + "\nfunction [31:0] ft2_fix;"
                + "\ninput[31:0] num;"
                + "\nreg [7:0] exp;"
                + "\nbegin"
                + "\nft2_fix=0;"
                + "\nif (num[30:23]>=8'd127)"
                + "\nbegin"
                + "\n//num=num;"
                + "\nft2_fix[31]=num[31];"
                + "\nexp=num[30:23]-8'd127;"
                + "\nft2_fix[23]=1;"
                + "\nft2_fix[22:0]=num[22:0];"
                + "\nft2_fix=ft2_fix << exp;"
                + "\nend"
                + "\nelse"
                + "\nbegin"
                + "\n//num=num;"
                + "\nft2_fix[31]=num[31];"
                + "\nexp=8'd127-num[30:23];"
                + "\nft2_fix[23]=1;"
                + "\nft2_fix[22:0]=num[22:0];"
                + "\nft2_fix=ft2_fix >> exp;"
                + "\nend"
                + "\nif (num[31]==1)"
                + "\nbegin"
                + "\nft2_fix=~ft2_fix+1;"
                + "\nend"
                + "\n"
                + "\nend"
                + "\nendfunction"
                + "\n///////////////////////////////////////////////////////////////////////////////////////"
                + "\nfunction [31:0] log_greater1;"
                + "\ninput [31:0] num;"
                + "\nreg [22:0] man;"
                + "\nreg [7:0] exponent;"
                + "\nreg[23:0]man_log;"
                + "\nreg [31:0]alog;"
                + "\nreg signbit;"
                + "\n"
                + "\n   begin"
                + "\n	signbit=num[31];"
                + "\n	exponent=num[31:23]-8'd127;"
                + "\n	man=num[22:0];"
                + "\n	if (man==0)"
                + "\n	begin"
                + "\n	man_log = 23'h0;"
                + "\n	end"
                + "\n	else"
                + "\n	begin"
                + "\n	man_log=write[man[22:16]];"
                + "\n	end"
                + "\n	alog[31:24]=exponent;"
                + "\n   alog[23:0]=man_log;"
                + "\n	log_greater1=alog[31:0];"
                + "\n	end"
                + "\nendfunction"
                + "\n///////////////////////////////////////////////////////////////////////////////////////////"
                + "\nfunction [31:0] log_less1;"
                + "\ninput [31:0] num1;"
                + "\nreg [31:0] num_d,num;"
                + "\nbegin"
                + "\nnum=num1;"
                + "\n	num=ft2_fix(num);"
                + "\nif(num<32'h00800000)//1"
                + "\n	begin"
                + "\n   num=num*10;"
                + "\n	num_d=1;"
                + "\n	end"
                + "\n if(num<32'h00800000)//2"
                + "\n	begin"
                + "\n   num=num*10;"
                + "\n	num_d=2;"
                + "\n	end"
                + "\n if(num<32'h00800000)//3"
                + "\n	begin"
                + "\n   num=num*10;"
                + "\n	num_d=3;"
                + "\n	end"
                + "\n if(num<32'h00800000)//4"
                + "\n	begin"
                + "\n	num=num*10;"
                + "\n	num_d=4;"
                + "\n	end"
                + "\n if(num<32'h00800000)//5"
                + "\n	begin"
                + "\n	num=num*10;"
                + "\n	num_d=5;"
                + "\n	end"
                + "\n if(num<32'h00800000)//6"
                + "\n	begin"
                + "\n	num=num*10;"
                + "\n	num_d=6;"
                + "\n	end"
                + "\n if(num<32'h00800000)//7"
                + "\n	begin"
                + "\n   num=num*10;"
                + "\n	num_d=7;"
                + "\n	end"
                + "\nnum=fix_ft(num);"
                + "\n	log_less1=(num_d*32'h0353958E)-log_greater1(num);"
                + "\n	end"
                + "\nendfunction"
                + "\n//////////////////////////////////////////////////////////////////////////////////////"
                + "\nfunction [31:0] log;"
                + "\ninput[31:0]num1;"
                + "\nreg[31:0]num;"
                + "\nbegin"
                + "\nnum=num1;"
                + "\nif(num[31]==1)"
                + "\nbegin"
                + "\nnum={1'b0,num[30:0]};"
                + "\nend"
                + "\nelse"
                + "\nbegin"
                + "\nnum=num;"
                + "\nend"
                + "\n"
                + "\nif (num<32'h3F800000)"
                + "\nbegin"
                + "\nlog=log_less1(num);"
                + "\nend"
                + "\nelse"
                + "\nbegin"
                + "\nlog=log_greater1(num);"
                + "\nend"
                + "\n"
                + "\nend"
                + "\nendfunction"
                + "\n///////////////////////////////////////////////////////////////////////////////////////////"
                + "\nalways @(posedge clk)"
                + "\nbegin"
                + "\nnumb=32'd" + num + ";"
                + "\nnum_fp=fix_ft(numb);"
                + "\nlog_number=log(num_fp);"
                + "\nlog_number=log_number >> 1;"
                + "\nout=fix_ft(log_number);"
                + "\nend"
                + "\nendmodule");

    }

    public void generateMuxGateLevel(PrintStream p, String device, String muxInput1, String muxInput2, String muxInput3, String muxInput4, String muxS1, String muxS0) {
        p.println("// Introduction to different verilog abstraction levels\n\n");
        p.println("// Device : " + device);
        p.println("// Generated on : " + date);

        p.println("\n// Module 4-to-1 multiplexer using gate level modelling."
                + "\n"
                + "\nmodule gatelevel_mux(clk,out1); "
                + "\ninput clk;"
                + "\noutput out1;"
                + "\nreg i0, i1, i2, i3;"
                + "\nreg s1, s0;"
                + "\n// Internal wire declarations"
                + "\nwire s1n, s0n;"
                + "\nwire y0, y1, y2, y3;"
                + "\ninitial"
                + "\nbegin"
                + "\ni0=" + muxInput1 + ";"
                + "\ni1=" + muxInput2 + ";"
                + "\ni2=" + muxInput3 + ";"
                + "\ni3=" + muxInput4 + ";"
                + "\ns1=" + muxS1 + ";"
                + "\ns0=" + muxS0 + ";"
                + "\nend"
                + "\n// Gate instantiations"
                + "\n// Create s1n and s0n signals."
                + "\nnot (s1n, s1);"
                + "\nnot (s0n, s0);"
                + "\n// 3-input and gates instantiated"
                + "\nand (y0, i0, s1n, s0n);"
                + "\nand (y1, i1, s1n, s0);"
                + "\nand (y2, i2, s1, s0n);"
                + "\nand (y3, i3, s1, s0);"
                + "\n// 4-input or gate instantiated"
                + "\nor (out1, y0, y1, y2, y3);"
                + "\nendmodule");
    }

    public void generateAdderFlowLevel(PrintStream p, String device, String adderInput1, String adderInput2, String adderCarry) {
        p.println("// Introduction to different verilog abstraction levels\n\n");
        p.println("// Device : " + device);
        p.println("// Generated on : " + date);

        p.println("\n//4-bit fulladder using dataflow modelling."
                + "\nmodule dataflow_adder(clk,sum,c_out);"
                + "\ninput clk;"
                + "\noutput wire [3:0] sum;"
                + "\noutput wire c_out;"
                + "\nreg [3:0] a;"
                + "\nreg [3:0] b;"
                + "\nreg c_in;"
                + "\ninitial "
                + "\nbegin"
                + "\na=4'b" + adderInput1 + ";"
                + "\nb=4'b" + adderInput2 + ";"
                + "\nc_in=1'b" + adderCarry + ";"
                + "\nend"
                + "\nassign {c_out, sum} = a + b + c_in;"
                + "\n"
                + "\nendmodule");
    }

    public void generateMuxFlowLevel(PrintStream p, String device, String muxInput1, String muxInput2, String muxInput3, String muxInput4, String muxS1, String muxS0) {
        p.println("// Introduction to different verilog abstraction levels\n\n");
        p.println("// Device : " + device);
        p.println("// Generated on : " + date);

        p.println("\n// Module 4-to-1 multiplexer using data-flow modelling."
                + "\nmodule dataflow_mux (clk,out1); "
                + "\ninput clk;"
                + "\noutput out1;"
                + "\nreg i0, i1, i2, i3;"
                + "\nreg s1, s0;"
                + "\ninitial"
                + "\nbegin"
                + "\ni0=" + muxInput1 + ";"
                + "\ni1=" + muxInput2 + ";"
                + "\ni2=" + muxInput3 + ";"
                + "\ni3=" + muxInput4 + ";"
                + "\ns1=" + muxS1 + ";"
                + "\ns0=" + muxS0 + ";"
                + "\nend"
                + "\n//Logic equation for out"
                + "\nassign out1 = (~s1 & ~s0 & i0)|"
                + "\n(~s1 & s0 & i1) |"
                + "\n(s1 & ~s0 & i2) |"
                + "\n(s1 & s0 & i3) ;"
                + "\nendmodule");
    }

    public void generateMuxBehaviouralLevel(PrintStream p, String device, String muxInput1, String muxInput2, String muxInput3, String muxInput4, String muxS1, String muxS0) {
        p.println("// Introduction to different verilog abstraction levels\n\n");
        p.println("// Device : " + device);
        p.println("// Generated on : " + date);

        p.println("\n// Module 4-to-1 multiplexer using behavioral modelling."
                + "\nmodule behavioral_mux (clk,out1); "
                + "\ninput clk;"
                + "\noutput reg out1;"
                + "\nreg i0, i1, i2, i3;"
                + "\nreg s1, s0;"
                + "\nalways @(posedge clk)"
                + "\nbegin"
                + "\ni0=" + muxInput1 + ";"
                + "\ni1=" + muxInput2 + ";"
                + "\ni2=" + muxInput3 + ";"
                + "\ni3=" + muxInput4 + ";"
                + "\ns1=" + muxS1 + ";"
                + "\ns0=" + muxS0 + ";"
                + "\ncase ({s1, s0})"
                + "\n2'b00: out1 = i0;"
                + "\n2'b01: out1 = i1;"
                + "\n2'b10: out1 = i2;"
                + "\n2'b11: out1 = i3;"
                + "\ndefault: out1 = 1'bx;"
                + "\nendcase"
                + "\nend"
                + "\nendmodule");
    }

    public void generateAdderBehaviouralLevel(PrintStream p, String device, String adderInput1, String adderInput2, String adderCarry) {
        p.println("// Introduction to different verilog abstraction levels\n\n");
        p.println("// Device : " + device);
        p.println("// Generated on : " + date);

        p.println("\n// Define a 4-bit full adder"
                + "\nmodule behavioral_adder(clk,sum,c_out);"
                + "\ninput clk;"
                + "\noutput reg [3:0] sum;"
                + "\noutput reg c_out;"
                + "\nreg [3:0] a=4'b" + adderInput1 + ";"
                + "\nreg [3:0] b=4'b" + adderInput2 + ";"
                + "\nreg c_in=1'b" + adderCarry + ";"
                + "\n"
                + "\nalways @(posedge clk)"
                + "\nbegin"
                + "\n{c_out, sum[3:0]} = a + b + c_in;"
                + "\nend"
                + "\nendmodule");
    }

    public void generateAdderGateLevel(PrintStream p, String device, String adderInput1, String adderInput2, String adderCarry) {
        p.println("// Introduction to different verilog abstraction levels\n\n");
        p.println("// Device : " + device);
        p.println("// Generated on : " + date);

        p.println("\nmodule gatelevel_adder (clk,s,cout);"
                + "\ninput clk;"
                + "\noutput wire s;"
                + "\noutput wire cout;"
                + "\nreg a,b,cin;"
                + "\n "
                + "\n// wires (from ands to or)"
                + "\nwire w1, w2, w3;"
                + "\ninitial"
                + "\nbegin"
                + "\na=" + adderInput1 + ";"
                + "\nb=" + adderInput2 + ";"
                + "\ncin=" + adderCarry + ";"
                + "\nend"
                + "\n// carry-out circuitry"
                + "\nand( w1, a, b );"
                + "\nand( w2, a, cin );"
                + "\nand( w3, b, cin );"
                + "\nor( cout, w1, w2, w3 );"
                + "\n "
                + "\n// sum"
                + "\nxor( s, a, b, cin );"
                + "\n "
                + "\nendmodule");
    }
}//end class
